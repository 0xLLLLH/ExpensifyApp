///
/// HybridContactsModuleSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridContactsModuleSpec.hpp"

// Forward declaration of `HybridContactsModuleSpecCxx` to properly resolve imports.
namespace ContactsModule { class HybridContactsModuleSpecCxx; }





#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "ContactsModule-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::contacts {

  /**
   * The C++ part of HybridContactsModuleSpecCxx.swift.
   *
   * HybridContactsModuleSpecSwift (C++) accesses HybridContactsModuleSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridContactsModuleSpecCxx can directly inherit from the C++ class HybridContactsModuleSpec
   * to simplify the whole structure and memory management.
   */
  class HybridContactsModuleSpecSwift: public virtual HybridContactsModuleSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridContactsModuleSpecSwift(const ContactsModule::HybridContactsModuleSpecCxx& swiftPart):
      HybridObject(HybridContactsModuleSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline ContactsModule::HybridContactsModuleSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void getAll() override {
      _swiftPart.getAll();
    }

  private:
    ContactsModule::HybridContactsModuleSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::contacts
