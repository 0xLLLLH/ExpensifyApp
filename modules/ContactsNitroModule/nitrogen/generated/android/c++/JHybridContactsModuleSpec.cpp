///
/// JHybridContactsModuleSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridContactsModuleSpec.hpp"

// Forward declaration of `Contact` to properly resolve imports.
namespace margelo::nitro::contacts { struct Contact; }
// Forward declaration of `StringHolder` to properly resolve imports.
namespace margelo::nitro::contacts { struct StringHolder; }
// Forward declaration of `ContactFields` to properly resolve imports.
namespace margelo::nitro::contacts { enum class ContactFields; }

#include <future>
#include <vector>
#include "Contact.hpp"
#include <NitroModules/JPromise.hpp>
#include "JContact.hpp"
#include <optional>
#include <string>
#include "StringHolder.hpp"
#include "JStringHolder.hpp"
#include "ContactFields.hpp"
#include "JContactFields.hpp"

namespace margelo::nitro::contacts {

  jni::local_ref<JHybridContactsModuleSpec::jhybriddata> JHybridContactsModuleSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridContactsModuleSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridContactsModuleSpec::initHybrid),
    });
  }

  size_t JHybridContactsModuleSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::future<std::vector<Contact>> JHybridContactsModuleSpec::getAll(const std::vector<ContactFields>& keys) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JArrayClass<JContactFields>> /* keys */)>("getAll");
    auto result = method(_javaPart, [&]() {
      size_t size = keys.size();
      jni::local_ref<jni::JArrayClass<JContactFields>> array = jni::JArrayClass<JContactFields>::newArray(size);
      for (size_t i = 0; i < size; i++) {
        const auto& element = keys[i];
        array->setElement(i, *JContactFields::fromCpp(element));
      }
      return array;
    }());
    return [&]() {
      auto promise = std::make_shared<std::promise<std::vector<Contact>>>();
      result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& boxedResult) {
        auto result = jni::static_ref_cast<jni::JArrayClass<JContact>>(boxedResult);
        promise->set_value([&]() {
          size_t size = result->size();
          std::vector<Contact> vector;
          vector.reserve(size);
          for (size_t i = 0; i < size; i++) {
            auto element = result->getElement(i);
            vector.push_back(element->toCpp());
          }
          return vector;
        }());
      });
      result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JString>& message) {
        std::runtime_error error(message->toStdString());
        promise->set_exception(std::make_exception_ptr(error));
      });
      return promise->get_future();
    }();
  }

} // namespace margelo::nitro::contacts
