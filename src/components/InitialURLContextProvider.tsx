import React, {createContext, useEffect, useState} from 'react';
import type {ReactNode} from 'react';
import {Linking} from 'react-native';
import {signInWithOldDotData} from '@libs/actions/Session';
import Log from '@libs/Log';
import CONFIG from '@src/CONFIG';
import type {Route} from '@src/ROUTES';

/** Initial url that will be opened when NewDot is embedded into Hybrid App. */
const InitialURLContext = createContext<Route | undefined>(undefined);

type InitialURLContextProviderProps = {
    /** URL passed to our top-level React Native component by HybridApp. Will always be undefined in "pure" NewDot builds. */
    url?: Route;

    /** Children passed to the context provider */
    children: ReactNode;
};

function setParamsInOnyx(urlToParse: string) {
    const requiredParams = ['email', 'authToken', 'encryptedAuthToken', 'accountID', 'autoGeneratedLogin', 'autoGeneratedPassword'];
    const searchParams = new URL(urlToParse, CONFIG.EXPENSIFY.EXPENSIFY_URL).searchParams;

    const params = Object.fromEntries(requiredParams.map((param) => [param, searchParams.get(param)]));

    if (params.email && params.authToken && params.encryptedAuthToken && params.accountID && params.autoGeneratedLogin && params.autoGeneratedPassword) {
        Log.info('[HybridApp] Saving data from transition in Onyx');
        signInWithOldDotData(params.email, params.authToken, params.encryptedAuthToken, Number(params.accountID), params.autoGeneratedLogin, params.autoGeneratedPassword);
    }
}

function InitialURLContextProvider({children, url}: InitialURLContextProviderProps) {
    const [initialURL, setInitialURL] = useState(url);
    useEffect(() => {
        if (url) {
            setParamsInOnyx(url);
            setInitialURL(url);
            return;
        }
        Linking.getInitialURL().then((initURL) => {
            setInitialURL(initURL as Route);
        });
    }, [url]);
    return <InitialURLContext.Provider value={initialURL}>{children}</InitialURLContext.Provider>;
}

InitialURLContextProvider.displayName = 'InitialURLContextProvider';

export default InitialURLContextProvider;
export {InitialURLContext};
