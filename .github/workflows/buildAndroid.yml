name: Build Android app

on:
  workflow_call:
    inputs:
      type:
        description: 'What type of build to run. Must be one of ["release", "adhoc", "e2e", "e2eDelta"]'
        required: true
        type: string
      ref:
        description: Git ref to checkout and build
        required: true
        type: string
    outputs:
      AAB_FILE_NAME:
        value: ${{ jobs.build.outputs.AAB_FILE_NAME }}
      APK_FILE_NAME:
        value: ${{ jobs.build.outputs.APK_FILE_NAME }}

  workflow_dispatch:
    inputs:
      type:
        description: What type of build do you want to run?
        required: true
        type: choice
        options:
          - release
          - adhoc
          - e2e
          - e2eDelta
      ref:
        description: Git ref to checkout and build
        required: true
        type: string

jobs:
  build:
    name: Build Android app
    runs-on: ubuntu-latest-xl
    env:
      RUBYOPT: '-rostruct'
    outputs:
      AAB_FILE_NAME: ${{ steps.build.outputs.AAB_FILE_NAME }}
      APK_FILE_NAME: ${{ steps.build.outputs.APK_FILE_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Configure MapBox SDK
        run: ./scripts/setup-mapbox-sdk.sh ${{ secrets.MAPBOX_SDK_DOWNLOAD_TOKEN }}

      - name: Setup Node
        uses: ./.github/actions/composite/setupNode

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: oracle
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1.190.0
        with:
          bundler-cache: true

      - name: Decrypt keystore and json key
        run: |
          cd android/app
          gpg --batch --yes --decrypt --passphrase="${{ secrets.LARGE_SECRET_PASSPHRASE }}" --output my-upload-key.keystore my-upload-key.keystore.gpg
          gpg --batch --yes --decrypt --passphrase="${{ secrets.LARGE_SECRET_PASSPHRASE }}" --output android-fastlane-json-key.json android-fastlane-json-key.json.gpg

      - name: Get Android native version
        id: getAndroidVersion
        run: echo "VERSION_CODE=$(grep -o 'versionCode\s\+[0-9]\+' android/app/build.gradle | awk '{ print $2 }')" >> "$GITHUB_OUTPUT"

      - name: Build Android app
        id: build
        run: |
          lane=''
          case '${{ inputs.type }}' in
            'release')
              lane='build';;
            'adhoc')
              lane='build_adhoc';;
            'e2e')
              lane='build_e2e';;
            'e2eDelta')
              lane='build_e2eDelta';;
          esac
          bundle exec fastlane android "$lane"

          # gradleAPKOutputPath and gradleAABOutputPath are environment varibles set within the Fastfile
          echo "GRADLE_AAB_OUTPUT_PATH=$gradleAABOutputPath" >> "$GITHUB_OUTPUT"
          echo "AAB_FILE_NAME=$(basename "$gradleAABOutputPath")" >> "$GITHUB_OUTPUT"
          echo "GRADLE_APK_OUTPUT_PATH=$gradleAPKOutputPath" >> "$GITHUB_OUTPUT"
          echo "APK_FILE_NAME=$(basename "$gradleAPKOutputPath")" >> "$GITHUB_OUTPUT"

          SHOULD_UPLOAD_SOURCEMAPS='false'
          if [ -f ./android/app/build/generated/sourcemaps/react/productionRelease/index.android.bundle.map ]; then
            SHOULD_UPLOAD_SOURCEMAPS='true'
          fi
          echo "SHOULD_UPLOAD_SOURCEMAPS=$SHOULD_UPLOAD_SOURCEMAPS" >> "$GITHUB_OUTPUT"
        env:
          MYAPP_UPLOAD_STORE_PASSWORD: ${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}
          MYAPP_UPLOAD_KEY_PASSWORD: ${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}

      - name: Upload Android AAB artifact
        if: ${{ steps.build.outputs.GRADLE_AAB_OUTPUT_PATH != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: android-artifact-aab
          path: ${{ steps.build.outputs.GRADLE_AAB_OUTPUT_PATH }}

      - name: Upload Android APK artifact
        if: ${{ steps.build.outputs.GRADLE_APK_OUTPUT_PATH != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: android-artifact-apk
          path: ${{ steps.build.outputs.GRADLE_APK_OUTPUT_PATH }}

      - name: Upload Android sourcemaps artifact
        if: ${{ steps.build.outputs.SHOULD_UPLOAD_SOURCEMAPS == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: android-artifact-sourcemaps
          path: ./android/app/build/generated/sourcemaps/react/productionRelease/index.android.bundle.map

      - name: Announce failure in slack
        if: failure()
        uses: ./.github/actions/composite/announceFailedWorkflowInSlack
        with:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
