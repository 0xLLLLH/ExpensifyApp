diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/core/JavaTimerManager.kt b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/core/JavaTimerManager.kt
index ecce674..455f739 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/core/JavaTimerManager.kt
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/core/JavaTimerManager.kt
@@ -132,7 +132,7 @@ public open class JavaTimerManager(
 
   private fun clearFrameCallback() {
     val headlessJsTaskContext = HeadlessJsTaskContext.getInstance(reactApplicationContext)
-    if (frameCallbackPosted && isPaused.get() && !headlessJsTaskContext.hasActiveTasks()) {
+    if (reactChoreographer.hasFrameCallback(ReactChoreographer.CallbackType.TIMERS_EVENTS, timerFrameCallback) && isPaused.get() && !headlessJsTaskContext.hasActiveTasks()) {
       reactChoreographer.removeFrameCallback(
           ReactChoreographer.CallbackType.TIMERS_EVENTS, timerFrameCallback)
       frameCallbackPosted = false
@@ -140,7 +140,7 @@ public open class JavaTimerManager(
   }
 
   private fun setChoreographerIdleCallback() {
-    if (!frameIdleCallbackPosted) {
+    if (!reactChoreographer.hasFrameCallback(ReactChoreographer.CallbackType.TIMERS_EVENTS, timerFrameCallback)) {
       reactChoreographer.postFrameCallback(
           ReactChoreographer.CallbackType.IDLE_EVENT, idleFrameCallback)
       frameIdleCallbackPosted = true
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/core/ReactChoreographer.kt b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/core/ReactChoreographer.kt
index 4d28e67..28478ea 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/core/ReactChoreographer.kt
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/core/ReactChoreographer.kt
@@ -92,6 +92,12 @@ public class ReactChoreographer private constructor(choreographerProvider: Chore
     }
   }
 
+  public fun hasFrameCallback(type: CallbackType, frameCallback: Choreographer.FrameCallback): Boolean {
+    synchronized(callbackQueues) {
+      return callbackQueues[type.order].indexOf(frameCallback) > 0
+    }
+  }
+
   /**
    * This method writes [hasPostedCallback] and it should be called from another method that has
    * the lock on [callbackQueues].
