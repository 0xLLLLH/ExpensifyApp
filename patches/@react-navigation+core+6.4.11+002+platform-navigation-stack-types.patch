diff --git a/node_modules/@react-navigation/core/src/index.tsx b/node_modules/@react-navigation/core/src/index.tsx
index 61706b6..9db0c9d 100644
--- a/node_modules/@react-navigation/core/src/index.tsx
+++ b/node_modules/@react-navigation/core/src/index.tsx
@@ -17,7 +17,10 @@ export * from './types';
 export { default as useFocusEffect } from './useFocusEffect';
 export { default as useIsFocused } from './useIsFocused';
 export { default as useNavigation } from './useNavigation';
-export { default as useNavigationBuilder } from './useNavigationBuilder';
+export {
+  NavigationBuilderOptions,
+  default as useNavigationBuilder,
+} from './useNavigationBuilder';
 export { default as useNavigationContainerRef } from './useNavigationContainerRef';
 export { default as useNavigationState } from './useNavigationState';
 export { default as UNSTABLE_usePreventRemove } from './usePreventRemove';
diff --git a/node_modules/@react-navigation/core/src/types.tsx b/node_modules/@react-navigation/core/src/types.tsx
index b691d75..88f4f50 100644
--- a/node_modules/@react-navigation/core/src/types.tsx
+++ b/node_modules/@react-navigation/core/src/types.tsx
@@ -19,11 +19,47 @@ declare global {
 
 type Keyof<T extends {}> = Extract<keyof T, string>;
 
+export type ScreenListenersOrCallback<
+  State extends NavigationState,
+  EventMap extends EventMapBase,
+  ParamList extends ParamListBase = ParamListBase,
+  RouteName extends keyof ParamList = keyof ParamList
+> =
+  | ScreenListeners<State, EventMap>
+  | ((props: {
+      route: RouteProp<ParamList, RouteName>;
+      navigation: any;
+    }) => ScreenListeners<State, EventMap>);
+
+export type ScreenOptionsOrCallback<
+  ScreenOptions extends {},
+  ParamList extends ParamListBase = ParamListBase,
+  RouteName extends keyof ParamList = keyof ParamList
+> =
+  | ScreenOptions
+  | ((props: {
+      route: RouteProp<ParamList, RouteName>;
+      navigation: any;
+    }) => ScreenOptions);
+
+export type DefaultScreenOptionsOrCallback<
+  ScreenOptions extends {},
+  ParamList extends ParamListBase = ParamListBase,
+  RouteName extends keyof ParamList = keyof ParamList
+> =
+  | ScreenOptions
+  | ((props: {
+      route: RouteProp<ParamList, RouteName>;
+      navigation: any;
+      options: ScreenOptions;
+    }) => ScreenOptions);
+
 export type DefaultNavigatorOptions<
   ParamList extends ParamListBase,
   State extends NavigationState,
   ScreenOptions extends {},
-  EventMap extends EventMapBase
+  EventMap extends EventMapBase,
+  RouteName extends keyof ParamList = keyof ParamList
 > = DefaultRouterOptions<Keyof<ParamList>> & {
   /**
    * Optional ID for the navigator. Can be used with `navigation.getParent(id)` to refer to a parent.
@@ -37,21 +73,11 @@ export type DefaultNavigatorOptions<
   /**
    * Event listeners for all the screens in the navigator.
    */
-  screenListeners?:
-    | ScreenListeners<State, EventMap>
-    | ((props: {
-        route: RouteProp<ParamList>;
-        navigation: any;
-      }) => ScreenListeners<State, EventMap>);
+  screenListeners?: ScreenListenersOrCallback<State, EventMap>;
   /**
    * Default options for all screens under this navigator.
    */
-  screenOptions?:
-    | ScreenOptions
-    | ((props: {
-        route: RouteProp<ParamList>;
-        navigation: any;
-      }) => ScreenOptions);
+  screenOptions?: ScreenOptionsOrCallback<ScreenOptions, ParamList, RouteName>;
 };
 
 export type EventMapBase = Record<
diff --git a/node_modules/@react-navigation/core/src/useDescriptors.tsx b/node_modules/@react-navigation/core/src/useDescriptors.tsx
index d5a192c..e39b723 100644
--- a/node_modules/@react-navigation/core/src/useDescriptors.tsx
+++ b/node_modules/@react-navigation/core/src/useDescriptors.tsx
@@ -14,12 +14,14 @@ import NavigationContext from './NavigationContext';
 import NavigationRouteContext from './NavigationRouteContext';
 import SceneView from './SceneView';
 import type {
+  DefaultScreenOptionsOrCallback,
   Descriptor,
   EventMapBase,
   NavigationHelpers,
   NavigationProp,
   RouteConfig,
   RouteProp,
+  ScreenOptionsOrCallback,
 } from './types';
 import type { NavigationEventEmitter } from './useEventEmitter';
 import useNavigationCache from './useNavigationCache';
@@ -35,13 +37,6 @@ export type ScreenConfigWithParent<
   props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;
 };
 
-type ScreenOptionsOrCallback<ScreenOptions extends {}> =
-  | ScreenOptions
-  | ((props: {
-      route: RouteProp<ParamListBase, string>;
-      navigation: any;
-    }) => ScreenOptions);
-
 type Options<
   State extends NavigationState,
   ScreenOptions extends {},
@@ -54,13 +49,7 @@ type Options<
   >;
   navigation: NavigationHelpers<ParamListBase>;
   screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;
-  defaultScreenOptions?:
-    | ScreenOptions
-    | ((props: {
-        route: RouteProp<ParamListBase>;
-        navigation: any;
-        options: ScreenOptions;
-      }) => ScreenOptions);
+  defaultScreenOptions?: DefaultScreenOptionsOrCallback<ScreenOptions>;
   onAction: (action: NavigationAction) => boolean;
   getState: () => State;
   setState: (state: State) => void;
diff --git a/node_modules/@react-navigation/core/src/useNavigationBuilder.tsx b/node_modules/@react-navigation/core/src/useNavigationBuilder.tsx
index 7d550e0..2efd31f 100644
--- a/node_modules/@react-navigation/core/src/useNavigationBuilder.tsx
+++ b/node_modules/@react-navigation/core/src/useNavigationBuilder.tsx
@@ -23,12 +23,13 @@ import PreventRemoveProvider from './PreventRemoveProvider';
 import Screen from './Screen';
 import {
   DefaultNavigatorOptions,
+  DefaultScreenOptionsOrCallback,
   EventMapBase,
   EventMapCore,
   NavigatorScreenParams,
   PrivateValueStore,
   RouteConfig,
-  RouteProp,
+  ScreenOptionsOrCallback,
 } from './types';
 import useChildListeners from './useChildListeners';
 import useComponent from './useComponent';
@@ -49,18 +50,12 @@ import useScheduleUpdate from './useScheduleUpdate';
 // eslint-disable-next-line babel/no-unused-expressions
 PrivateValueStore;
 
-type NavigationBuilderOptions<ScreenOptions extends {}> = {
+export type NavigationBuilderOptions<ScreenOptions extends {}> = {
   /**
    * Default options specified by the navigator.
    * It receives the custom options in the arguments if a function is specified.
    */
-  defaultScreenOptions?:
-    | ScreenOptions
-    | ((props: {
-        route: RouteProp<ParamListBase>;
-        navigation: any;
-        options: ScreenOptions;
-      }) => ScreenOptions);
+  defaultScreenOptions?: DefaultScreenOptionsOrCallback<ScreenOptions>;
 };
 
 type NavigatorRoute<State extends NavigationState> = {
@@ -68,6 +63,13 @@ type NavigatorRoute<State extends NavigationState> = {
   params?: NavigatorScreenParams<ParamListBase, State>;
 };
 
+type ConvertCustomScreenOptions<
+  CustomScreenOptions extends {},
+  ScreenOptions extends {}
+> = (
+  options: ScreenOptionsOrCallback<CustomScreenOptions>
+) => ScreenOptionsOrCallback<ScreenOptions>;
+
 const isValidKey = (key: unknown) =>
   key === undefined || (typeof key === 'string' && key !== '');
 
@@ -79,16 +81,34 @@ const isValidKey = (key: unknown) =>
 const getRouteConfigsFromChildren = <
   State extends NavigationState,
   ScreenOptions extends {},
-  EventMap extends EventMapBase
+  EventMap extends EventMapBase,
+  CustomScreenOptions extends {} = ScreenOptions
 >(
   children: React.ReactNode,
   groupKey?: string,
   groupOptions?: ScreenConfigWithParent<
     State,
-    ScreenOptions,
+    ScreenOptions | CustomScreenOptions,
     EventMap
-  >['options']
+  >['options'],
+  transformScreenOptions?: ConvertCustomScreenOptions<
+    CustomScreenOptions,
+    ScreenOptions
+  >
 ) => {
+  let platformGroupOptions = groupOptions as
+    | (ScreenOptionsOrCallback<ScreenOptions> | undefined)[]
+    | undefined;
+  if (transformScreenOptions !== undefined && groupOptions !== undefined) {
+    platformGroupOptions = groupOptions.map((groupOption) =>
+      groupOption === undefined
+        ? undefined
+        : transformScreenOptions(
+            groupOption as ScreenOptionsOrCallback<CustomScreenOptions>
+          )
+    );
+  }
+
   const configs = React.Children.toArray(children).reduce<
     ScreenConfigWithParent<State, ScreenOptions, EventMap>[]
   >((acc, child) => {
@@ -107,16 +127,24 @@ const getRouteConfigsFromChildren = <
           );
         }
 
+        const props: RouteConfig<
+          ParamListBase,
+          keyof ParamListBase,
+          State,
+          ScreenOptions,
+          EventMap
+        > =
+          transformScreenOptions === undefined
+            ? child.props
+            : {
+                ...child.props,
+                options: transformScreenOptions(child.props.options),
+              };
+
         acc.push({
           keys: [groupKey, child.props.navigationKey],
-          options: groupOptions,
-          props: child.props as RouteConfig<
-            ParamListBase,
-            string,
-            State,
-            ScreenOptions,
-            EventMap
-          >,
+          options: platformGroupOptions,
+          props,
         });
         return acc;
       }
@@ -133,14 +161,20 @@ const getRouteConfigsFromChildren = <
         // When we encounter a fragment or group, we need to dive into its children to extract the configs
         // This is handy to conditionally define a group of screens
         acc.push(
-          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(
+          ...getRouteConfigsFromChildren<
+            State,
+            ScreenOptions,
+            EventMap,
+            CustomScreenOptions
+          >(
             child.props.children,
             child.props.navigationKey,
             child.type !== Group
               ? groupOptions
               : groupOptions != null
               ? [...groupOptions, child.props.screenOptions]
-              : [child.props.screenOptions]
+              : [child.props.screenOptions],
+            transformScreenOptions
           )
         );
         return acc;
@@ -257,17 +291,22 @@ export default function useNavigationBuilder<
   RouterOptions extends DefaultRouterOptions,
   ActionHelpers extends Record<string, () => void>,
   ScreenOptions extends {},
-  EventMap extends Record<string, any>
+  EventMap extends Record<string, any>,
+  CustomScreenOptions extends {} = ScreenOptions
 >(
   createRouter: RouterFactory<State, any, RouterOptions>,
   options: DefaultNavigatorOptions<
     ParamListBase,
     State,
-    ScreenOptions,
+    CustomScreenOptions,
     EventMap
   > &
-    NavigationBuilderOptions<ScreenOptions> &
-    RouterOptions
+    NavigationBuilderOptions<CustomScreenOptions> &
+    RouterOptions,
+  convertCustomScreenOptions?: ConvertCustomScreenOptions<
+    CustomScreenOptions,
+    ScreenOptions
+  >
 ) {
   const navigatorKey = useRegisterNavigator();
 
@@ -291,8 +330,9 @@ export default function useNavigationBuilder<
   const routeConfigs = getRouteConfigsFromChildren<
     State,
     ScreenOptions,
-    EventMap
-  >(children);
+    EventMap,
+    CustomScreenOptions
+  >(children, undefined, undefined, convertCustomScreenOptions);
 
   const screens = routeConfigs.reduce<
     Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>
@@ -362,6 +402,11 @@ export default function useNavigationBuilder<
 
   const stateCleanedUp = React.useRef(false);
 
+  const cleanUpState = React.useCallback(() => {
+    setCurrentState(undefined);
+    stateCleanedUp.current = true;
+  }, [setCurrentState]);
+
   const setState = React.useCallback(
     (state: NavigationState | PartialState<NavigationState> | undefined) => {
       if (stateCleanedUp.current) {
@@ -535,9 +580,6 @@ export default function useNavigationBuilder<
   state = nextState;
 
   React.useEffect(() => {
-    // In strict mode, React will double-invoke effects.
-    // So we need to reset the flag if component was not unmounted
-    stateCleanedUp.current = false;
     setKey(navigatorKey);
 
     if (!getIsInitial()) {
@@ -549,10 +591,14 @@ export default function useNavigationBuilder<
 
     return () => {
       // We need to clean up state for this navigator on unmount
-      if (getCurrentState() !== undefined && getKey() === navigatorKey) {
-        setCurrentState(undefined);
-        stateCleanedUp.current = true;
-      }
+      // We do it in a timeout because we need to detect if another navigator mounted in the meantime
+      // For example, if another navigator has started rendering, we should skip cleanup
+      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it
+      setTimeout(() => {
+        if (getCurrentState() !== undefined && getKey() === navigatorKey) {
+          cleanUpState();
+        }
+      }, 0);
     };
     // eslint-disable-next-line react-hooks/exhaustive-deps
   }, []);
@@ -688,8 +734,16 @@ export default function useNavigationBuilder<
     state,
     screens,
     navigation,
-    screenOptions: options.screenOptions,
-    defaultScreenOptions: options.defaultScreenOptions,
+    screenOptions:
+      options.screenOptions === undefined
+        ? undefined
+        : convertCustomScreenOptions?.(options.screenOptions),
+    defaultScreenOptions:
+      options.defaultScreenOptions === undefined
+        ? undefined
+        : convertCustomScreenOptions?.(
+            options.defaultScreenOptions as ScreenOptionsOrCallback<CustomScreenOptions>
+          ),
     onAction,
     getState,
     setState,
