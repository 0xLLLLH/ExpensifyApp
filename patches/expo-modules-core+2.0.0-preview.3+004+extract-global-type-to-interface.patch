diff --git a/node_modules/expo-modules-core/build/ts-declarations/global.d.ts b/node_modules/expo-modules-core/build/ts-declarations/global.d.ts
index 16b897c..345a765 100644
--- a/node_modules/expo-modules-core/build/ts-declarations/global.d.ts
+++ b/node_modules/expo-modules-core/build/ts-declarations/global.d.ts
@@ -47,28 +47,26 @@ type ViewConfig = {
         registrationName: string;
     }>;
 };
+export interface ExpoProcess {
+    env: {
+        NODE_ENV: string;
+        EXPO_DEV_SERVER_ORIGIN?: string;
+        EXPO_ROUTER_IMPORT_MODE?: string;
+        EXPO_ROUTER_ABS_APP_ROOT?: string;
+        EXPO_ROUTER_APP_ROOT?: string;
+        EXPO_BASE_URL?: string;
+        EXPO_OS?: string;
+        [key: string]: any;
+    };
+    [key: string]: any;
+}
 declare global {
     /**
      * Global object containing all the native bindings installed by Expo.
      * This object is not available in projects without the `expo` package installed.
      */
     var expo: ExpoGlobal;
-    const process: {
-        env: {
-            NODE_ENV: string;
-            /** Used in `@expo/metro-runtime`. */
-            EXPO_DEV_SERVER_ORIGIN?: string;
-            EXPO_ROUTER_IMPORT_MODE?: string;
-            EXPO_ROUTER_ABS_APP_ROOT?: string;
-            EXPO_ROUTER_APP_ROOT?: string;
-            /** Maps to the `experiments.baseUrl` property in the project Expo config. This is injected by `babel-preset-expo` and supports automatic cache invalidation. */
-            EXPO_BASE_URL?: string;
-            /** Build-time representation of the `Platform.OS` value that the current JavaScript was bundled for. Does not support platform shaking wrapped require statements. */
-            EXPO_OS?: string;
-            [key: string]: any;
-        };
-        [key: string]: any;
-    };
+    var process: ExpoProcess;
 }
 export {};
 //# sourceMappingURL=global.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-modules-core/src/ts-declarations/global.ts b/node_modules/expo-modules-core/src/ts-declarations/global.ts
index 94f487a..84cc6fb 100644
--- a/node_modules/expo-modules-core/src/ts-declarations/global.ts
+++ b/node_modules/expo-modules-core/src/ts-declarations/global.ts
@@ -62,31 +62,25 @@ type ViewConfig = {
 
 /* eslint-disable no-var */
 
+export interface ExpoProcess {
+  env: {
+    NODE_ENV: string;
+    EXPO_DEV_SERVER_ORIGIN?: string;
+    EXPO_ROUTER_IMPORT_MODE?: string;
+    EXPO_ROUTER_ABS_APP_ROOT?: string;
+    EXPO_ROUTER_APP_ROOT?: string;
+    EXPO_BASE_URL?: string;
+    EXPO_OS?: string;
+    [key: string]: any;
+  };
+  [key: string]: any;
+}
+
 declare global {
   /**
    * Global object containing all the native bindings installed by Expo.
    * This object is not available in projects without the `expo` package installed.
    */
   var expo: ExpoGlobal;
-
-  const process: {
-    env: {
-      NODE_ENV: string;
-      /** Used in `@expo/metro-runtime`. */
-      EXPO_DEV_SERVER_ORIGIN?: string;
-
-      EXPO_ROUTER_IMPORT_MODE?: string;
-      EXPO_ROUTER_ABS_APP_ROOT?: string;
-      EXPO_ROUTER_APP_ROOT?: string;
-
-      /** Maps to the `experiments.baseUrl` property in the project Expo config. This is injected by `babel-preset-expo` and supports automatic cache invalidation. */
-      EXPO_BASE_URL?: string;
-
-      /** Build-time representation of the `Platform.OS` value that the current JavaScript was bundled for. Does not support platform shaking wrapped require statements. */
-      EXPO_OS?: string;
-
-      [key: string]: any;
-    };
-    [key: string]: any;
-  };
+  var process: ExpoProcess;
 }
