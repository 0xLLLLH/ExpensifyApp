diff --git a/node_modules/react-native/.gradle/buildOutputCleanup/buildOutputCleanup.lock b/node_modules/react-native/.gradle/buildOutputCleanup/buildOutputCleanup.lock
new file mode 100644
index 0000000..a403fbb
Binary files /dev/null and b/node_modules/react-native/.gradle/buildOutputCleanup/buildOutputCleanup.lock differ
diff --git a/node_modules/react-native/.gradle/buildOutputCleanup/cache.properties b/node_modules/react-native/.gradle/buildOutputCleanup/cache.properties
new file mode 100644
index 0000000..17fb517
--- /dev/null
+++ b/node_modules/react-native/.gradle/buildOutputCleanup/cache.properties
@@ -0,0 +1,2 @@
+#Wed Sep 04 14:07:41 CEST 2024
+gradle.version=8.8
diff --git a/node_modules/react-native/.project b/node_modules/react-native/.project
new file mode 100644
index 0000000..dacc2de
--- /dev/null
+++ b/node_modules/react-native/.project
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>react-native-build-from-source-react-native</name>
+	<comment>Project react-native-build-from-source-react-native created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1724676428902</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/react-native/Libraries/ReactNative/AppRegistry.js b/node_modules/react-native/Libraries/ReactNative/AppRegistry.js
index 68bd389..4d1925e 100644
--- a/node_modules/react-native/Libraries/ReactNative/AppRegistry.js
+++ b/node_modules/react-native/Libraries/ReactNative/AppRegistry.js
@@ -232,12 +232,31 @@ const AppRegistry = {
     appParameters: Object,
     displayMode?: number,
   ): void {
+    const redactAppParameters = (parameters) => {
+      const initialProps = parameters['initialProps'];
+      const url = initialProps['url'];
+
+      if(!url) {
+        return parameters;
+      }
+
+      const sensitiveParams = ['authToken', 'autoGeneratedPassword', 'autoGeneratedLogin'];
+      const [urlBase, queryString] = url.split('?');
+
+      if (!queryString) {
+        return parameters;
+      }
+    
+      const redactedSearchParams = [...new URLSearchParams(queryString).entries()].map(([key, value]) => `${key}=${sensitiveParams.includes(key) ? '<REDACTED>' : value}`);
+      return {...parameters, initialProps: {...initialProps, url: `${urlBase}?${redactedSearchParams.join('&')}`}};
+    }
+
     if (appKey !== 'LogBox') {
       const msg =
         'Updating props for Surface "' +
         appKey +
         '" with ' +
-        JSON.stringify(appParameters);
+        JSON.stringify(redactAppParameters(appParameters));
       infoLog(msg);
       BugReporting.addSource(
         'AppRegistry.setSurfaceProps' + runCount++,
diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
new file mode 100644
index 0000000..b9aa690
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
@@ -0,0 +1,218 @@
+
+/*
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderH
+ */
+
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wreturn-type-c-linkage"
+
+#import <React/RCTComponentViewProtocol.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name);
+#if RCT_NEW_ARCH_ENABLED
+#ifndef RCT_DYNAMIC_FRAMEWORKS
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> MarkdownTextInputDecoratorViewCls(void) __attribute__((used)); // 0
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RNCPickerCls(void) __attribute__((used)); // 7
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RNMBXAtmosphereCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXBackgroundLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXCalloutCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXCameraCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXCircleLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXCustomLocationProviderCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXFillExtrusionLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXFillLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXHeatmapLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXImageCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXImagesCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXImageSourceCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXLightCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXLineLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXMapViewCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXMarkerViewContentCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXMarkerViewCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXModelLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXModelsCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXNativeUserLocationCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXPointAnnotationCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXRasterDemSourceCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXRasterLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXRasterSourceCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXShapeSourceCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXSkyLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXStyleImportCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXSymbolLayerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXTerrainCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXVectorSourceCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNMBXViewportCls(void) __attribute__((used)); // 8
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> AutoLayoutViewCls(void) __attribute__((used)); // 9
+Class<RCTComponentViewProtocol> CellContainerCls(void) __attribute__((used)); // 9
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RTNAirshipMessageViewCls(void) __attribute__((used)); // 10
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RTNAirshipMessageViewCls(void) __attribute__((used)); // 11
+#endif
+
+#if !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> LottieAnimationViewCls(void) __attribute__((used)); // 12
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+Class<RCTComponentViewProtocol> RNGestureHandlerButtonCls(void) __attribute__((used)); // 17
+Class<RCTComponentViewProtocol> RNGestureHandlerRootViewCls(void) __attribute__((used)); // 17
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> KeyboardControllerViewCls(void) __attribute__((used)); // 21
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV
+Class<RCTComponentViewProtocol> LEGACY_RNCViewPagerCls(void) __attribute__((used)); // 22
+Class<RCTComponentViewProtocol> RNCViewPagerCls(void) __attribute__((used)); // 22
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RNPDFPdfViewCls(void) __attribute__((used)); // 23
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> PLKEmbeddedViewCls(void) __attribute__((used)); // 26
+#endif
+
+
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNCSafeAreaProviderCls(void) __attribute__((used)); // 28
+Class<RCTComponentViewProtocol> RNCSafeAreaViewCls(void) __attribute__((used)); // 28
+#endif
+
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNSFullWindowOverlayCls(void) __attribute__((used)); // 29
+Class<RCTComponentViewProtocol> RNSModalScreenCls(void) __attribute__((used)); // 29
+Class<RCTComponentViewProtocol> RNSScreenContainerCls(void) __attribute__((used)); // 29
+Class<RCTComponentViewProtocol> RNSScreenCls(void) __attribute__((used)); // 29
+Class<RCTComponentViewProtocol> RNSScreenNavigationContainerCls(void) __attribute__((used)); // 29
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderConfigCls(void) __attribute__((used)); // 29
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderSubviewCls(void) __attribute__((used)); // 29
+Class<RCTComponentViewProtocol> RNSScreenStackCls(void) __attribute__((used)); // 29
+Class<RCTComponentViewProtocol> RNSSearchBarCls(void) __attribute__((used)); // 29
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+Class<RCTComponentViewProtocol> RNSVGCircleCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGClipPathCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGDefsCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGEllipseCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGFeColorMatrixCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGFilterCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGForeignObjectCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGGroupCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGImageCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGSvgViewCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGLinearGradientCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGLineCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGMarkerCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGMaskCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGPathCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGPatternCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGRadialGradientCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGRectCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGSymbolCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGTextCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGTextPathCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGTSpanCls(void) __attribute__((used)); // 31
+Class<RCTComponentViewProtocol> RNSVGUseCls(void) __attribute__((used)); // 31
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> CameraViewCls(void) __attribute__((used)); // 32
+#endif
+
+#if !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RNCWebViewCls(void) __attribute__((used)); // 33
+#endif
+
+
+#endif
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#pragma GCC diagnostic pop
+
diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
new file mode 100644
index 0000000..4cf41d7
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
@@ -0,0 +1,298 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderCpp
+ */
+
+// OSS-compatibility layer
+
+#import "RCTThirdPartyFabricComponentsProvider.h"
+
+#import <string>
+#import <unordered_map>
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name) {
+  static std::unordered_map<std::string, Class (*)(void)> sFabricComponentsClassMap = {
+    #if RCT_NEW_ARCH_ENABLED
+    #ifndef RCT_DYNAMIC_FRAMEWORKS
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"MarkdownTextInputDecoratorView", MarkdownTextInputDecoratorViewCls}, // 0
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_VISION
+
+    {"RNCPicker", RNCPickerCls}, // 7
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"RNMBXAtmosphere", RNMBXAtmosphereCls}, // 8
+
+    {"RNMBXBackgroundLayer", RNMBXBackgroundLayerCls}, // 8
+
+    {"RNMBXCallout", RNMBXCalloutCls}, // 8
+
+    {"RNMBXCamera", RNMBXCameraCls}, // 8
+
+    {"RNMBXCircleLayer", RNMBXCircleLayerCls}, // 8
+
+    {"RNMBXCustomLocationProvider", RNMBXCustomLocationProviderCls}, // 8
+
+    {"RNMBXFillExtrusionLayer", RNMBXFillExtrusionLayerCls}, // 8
+
+    {"RNMBXFillLayer", RNMBXFillLayerCls}, // 8
+
+    {"RNMBXHeatmapLayer", RNMBXHeatmapLayerCls}, // 8
+
+    {"RNMBXImage", RNMBXImageCls}, // 8
+
+    {"RNMBXImages", RNMBXImagesCls}, // 8
+
+    {"RNMBXImageSource", RNMBXImageSourceCls}, // 8
+
+    {"RNMBXLight", RNMBXLightCls}, // 8
+
+    {"RNMBXLineLayer", RNMBXLineLayerCls}, // 8
+
+    {"RNMBXMapView", RNMBXMapViewCls}, // 8
+
+    {"RNMBXMarkerViewContent", RNMBXMarkerViewContentCls}, // 8
+
+    {"RNMBXMarkerView", RNMBXMarkerViewCls}, // 8
+
+    {"RNMBXModelLayer", RNMBXModelLayerCls}, // 8
+
+    {"RNMBXModels", RNMBXModelsCls}, // 8
+
+    {"RNMBXNativeUserLocation", RNMBXNativeUserLocationCls}, // 8
+
+    {"RNMBXPointAnnotation", RNMBXPointAnnotationCls}, // 8
+
+    {"RNMBXRasterDemSource", RNMBXRasterDemSourceCls}, // 8
+
+    {"RNMBXRasterLayer", RNMBXRasterLayerCls}, // 8
+
+    {"RNMBXRasterSource", RNMBXRasterSourceCls}, // 8
+
+    {"RNMBXShapeSource", RNMBXShapeSourceCls}, // 8
+
+    {"RNMBXSkyLayer", RNMBXSkyLayerCls}, // 8
+
+    {"RNMBXStyleImport", RNMBXStyleImportCls}, // 8
+
+    {"RNMBXSymbolLayer", RNMBXSymbolLayerCls}, // 8
+
+    {"RNMBXTerrain", RNMBXTerrainCls}, // 8
+
+    {"RNMBXVectorSource", RNMBXVectorSourceCls}, // 8
+
+    {"RNMBXViewport", RNMBXViewportCls}, // 8
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+    {"AutoLayoutView", AutoLayoutViewCls}, // 9
+
+    {"CellContainer", CellContainerCls}, // 9
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"RTNAirshipMessageView", RTNAirshipMessageViewCls}, // 10
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"RTNAirshipMessageView", RTNAirshipMessageViewCls}, // 11
+#endif
+
+#if !TARGET_OS_VISION
+
+    {"LottieAnimationView", LottieAnimationViewCls}, // 12
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+
+    {"RNGestureHandlerButton", RNGestureHandlerButtonCls}, // 17
+
+    {"RNGestureHandlerRootView", RNGestureHandlerRootViewCls}, // 17
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"KeyboardControllerView", KeyboardControllerViewCls}, // 21
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV
+
+    {"LEGACY_RNCViewPager", LEGACY_RNCViewPagerCls}, // 22
+
+    {"RNCViewPager", RNCViewPagerCls}, // 22
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+    {"RNPDFPdfView", RNPDFPdfViewCls}, // 23
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"PLKEmbeddedView", PLKEmbeddedViewCls}, // 26
+#endif
+
+
+#if !TARGET_OS_OSX
+
+    {"RNCSafeAreaProvider", RNCSafeAreaProviderCls}, // 28
+
+    {"RNCSafeAreaView", RNCSafeAreaViewCls}, // 28
+#endif
+
+#if !TARGET_OS_OSX
+
+    {"RNSFullWindowOverlay", RNSFullWindowOverlayCls}, // 29
+
+    {"RNSModalScreen", RNSModalScreenCls}, // 29
+
+    {"RNSScreenContainer", RNSScreenContainerCls}, // 29
+
+    {"RNSScreen", RNSScreenCls}, // 29
+
+    {"RNSScreenNavigationContainer", RNSScreenNavigationContainerCls}, // 29
+
+    {"RNSScreenStackHeaderConfig", RNSScreenStackHeaderConfigCls}, // 29
+
+    {"RNSScreenStackHeaderSubview", RNSScreenStackHeaderSubviewCls}, // 29
+
+    {"RNSScreenStack", RNSScreenStackCls}, // 29
+
+    {"RNSSearchBar", RNSSearchBarCls}, // 29
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+
+    {"RNSVGCircle", RNSVGCircleCls}, // 31
+
+    {"RNSVGClipPath", RNSVGClipPathCls}, // 31
+
+    {"RNSVGDefs", RNSVGDefsCls}, // 31
+
+    {"RNSVGEllipse", RNSVGEllipseCls}, // 31
+
+    {"RNSVGFeColorMatrix", RNSVGFeColorMatrixCls}, // 31
+
+    {"RNSVGFilter", RNSVGFilterCls}, // 31
+
+    {"RNSVGForeignObject", RNSVGForeignObjectCls}, // 31
+
+    {"RNSVGGroup", RNSVGGroupCls}, // 31
+
+    {"RNSVGImage", RNSVGImageCls}, // 31
+
+    {"RNSVGSvgView", RNSVGSvgViewCls}, // 31
+
+    {"RNSVGLinearGradient", RNSVGLinearGradientCls}, // 31
+
+    {"RNSVGLine", RNSVGLineCls}, // 31
+
+    {"RNSVGMarker", RNSVGMarkerCls}, // 31
+
+    {"RNSVGMask", RNSVGMaskCls}, // 31
+
+    {"RNSVGPath", RNSVGPathCls}, // 31
+
+    {"RNSVGPattern", RNSVGPatternCls}, // 31
+
+    {"RNSVGRadialGradient", RNSVGRadialGradientCls}, // 31
+
+    {"RNSVGRect", RNSVGRectCls}, // 31
+
+    {"RNSVGSymbol", RNSVGSymbolCls}, // 31
+
+    {"RNSVGText", RNSVGTextCls}, // 31
+
+    {"RNSVGTextPath", RNSVGTextPathCls}, // 31
+
+    {"RNSVGTSpan", RNSVGTSpanCls}, // 31
+
+    {"RNSVGUse", RNSVGUseCls}, // 31
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"CameraView", CameraViewCls}, // 32
+#endif
+
+#if !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"RNCWebView", RNCWebViewCls}, // 33
+#endif
+
+    #endif
+    #endif
+  };
+
+  auto p = sFabricComponentsClassMap.find(name);
+  if (p != sFabricComponentsClassMap.end()) {
+    auto classFunc = p->second;
+    return classFunc();
+  }
+  return nil;
+}
diff --git a/node_modules/react-native/ReactAndroid/.project b/node_modules/react-native/ReactAndroid/.project
new file mode 100644
index 0000000..ae3e089
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/.project
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>ReactAndroid</name>
+	<comment>Project ReactAndroid created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1724676428878</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/react-native/ReactAndroid/bin/.project b/node_modules/react-native/ReactAndroid/bin/.project
new file mode 100644
index 0000000..86cee17
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>ReactAndroid</name>
+	<comment>Project ReactAndroid created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1724676428878</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/react-native/ReactAndroid/bin/README.md b/node_modules/react-native/ReactAndroid/bin/README.md
new file mode 100644
index 0000000..54719f3
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/README.md
@@ -0,0 +1,8 @@
+# Building React Native for Android
+
+See the [Building from Source guide](https://reactnative.dev/contributing/how-to-build-from-source#prerequisites) on the React Native website.
+
+# Running tests
+
+When you submit a pull request CircleCI will automatically run all tests.
+To run tests locally, see [Testing guide](https://reactnative.dev/contributing/how-to-run-and-write-tests) on the React Native website.
diff --git a/node_modules/react-native/ReactAndroid/bin/cmake-utils/ReactNative-application.cmake b/node_modules/react-native/ReactAndroid/bin/cmake-utils/ReactNative-application.cmake
new file mode 100644
index 0000000..de13935
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/cmake-utils/ReactNative-application.cmake
@@ -0,0 +1,159 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+# This CMake file takes care of creating everything you need to build and link
+# your C++ source code in a React Native Application for Android.
+# You just need to call `project(<my_project_name>)` and import this file.
+# Specifically this file will:
+# - Take care of creating a shared library called as your project
+# - Take care of setting the correct compile options
+# - Include all the pre-built libraries in your build graph
+# - Link your library against those prebuilt libraries so you can access JSI, Fabric, etc.
+# - Link your library against any autolinked library.
+# - Make sure ccache is used as part of the compilation process, if you have it installed.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+include(${CMAKE_CURRENT_LIST_DIR}/folly-flags.cmake)
+
+# We configured the REACT_COMMON_DIR variable as it's commonly used to reference
+# shared C++ code in other targets.
+set(REACT_COMMON_DIR ${REACT_ANDROID_DIR}/../ReactCommon)
+
+# If you have ccache installed, we're going to honor it.
+find_program(CCACHE_FOUND ccache)
+if(CCACHE_FOUND)
+  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
+  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
+endif(CCACHE_FOUND)
+
+set(BUILD_DIR ${PROJECT_BUILD_DIR})
+if(CMAKE_HOST_WIN32)
+        string(REPLACE "\\" "/" BUILD_DIR ${BUILD_DIR})
+endif()
+
+file(GLOB input_SRC CONFIGURE_DEPENDS
+        *.cpp
+        ${BUILD_DIR}/generated/autolinking/src/main/jni/*.cpp)
+
+add_library(${CMAKE_PROJECT_NAME} SHARED ${input_SRC})
+
+target_include_directories(${CMAKE_PROJECT_NAME}
+        PUBLIC
+                ${CMAKE_CURRENT_SOURCE_DIR}
+                ${PROJECT_BUILD_DIR}/generated/autolinking/src/main/jni)
+
+target_compile_options(${CMAKE_PROJECT_NAME}
+        PRIVATE
+                -Wall
+                -Werror
+                # We suppress cpp #error and #warning to don't fail the build
+                # due to use migrating away from
+                # #include <react/renderer/graphics/conversions.h>
+                # This can be removed for React Native 0.73
+                -Wno-error=cpp
+                -fexceptions
+                -frtti
+                -std=c++20
+                -DLOG_TAG=\"ReactNative\")
+
+# Prefab packages from React Native
+find_package(ReactAndroid REQUIRED CONFIG)
+add_library(react_render_debug ALIAS ReactAndroid::react_render_debug)
+add_library(turbomodulejsijni ALIAS ReactAndroid::turbomodulejsijni)
+add_library(runtimeexecutor ALIAS ReactAndroid::runtimeexecutor)
+add_library(react_codegen_rncore ALIAS ReactAndroid::react_codegen_rncore)
+add_library(react_debug ALIAS ReactAndroid::react_debug)
+add_library(react_utils ALIAS ReactAndroid::react_utils)
+add_library(react_render_componentregistry ALIAS ReactAndroid::react_render_componentregistry)
+add_library(react_newarchdefaults ALIAS ReactAndroid::react_newarchdefaults)
+add_library(react_render_core ALIAS ReactAndroid::react_render_core)
+add_library(react_render_graphics ALIAS ReactAndroid::react_render_graphics)
+add_library(rrc_view ALIAS ReactAndroid::rrc_view)
+add_library(rrc_text ALIAS ReactAndroid::rrc_text)
+add_library(rrc_textinput ALIAS ReactAndroid::rrc_textinput)
+add_library(jsi ALIAS ReactAndroid::jsi)
+add_library(glog ALIAS ReactAndroid::glog)
+add_library(fabricjni ALIAS ReactAndroid::fabricjni)
+add_library(mapbufferjni ALIAS ReactAndroid::mapbufferjni)
+add_library(react_render_mapbuffer ALIAS ReactAndroid::react_render_mapbuffer)
+add_library(react_render_textlayoutmanager ALIAS ReactAndroid::react_render_textlayoutmanager)
+add_library(yoga ALIAS ReactAndroid::yoga)
+add_library(folly_runtime ALIAS ReactAndroid::folly_runtime)
+add_library(react_nativemodule_core ALIAS ReactAndroid::react_nativemodule_core)
+add_library(react_render_imagemanager ALIAS ReactAndroid::react_render_imagemanager)
+add_library(rrc_image ALIAS ReactAndroid::rrc_image)
+add_library(rrc_legacyviewmanagerinterop ALIAS ReactAndroid::rrc_legacyviewmanagerinterop)
+add_library(reactnativejni ALIAS ReactAndroid::reactnativejni)
+add_library(react_render_consistency ALIAS ReactAndroid::react_render_consistency)
+add_library(react_performance_timeline ALIAS ReactAndroid::react_performance_timeline)
+add_library(react_render_observers_events ALIAS ReactAndroid::react_render_observers_events)
+add_library(react_featureflags ALIAS ReactAndroid::react_featureflags)
+
+find_package(fbjni REQUIRED CONFIG)
+add_library(fbjni ALIAS fbjni::fbjni)
+
+target_link_libraries(${CMAKE_PROJECT_NAME}
+        fabricjni                           # prefab ready
+        mapbufferjni                        # prefab ready
+        fbjni                               # via 3rd party prefab
+        folly_runtime                       # prefab ready
+        glog                                # prefab ready
+        jsi                                 # prefab ready
+        react_codegen_rncore                # prefab ready
+        react_debug                         # prefab ready
+        react_utils                         # prefab ready
+        react_nativemodule_core             # prefab ready
+        react_newarchdefaults               # prefab ready
+        react_render_componentregistry      # prefab ready
+        react_render_core                   # prefab ready
+        react_render_debug                  # prefab ready
+        react_render_graphics               # prefab ready
+        react_render_imagemanager           # prefab ready
+        react_render_mapbuffer              # prefab ready
+        react_render_textlayoutmanager      # prefab ready
+        rrc_image                           # prefab ready
+        rrc_view                            # prefab ready
+        rrc_text                            # prefab ready
+        rrc_textinput                       # prefab ready
+        rrc_legacyviewmanagerinterop        # prefab ready
+        runtimeexecutor                     # prefab ready
+        turbomodulejsijni                   # prefab ready
+        yoga)                               # prefab ready
+
+# We use an interface target to propagate flags to all the generated targets
+# such as the folly flags or others.
+add_library(common_flags INTERFACE)
+target_compile_options(common_flags INTERFACE ${folly_FLAGS})
+target_link_libraries(ReactAndroid::react_codegen_rncore INTERFACE common_flags)
+
+# If project is on RN CLI v9, then we can use the following lines to link against the autolinked 3rd party libraries.
+if(EXISTS ${PROJECT_BUILD_DIR}/generated/autolinking/src/main/jni/Android-autolinking.cmake)
+        include(${PROJECT_BUILD_DIR}/generated/autolinking/src/main/jni/Android-autolinking.cmake)
+        target_link_libraries(${CMAKE_PROJECT_NAME} ${AUTOLINKED_LIBRARIES})
+        foreach(autolinked_library ${AUTOLINKED_LIBRARIES})
+            target_link_libraries(${autolinked_library} common_flags)
+        endforeach()
+endif()
+
+# If project is running codegen at the app level, we want to link and build the generated library.
+if(EXISTS ${PROJECT_BUILD_DIR}/generated/source/codegen/jni/CMakeLists.txt)
+        add_subdirectory(${PROJECT_BUILD_DIR}/generated/source/codegen/jni/ codegen_app_build)
+        get_property(APP_CODEGEN_TARGET DIRECTORY ${PROJECT_BUILD_DIR}/generated/source/codegen/jni/ PROPERTY BUILDSYSTEM_TARGETS)
+        target_link_libraries(${CMAKE_PROJECT_NAME} ${APP_CODEGEN_TARGET})
+        target_link_libraries(${APP_CODEGEN_TARGET} common_flags)
+
+        # We need to pass the generated header and module provider to the OnLoad.cpp file so
+        # local app modules can properly be linked.
+        string(REGEX REPLACE "react_codegen_" "" APP_CODEGEN_HEADER "${APP_CODEGEN_TARGET}")
+        target_compile_options(${CMAKE_PROJECT_NAME}
+                PRIVATE
+                -DREACT_NATIVE_APP_CODEGEN_HEADER="${APP_CODEGEN_HEADER}.h"
+                -DREACT_NATIVE_APP_COMPONENT_DESCRIPTORS_HEADER="react/renderer/components/${APP_CODEGEN_HEADER}/ComponentDescriptors.h"
+                -DREACT_NATIVE_APP_COMPONENT_REGISTRATION=${APP_CODEGEN_HEADER}_registerComponentDescriptorsFromCodegen
+                -DREACT_NATIVE_APP_MODULE_PROVIDER=${APP_CODEGEN_HEADER}_ModuleProvider
+        )
+endif()
diff --git a/node_modules/react-native/ReactAndroid/bin/cmake-utils/default-app-setup/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/cmake-utils/default-app-setup/CMakeLists.txt
new file mode 100644
index 0000000..9755671
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/cmake-utils/default-app-setup/CMakeLists.txt
@@ -0,0 +1,31 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+# This CMake file is the default used by apps and is placed inside react-native
+# to encapsulate it from user space (so you won't need to touch C++/Cmake code at all on Android).
+#
+# If you wish to customize it (because you want to manually link a C++ library or pass a custom
+# compilation flag) you can:
+#
+# 1. Copy this CMake file inside the `android/app/src/main/jni` folder of your project
+# 2. Copy the OnLoad.cpp (in this same folder) file inside the same folder as above.
+# 3. Extend your `android/app/build.gradle` as follows
+#
+# android {
+#    // Other config here...
+#    externalNativeBuild {
+#        cmake {
+#            path "src/main/jni/CMakeLists.txt"
+#        }
+#    }
+# }
+
+cmake_minimum_required(VERSION 3.13)
+
+# Define the library name here.
+project(appmodules)
+
+# This file includes all the necessary to let you build your application with the New Architecture.
+include(${REACT_ANDROID_DIR}/cmake-utils/ReactNative-application.cmake)
diff --git a/node_modules/react-native/ReactAndroid/bin/cmake-utils/default-app-setup/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/cmake-utils/default-app-setup/OnLoad.cpp
new file mode 100644
index 0000000..db2e6c1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/cmake-utils/default-app-setup/OnLoad.cpp
@@ -0,0 +1,124 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+// This C++ file is part of the default configuration used by apps and is placed
+// inside react-native to encapsulate it from user space (so you won't need to
+// touch C++/Cmake code at all on Android).
+//
+// If you wish to customize it (because you want to manually link a C++ library
+// or pass a custom compilation flag) you can:
+//
+// 1. Copy this CMake file inside the `android/app/src/main/jni` folder of your
+// project
+// 2. Copy the OnLoad.cpp (in this same folder) file inside the same folder as
+// above.
+// 3. Extend your `android/app/build.gradle` as follows
+//
+// android {
+//    // Other config here...
+//    externalNativeBuild {
+//        cmake {
+//            path "src/main/jni/CMakeLists.txt"
+//        }
+//    }
+// }
+
+#include <DefaultComponentsRegistry.h>
+#include <DefaultTurboModuleManagerDelegate.h>
+#include <autolinking.h>
+#include <fbjni/fbjni.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+#include <rncore.h>
+
+#ifdef REACT_NATIVE_APP_CODEGEN_HEADER
+#include REACT_NATIVE_APP_CODEGEN_HEADER
+#endif
+#ifdef REACT_NATIVE_APP_COMPONENT_DESCRIPTORS_HEADER
+#include REACT_NATIVE_APP_COMPONENT_DESCRIPTORS_HEADER
+#endif
+
+namespace facebook::react {
+
+void registerComponents(
+    std::shared_ptr<const ComponentDescriptorProviderRegistry> registry) {
+  // Custom Fabric Components go here. You can register custom
+  // components coming from your App or from 3rd party libraries here.
+  //
+  // providerRegistry->add(concreteComponentDescriptorProvider<
+  //        MyComponentDescriptor>());
+
+  // We link app local components if available
+#ifdef REACT_NATIVE_APP_COMPONENT_REGISTRATION
+  REACT_NATIVE_APP_COMPONENT_REGISTRATION(registry);
+#endif
+
+  // And we fallback to the components autolinked
+  autolinking_registerProviders(registry);
+}
+
+std::shared_ptr<TurboModule> cxxModuleProvider(
+    const std::string& name,
+    const std::shared_ptr<CallInvoker>& jsInvoker) {
+  // Here you can provide your CXX Turbo Modules coming from
+  // either your application or from external libraries. The approach to follow
+  // is similar to the following (for a module called `NativeCxxModuleExample`):
+  //
+  // if (name == NativeCxxModuleExample::kModuleName) {
+  //   return std::make_shared<NativeCxxModuleExample>(jsInvoker);
+  // }
+
+  // And we fallback to the CXX module providers autolinked
+  return autolinking_cxxModuleProvider(name, jsInvoker);
+}
+
+std::shared_ptr<TurboModule> javaModuleProvider(
+    const std::string& name,
+    const JavaTurboModule::InitParams& params) {
+  // Here you can provide your own module provider for TurboModules coming from
+  // either your application or from external libraries. The approach to follow
+  // is similar to the following (for a library called `samplelibrary`):
+  //
+  // auto module = samplelibrary_ModuleProvider(name, params);
+  // if (module != nullptr) {
+  //    return module;
+  // }
+  // return rncore_ModuleProvider(name, params);
+
+  // We link app local modules if available
+#ifdef REACT_NATIVE_APP_MODULE_PROVIDER
+  auto module = REACT_NATIVE_APP_MODULE_PROVIDER(name, params);
+  if (module != nullptr) {
+    return module;
+  }
+#endif
+
+  // We first try to look up core modules
+  if (auto module = rncore_ModuleProvider(name, params)) {
+    return module;
+  }
+
+  // And we fallback to the module providers autolinked
+  if (auto module = autolinking_ModuleProvider(name, params)) {
+    return module;
+  }
+
+  return nullptr;
+}
+
+} // namespace facebook::react
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*) {
+  return facebook::jni::initialize(vm, [] {
+    facebook::react::DefaultTurboModuleManagerDelegate::cxxModuleProvider =
+        &facebook::react::cxxModuleProvider;
+    facebook::react::DefaultTurboModuleManagerDelegate::javaModuleProvider =
+        &facebook::react::javaModuleProvider;
+    facebook::react::DefaultComponentsRegistry::
+        registerComponentDescriptorsFromEntryPoint =
+            &facebook::react::registerComponents;
+  });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/cmake-utils/folly-flags.cmake b/node_modules/react-native/ReactAndroid/bin/cmake-utils/folly-flags.cmake
new file mode 100644
index 0000000..0cd19ec
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/cmake-utils/folly-flags.cmake
@@ -0,0 +1,23 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+# This CMake file exposes the Folly Flags that all the libraries should use when
+# compiling/linking against a dependency which requires folly.
+
+SET(folly_FLAGS
+        -DFOLLY_NO_CONFIG=1
+        -DFOLLY_HAVE_CLOCK_GETTIME=1
+        -DFOLLY_USE_LIBCPP=1
+        -DFOLLY_CFG_NO_COROUTINES=1
+        -DFOLLY_MOBILE=1
+        -DFOLLY_HAVE_RECVMMSG=1
+        -DFOLLY_HAVE_PTHREAD=1
+        # Once we target android-23 above, we can comment
+        # the following line. NDK uses GNU style stderror_r() after API 23.
+        -DFOLLY_HAVE_XSI_STRERROR_R=1
+        )
diff --git a/node_modules/react-native/ReactAndroid/bin/external-artifacts/build.gradle.kts b/node_modules/react-native/ReactAndroid/bin/external-artifacts/build.gradle.kts
new file mode 100644
index 0000000..685d77e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/external-artifacts/build.gradle.kts
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+import org.jetbrains.kotlin.gradle.plugin.extraProperties
+
+plugins { id("maven-publish") }
+
+group = "com.facebook.react"
+
+version =
+    parent?.extraProperties?.get("publishing_version")
+        ?: error("publishing_version not set for external-artifacts")
+
+configurations.maybeCreate("default")
+
+// Those artifacts should be placed inside the `artifacts/hermes-ios-*.tar.gz` location.
+val hermesiOSDebugArtifactFile: RegularFile =
+    layout.projectDirectory.file("artifacts/hermes-ios-debug.tar.gz")
+val hermesiOSDebugArtifact: PublishArtifact =
+    artifacts.add("default", hermesiOSDebugArtifactFile) {
+      type = "tgz"
+      extension = "tar.gz"
+      classifier = "hermes-ios-debug"
+    }
+val hermesiOSReleaseArtifactFile: RegularFile =
+    layout.projectDirectory.file("artifacts/hermes-ios-release.tar.gz")
+val hermesiOSReleaseArtifact: PublishArtifact =
+    artifacts.add("default", hermesiOSReleaseArtifactFile) {
+      type = "tgz"
+      extension = "tar.gz"
+      classifier = "hermes-ios-release"
+    }
+
+// Those artifacts should be placed inside the `artifacts/hermes-*.framework.dSYM` location
+val hermesDSYMDebugArtifactFile: RegularFile =
+    layout.projectDirectory.file("artifacts/hermes-framework-dSYM-debug.tar.gz")
+val hermesDSYMDebugArtifact: PublishArtifact =
+    artifacts.add("default", hermesDSYMDebugArtifactFile) {
+      type = "tgz"
+      extension = "tar.gz"
+      classifier = "hermes-framework-dSYM-debug"
+    }
+val hermesDSYMReleaseArtifactFile: RegularFile =
+    layout.projectDirectory.file("artifacts/hermes-framework-dSYM-release.tar.gz")
+val hermesDSYMReleaseArtifact: PublishArtifact =
+    artifacts.add("default", hermesDSYMReleaseArtifactFile) {
+      type = "tgz"
+      extension = "tar.gz"
+      classifier = "hermes-framework-dSYM-release"
+    }
+
+apply(from = "../publish.gradle")
+
+publishing {
+  publications {
+    getByName("release", MavenPublication::class) {
+      artifactId = "react-native-artifacts"
+      artifact(hermesiOSDebugArtifact)
+      artifact(hermesiOSReleaseArtifact)
+      artifact(hermesDSYMDebugArtifact)
+      artifact(hermesDSYMReleaseArtifact)
+    }
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/flipper-integration/.project b/node_modules/react-native/ReactAndroid/bin/flipper-integration/.project
new file mode 100644
index 0000000..ae05168
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/flipper-integration/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>flipper-integration</name>
+	<comment>Project flipper-integration created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1724676428893</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/react-native/ReactAndroid/bin/gradle.properties b/node_modules/react-native/ReactAndroid/bin/gradle.properties
new file mode 100644
index 0000000..a052c9e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/gradle.properties
@@ -0,0 +1,28 @@
+VERSION_NAME=0.75.2
+react.internal.publishingGroup=com.facebook.react
+
+android.useAndroidX=true
+
+# We want to have more fine grained control on the Java version for
+# ReactAndroid, therefore we disable RGNP Java version alignment mechanism
+react.internal.disableJavaVersionAlignment=true
+
+# Binary Compatibility Validator properties
+binaryCompatibilityValidator.ignoredClasses=com.facebook.react.BuildConfig
+binaryCompatibilityValidator.ignoredPackages=com.facebook.debug,\
+  com.facebook.fbreact,\
+  com.facebook.hermes,\
+  com.facebook.perftest,\
+  com.facebook.proguard,\
+  com.facebook.react.bridgeless.internal,\
+  com.facebook.react.flipper,\
+  com.facebook.react.internal,\
+  com.facebook.react.module.processing,\
+  com.facebook.react.processing,\
+  com.facebook.react.views.text.internal,\
+  com.facebook.systrace,\
+  com.facebook.yoga
+binaryCompatibilityValidator.nonPublicMarkers=com.facebook.react.common.annotations.VisibleForTesting,\
+  com.facebook.react.common.annotations.UnstableReactNativeAPI
+binaryCompatibilityValidator.validationDisabled=true
+binaryCompatibilityValidator.outputApiFileName=ReactAndroid
diff --git a/node_modules/react-native/ReactAndroid/bin/hermes-engine/.project b/node_modules/react-native/ReactAndroid/bin/hermes-engine/.project
new file mode 100644
index 0000000..d877f4a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/hermes-engine/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>hermes-engine</name>
+	<comment>Project hermes-engine created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1724676428895</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/react-native/ReactAndroid/bin/hermes-engine/gradle.properties b/node_modules/react-native/ReactAndroid/bin/hermes-engine/gradle.properties
new file mode 100644
index 0000000..8b53deb
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/hermes-engine/gradle.properties
@@ -0,0 +1 @@
+android.disableAutomaticComponentCreation=true
diff --git a/node_modules/react-native/ReactAndroid/bin/proguard-rules.pro b/node_modules/react-native/ReactAndroid/bin/proguard-rules.pro
new file mode 100644
index 0000000..70c7e22
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/proguard-rules.pro
@@ -0,0 +1,76 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /usr/local/Cellar/android-sdk/24.3.3/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# Disabling obfuscation is useful if you collect stack traces from production crashes
+# (unless you are using a system that supports de-obfuscate the stack traces).
+# -dontobfuscate
+
+# React Native
+
+# Keep our interfaces so they can be used by other ProGuard rules.
+# See http://sourceforge.net/p/proguard/bugs/466/
+-keep,allowobfuscation @interface com.facebook.proguard.annotations.DoNotStrip
+-keep,allowobfuscation @interface com.facebook.proguard.annotations.KeepGettersAndSetters
+
+# Do not strip any method/class that is annotated with @DoNotStrip
+-keep @com.facebook.proguard.annotations.DoNotStrip class *
+-keepclassmembers class * {
+    @com.facebook.proguard.annotations.DoNotStrip *;
+}
+-keep @com.facebook.proguard.annotations.DoNotStripAny class * {
+    *;
+}
+-keep @com.facebook.jni.annotations.DoNotStrip class *
+-keepclassmembers class * {
+    @com.facebook.jni.annotations.DoNotStrip *;
+}
+-keep @com.facebook.jni.annotations.DoNotStripAny class * {
+    *;
+}
+
+-keepclassmembers @com.facebook.proguard.annotations.KeepGettersAndSetters class * {
+  void set*(***);
+  *** get*();
+}
+
+-keep class * implements com.facebook.react.bridge.JavaScriptModule { *; }
+-keep class * implements com.facebook.react.bridge.NativeModule { *; }
+-keepclassmembers,includedescriptorclasses class * { native <methods>; }
+-keepclassmembers class *  { @com.facebook.react.uimanager.annotations.ReactProp <methods>; }
+-keepclassmembers class *  { @com.facebook.react.uimanager.annotations.ReactPropGroup <methods>; }
+
+-dontwarn com.facebook.react.**
+-keep,includedescriptorclasses class com.facebook.react.bridge.** { *; }
+-keep,includedescriptorclasses class com.facebook.react.turbomodule.core.** { *; }
+-keep,includedescriptorclasses class com.facebook.react.internal.turbomodule.core.** { *; }
+
+# hermes
+-keep class com.facebook.jni.** { *; }
+
+
+# okio
+
+-keep class sun.misc.Unsafe { *; }
+-dontwarn java.nio.file.*
+-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
+-dontwarn okio.**
+
+# yoga
+-keep,allowobfuscation @interface com.facebook.yoga.annotations.DoNotStrip
+-keep @com.facebook.yoga.annotations.DoNotStrip class *
+-keepclassmembers class * {
+    @com.facebook.yoga.annotations.DoNotStrip *;
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/publish.gradle b/node_modules/react-native/ReactAndroid/bin/publish.gradle
new file mode 100644
index 0000000..32287a7
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/publish.gradle
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+apply plugin: 'maven-publish'
+apply plugin: 'signing'
+
+def isSnapshot = findProperty("isSnapshot")?.toBoolean()
+def signingKey = findProperty("SIGNING_KEY")
+def signingPwd = findProperty("SIGNING_PWD")
+
+def reactAndroidProjectDir = project(':packages:react-native:ReactAndroid').projectDir
+def mavenTempLocalUrl = "file:///tmp/maven-local"
+
+publishing {
+    publications {
+        release(MavenPublication) {
+            afterEvaluate {
+                // We do a multi variant release, so for Android libraries
+                // we publish `components.release`
+                if (plugins.hasPlugin("com.android.library")) {
+                    from components.default
+                }
+            }
+
+            // We populate the publishing version using the project version,
+            // appending -SNAPSHOT if on nightly or prerelase.
+            if (isSnapshot) {
+                version = this.version + "-SNAPSHOT"
+            } else {
+                version = this.version
+            }
+
+            pom {
+                name = "react-native"
+                description = "A framework for building native apps with React"
+                url = "https://github.com/facebook/react-native"
+
+                developers {
+                    developer {
+                        id = "facebook"
+                        name = "Facebook"
+                    }
+                }
+
+                licenses {
+                    license {
+                        name = "MIT License"
+                        url = "https://github.com/facebook/react-native/blob/HEAD/LICENSE"
+                        distribution = "repo"
+                    }
+                }
+
+                scm {
+                    url = "https://github.com/facebook/react-native.git"
+                    connection = "scm:git:https://github.com/facebook/react-native.git"
+                    developerConnection = "scm:git:git@github.com:facebook/react-native.git"
+                }
+            }
+        }
+    }
+
+    repositories {
+        maven {
+            name = "mavenTempLocal"
+            url = mavenTempLocalUrl
+        }
+    }
+
+    if (signingKey && signingPwd) {
+        logger.info("PGP Key found - Signing enabled")
+        signing {
+            useInMemoryPgpKeys(signingKey, signingPwd)
+            sign(publishing.publications.release)
+        }
+    } else {
+        logger.info("Signing disabled as the PGP key was not found")
+    }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/debug/AndroidManifest.xml b/node_modules/react-native/ReactAndroid/bin/src/debug/AndroidManifest.xml
new file mode 100644
index 0000000..ac05d07
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/debug/AndroidManifest.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+
+  <!--
+    This manifest file is used only by Gradle to configure debug-only capabilities
+    for React Native Apps.
+   -->
+  <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
+
+  <application>
+    <activity android:name="com.facebook.react.devsupport.DevSettingsActivity"
+              android:exported="false" />
+  </application>
+
+</manifest>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/AndroidManifest.xml b/node_modules/react-native/ReactAndroid/bin/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..fe6accd
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/AndroidManifest.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:versionCode="1"
+    >
+
+  <!-- This is necessary to inform the linter about our min API version. The linter walk the tree
+   up from the file to lint until it find an AndroidManifest with a minSdkVersion. This is then used
+   as the min SDK to lint the file.-->
+  <uses-sdk
+      android:minSdkVersion="23"
+      android:targetSdkVersion="34"
+      />
+
+</manifest>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/hermes/reactexecutor/fbjni.pro b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/hermes/reactexecutor/fbjni.pro
new file mode 100644
index 0000000..ca54067
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/hermes/reactexecutor/fbjni.pro
@@ -0,0 +1,16 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+# For common use cases for the hybrid pattern, keep symbols which may
+# be referenced only from C++.
+
+-keepclassmembers class * {
+    com.facebook.jni.HybridData *;
+    <init>(com.facebook.jni.HybridData);
+}
+
+-keepclasseswithmembers class * {
+    com.facebook.jni.HybridData *;
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/proguard/annotations/proguard_annotations.pro b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/proguard/annotations/proguard_annotations.pro
new file mode 100644
index 0000000..a4a7187
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/proguard/annotations/proguard_annotations.pro
@@ -0,0 +1,21 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+# Keep our interfaces so they can be used by other ProGuard rules.
+# See http://sourceforge.net/p/proguard/bugs/466/
+-keep,allowobfuscation @interface com.facebook.proguard.annotations.DoNotStrip
+-keep,allowobfuscation @interface com.facebook.proguard.annotations.DoNotStripAny
+-keep,allowobfuscation @interface com.facebook.proguard.annotations.KeepGettersAndSetters
+
+# Do not strip any method/class that is annotated with @DoNotStrip
+-keep @com.facebook.proguard.annotations.DoNotStrip class *
+-keepclassmembers class * {
+    @com.facebook.proguard.annotations.DoNotStrip *;
+}
+
+-keepclassmembers @com.facebook.proguard.annotations.KeepGettersAndSetters class * {
+  void set*(***);
+  *** get*();
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/ReactApplication.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/ReactApplication.kt
new file mode 100644
index 0000000..9360b51
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/ReactApplication.kt
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+/** Interface that represents an instance of a React Native application */
+public interface ReactApplication {
+  /** Get the default [ReactNativeHost] for this app. */
+  public val reactNativeHost: ReactNativeHost
+
+  /**
+   * Get the default [ReactHost] for this app. This method will be used by the new architecture of
+   * react native
+   */
+  public val reactHost: ReactHost?
+    get() = null
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/ReactHost.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/ReactHost.kt
new file mode 100644
index 0000000..5f09366
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/ReactHost.kt
@@ -0,0 +1,137 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react
+
+import android.app.Activity
+import android.content.Context
+import android.content.Intent
+import android.os.Bundle
+import com.facebook.react.bridge.ReactContext
+import com.facebook.react.bridge.queue.ReactQueueConfiguration
+import com.facebook.react.common.LifecycleState
+import com.facebook.react.devsupport.interfaces.DevSupportManager
+import com.facebook.react.interfaces.TaskInterface
+import com.facebook.react.interfaces.fabric.ReactSurface
+import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler
+
+/**
+ * A ReactHost is an object that manages a single {@link ReactInstance}. A ReactHost can be
+ * constructed without initializing the ReactInstance, and it will continue to exist after the
+ * instance is destroyed.
+ *
+ * The implementation of this interface should be Thread Safe
+ */
+public interface ReactHost {
+
+  /** The current [LifecycleState] for React Host */
+  public val lifecycleState: LifecycleState
+
+  /**
+   * The current [ReactContext] associated with ReactInstance. It could be nullable if ReactInstance
+   * hasn't been created.
+   */
+  public val currentReactContext: ReactContext?
+
+  // TODO: review if DevSupportManager should be nullable
+  /** [DevSupportManager] used by this ReactHost */
+  public val devSupportManager: DevSupportManager?
+
+  // TODO: review if possible to remove ReactQueueConfiguration
+  /** [ReactQueueConfiguration] for caller to post jobs in React Native threads */
+  public val reactQueueConfiguration: ReactQueueConfiguration?
+
+  /** [JSEngineResolutionAlgorithm] used by this host. */
+  public var jsEngineResolutionAlgorithm: JSEngineResolutionAlgorithm?
+
+  /** Routes memory pressure events to interested components */
+  public val memoryPressureRouter: MemoryPressureRouter
+
+  /** To be called when back button is pressed */
+  public fun onBackPressed(): Boolean
+
+  // TODO: review why activity is nullable in all of the lifecycle methods
+  /** To be called when the host activity is resumed. */
+  public fun onHostResume(
+      activity: Activity?,
+      defaultBackButtonImpl: DefaultHardwareBackBtnHandler?
+  )
+
+  /** To be called when the host activity is resumed. */
+  public fun onHostResume(activity: Activity?)
+
+  /** To be called when the host activity is paused. */
+  public fun onHostPause(activity: Activity?)
+
+  /** To be called when the host activity is paused. */
+  public fun onHostPause()
+
+  /** To be called when the host activity is destroyed. */
+  public fun onHostDestroy()
+
+  /** To be called when the host activity is destroyed. */
+  public fun onHostDestroy(activity: Activity?)
+
+  /** To be called to create and setup an ReactSurface. */
+  public fun createSurface(
+      context: Context,
+      moduleName: String,
+      initialProps: Bundle?
+  ): ReactSurface?
+
+  /**
+   * This function can be used to initialize the ReactInstance in a background thread before a
+   * surface needs to be rendered. It is not necessary to call this function; startSurface() will
+   * initialize the ReactInstance if it hasn't been preloaded.
+   *
+   * @return A Task that completes when the instance is initialized. The task will be faulted if any
+   *   errors occur during initialization, and will be cancelled if ReactHost.destroy() is called
+   *   before it completes.
+   */
+  public fun start(): TaskInterface<Void>
+
+  /**
+   * Entrypoint to reload the ReactInstance. If the ReactInstance is destroying, will wait until
+   * destroy is finished, before reloading.
+   *
+   * @param reason describing why ReactHost is being reloaded (e.g. js error, user tap on reload
+   *   button)
+   * @return A task that completes when React Native reloads
+   */
+  public fun reload(reason: String): TaskInterface<Void>
+
+  /**
+   * Entrypoint to destroy the ReactInstance. If the ReactInstance is reloading, will wait until
+   * reload is finished, before destroying.
+   *
+   * @param reason describing why ReactHost is being destroyed (e.g. memmory pressure)
+   * @param ex exception that caused the trigger to destroy ReactHost (or null) This exception will
+   *   be used to log properly the cause of destroy operation.
+   * @return A task that completes when React Native gets destroyed.
+   */
+  public fun destroy(reason: String, ex: Exception?): TaskInterface<Void>
+
+  /* To be called when the host activity receives an activity result. */
+  public fun onActivityResult(
+      activity: Activity,
+      requestCode: Int,
+      resultCode: Int,
+      data: Intent?,
+  )
+
+  /* To be called when focus has changed for the hosting window. */
+  public fun onWindowFocusChange(hasFocus: Boolean)
+
+  /* This method will give JS the opportunity to receive intents via Linking. */
+  public fun onNewIntent(intent: Intent)
+
+  public fun onConfigurationChanged(context: Context)
+
+  public fun addBeforeDestroyListener(onBeforeDestroy: () -> Unit)
+
+  public fun removeBeforeDestroyListener(onBeforeDestroy: () -> Unit)
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/bridge/bridge.pro b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/bridge/bridge.pro
new file mode 100644
index 0000000..ce18d10
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/bridge/bridge.pro
@@ -0,0 +1,12 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+## Putting this here is kind of a hack.  I don't want to modify the OSS bridge.
+## TODO mhorowitz: add @DoNotStrip to the interface directly.
+
+-keepclassmembers class com.facebook.react.bridge.queue.MessageQueueThread {
+  public boolean isOnThread();
+  public void assertIsOnThread();
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/bridge/reactnative.pro b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/bridge/reactnative.pro
new file mode 100644
index 0000000..72f1131
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/bridge/reactnative.pro
@@ -0,0 +1,32 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+-keepnames class * extends com.facebook.react.bridge.JavaScriptModule { *; }
+-keepnames class * extends com.facebook.react.bridge.CxxModuleWrapper {*; }
+-keepclassmembers class * extends com.facebook.react.bridge.NativeModule {
+    @com.facebook.react.bridge.ReactMethod *;
+    public <init>(...);
+}
+
+-keepclassmembers class *  { @com.facebook.react.uimanager.annotations.ReactProp <methods>; }
+-keepclassmembers class *  { @com.facebook.react.uimanager.annotations.ReactPropGroup <methods>; }
+-keepnames class * extends com.facebook.react.uimanager.ViewManager
+-keepnames class * extends com.facebook.react.uimanager.ReactShadowNode
+-keep class **$$PropsSetter
+-keep class **$$ReactModuleInfoProvider
+-keep class com.facebook.react.bridge.ReadableType { *; }
+
+-keepnames class com.facebook.quicklog.QuickPerformanceLogger {
+  void markerAnnotate(int,int,java.lang.String,java.lang.String);
+  void markerTag(int,int,java.lang.String);
+}
+
+## Putting this here is kind of a hack.  I don't want to modify the OSS bridge.
+## TODO mhorowitz: add @DoNotStrip to the interface directly.
+
+-keepclassmembers class com.facebook.react.bridge.queue.MessageQueueThread {
+  public boolean isOnThread();
+  public void assertIsOnThread();
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/DeprecatedInNewArchitecture.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/DeprecatedInNewArchitecture.kt
new file mode 100644
index 0000000..be2c473
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/DeprecatedInNewArchitecture.kt
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.common.annotations
+
+/**
+ * Annotates a method or class that will be deprecated once the NewArchitecture is fully released in
+ * OSS.
+ */
+@Retention(AnnotationRetention.SOURCE)
+@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)
+public annotation class DeprecatedInNewArchitecture(val message: String = "")
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/FrameworkAPI.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/FrameworkAPI.kt
new file mode 100644
index 0000000..37e2863
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/FrameworkAPI.kt
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.common.annotations
+
+@Retention(AnnotationRetention.RUNTIME)
+@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)
+@RequiresOptIn(
+    level = RequiresOptIn.Level.ERROR,
+    message =
+        "This API is provided only for React Native frameworks and not intended for general users. " +
+            "This API can change between minor versions in alignment with React Native frameworks " +
+            "and won't be considered a breaking change.")
+public annotation class FrameworkAPI
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/UnstableReactNativeAPI.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/UnstableReactNativeAPI.kt
new file mode 100644
index 0000000..bd728ef
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/UnstableReactNativeAPI.kt
@@ -0,0 +1,15 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.common.annotations
+
+@Retention(AnnotationRetention.RUNTIME)
+@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY)
+@RequiresOptIn(
+    level = RequiresOptIn.Level.ERROR,
+    message = "This API is experimental and is likely to change or to be removed in the future")
+public annotation class UnstableReactNativeAPI
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/VisibleForTesting.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/VisibleForTesting.kt
new file mode 100644
index 0000000..5d30f3e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/annotations/VisibleForTesting.kt
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.common.annotations
+
+/**
+ * Annotates a method that should have restricted visibility but it's required to be public for use
+ * in test code only.
+ */
+public annotation class VisibleForTesting
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/MapBuffer.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/MapBuffer.kt
new file mode 100644
index 0000000..53bb6b8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/MapBuffer.kt
@@ -0,0 +1,217 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.common.mapbuffer
+
+import com.facebook.react.common.annotations.StableReactNativeAPI
+
+/**
+ * MapBuffer is an optimized sparse array format for transferring props-like data between C++ and
+ * JNI. It is designed to:
+ * - be compact to optimize space when sparse (sparse is the common case).
+ * - be accessible through JNI with zero/minimal copying.
+ * - work recursively for nested maps/arrays.
+ * - support dynamic types that map to JSON.
+ * - have minimal APK size and build time impact.
+ *
+ * See <react/renderer/mapbuffer/MapBuffer.h> for more information and native implementation.
+ *
+ * Limitations:
+ * - Keys are usually sized as 2 bytes, with each buffer supporting up to 65536 entries as a result.
+ * - O(log(N)) random key access for native buffers due to selected structure. Faster access can be
+ *   achieved by retrieving [MapBuffer.Entry] with [entryAt] on known offsets.
+ */
+@StableReactNativeAPI
+public interface MapBuffer : Iterable<MapBuffer.Entry> {
+  public companion object {
+    /**
+     * Key are represented as 2 byte values, and typed as Int for ease of access. The serialization
+     * format only allows to store [UShort] values.
+     */
+    internal val KEY_RANGE = IntRange(UShort.MIN_VALUE.toInt(), UShort.MAX_VALUE.toInt())
+  }
+
+  /**
+   * Data types supported by [MapBuffer]. Keep in sync with definition in
+   * `<react/renderer/mapbuffer/MapBuffer.h>`, as enum serialization relies on correct order.
+   */
+  public enum class DataType {
+    BOOL,
+    INT,
+    DOUBLE,
+    STRING,
+    MAP,
+    LONG
+  }
+
+  /**
+   * Number of elements inserted into current MapBuffer.
+   *
+   * @return number of elements in the [MapBuffer]
+   */
+  public val count: Int
+
+  /**
+   * Checks whether entry for given key exists in MapBuffer.
+   *
+   * @param key key to lookup the entry
+   * @return whether entry for the given key exists in the MapBuffer.
+   */
+  public fun contains(key: Int): Boolean
+
+  /**
+   * Provides offset of the key to use for [entryAt], for cases when offset is not statically known
+   * but can be cached.
+   *
+   * @param key key to lookup offset for
+   * @return offset for the given key to be used for entry access, -1 if key wasn't found.
+   */
+  public fun getKeyOffset(key: Int): Int
+
+  /**
+   * Provides parsed access to a MapBuffer without additional lookups for provided offset.
+   *
+   * @param offset offset of entry in the MapBuffer structure. Can be looked up for known keys with
+   *   [getKeyOffset].
+   * @return parsed entry for structured access for given offset
+   */
+  public fun entryAt(offset: Int): MapBuffer.Entry
+
+  /**
+   * Provides parsed [DataType] annotation associated with the given key.
+   *
+   * @param key key to lookup type for
+   * @return data type of the given key.
+   * @throws IllegalArgumentException if the key doesn't exist
+   */
+  public fun getType(key: Int): DataType
+
+  /**
+   * Provides parsed [Boolean] value if the entry for given key exists with [DataType.BOOL] type
+   *
+   * @param key key to lookup [Boolean] value for
+   * @return value associated with the requested key
+   * @throws IllegalArgumentException if the key doesn't exist
+   * @throws IllegalStateException if the data type doesn't match
+   */
+  public fun getBoolean(key: Int): Boolean
+
+  /**
+   * Provides parsed [Int] value if the entry for given key exists with [DataType.INT] type
+   *
+   * @param key key to lookup [Int] value for
+   * @return value associated with the requested key
+   * @throws IllegalArgumentException if the key doesn't exist
+   * @throws IllegalStateException if the data type doesn't match
+   */
+  public fun getInt(key: Int): Int
+
+  /**
+   * Provides parsed [Long] value if the entry for given key exists with [DataType.LONG] type
+   *
+   * @param key key to lookup [Long] value for
+   * @return value associated with the requested key
+   * @throws IllegalArgumentException if the key doesn't exist
+   * @throws IllegalStateException if the data type doesn't match
+   */
+  public fun getLong(key: Int): Long
+
+  /**
+   * Provides parsed [Double] value if the entry for given key exists with [DataType.DOUBLE] type
+   *
+   * @param key key to lookup [Double] value for
+   * @return value associated with the requested key
+   * @throws IllegalArgumentException if the key doesn't exist
+   * @throws IllegalStateException if the data type doesn't match
+   */
+  public fun getDouble(key: Int): Double
+
+  /**
+   * Provides parsed [String] value if the entry for given key exists with [DataType.STRING] type
+   *
+   * @param key key to lookup [String] value for
+   * @return value associated with the requested key
+   * @throws IllegalArgumentException if the key doesn't exist
+   * @throws IllegalStateException if the data type doesn't match
+   */
+  public fun getString(key: Int): String
+
+  /**
+   * Provides parsed [MapBuffer] value if the entry for given key exists with [DataType.MAP] type
+   *
+   * @param key key to lookup [MapBuffer] value for
+   * @return value associated with the requested key
+   * @throws IllegalArgumentException if the key doesn't exist
+   * @throws IllegalStateException if the data type doesn't match
+   */
+  public fun getMapBuffer(key: Int): MapBuffer
+
+  /**
+   * Provides parsed [List<MapBuffer>] value if the entry for given key exists with [DataType.MAP]
+   * type
+   *
+   * @param key key to lookup [List<MapBuffer>] value for
+   * @return value associated with the requested key
+   * @throws IllegalArgumentException if the key doesn't exist
+   * @throws IllegalStateException if the data type doesn't match
+   */
+  public fun getMapBufferList(key: Int): List<MapBuffer>
+
+  /** Iterable entry representing parsed MapBuffer values */
+  public interface Entry {
+    /**
+     * Key of the given entry. Usually represented as 2 byte unsigned integer with the value range
+     * of [0,65536)
+     */
+    public val key: Int
+
+    /** Parsed [DataType] of the entry */
+    public val type: DataType
+
+    /**
+     * Entry value represented as [Boolean]
+     *
+     * @throws IllegalStateException if the data type doesn't match [DataType.BOOL]
+     */
+    public val booleanValue: Boolean
+
+    /**
+     * Entry value represented as [Int]
+     *
+     * @throws IllegalStateException if the data type doesn't match [DataType.INT]
+     */
+    public val intValue: Int
+
+    /**
+     * Entry value represented as [Long]
+     *
+     * @throws IllegalStateException if the data type doesn't match [DataType.LONG]
+     */
+    public val longValue: Long
+
+    /**
+     * Entry value represented as [Double]
+     *
+     * @throws IllegalStateException if the data type doesn't match [DataType.DOUBLE]
+     */
+    public val doubleValue: Double
+
+    /**
+     * Entry value represented as [String]
+     *
+     * @throws IllegalStateException if the data type doesn't match [DataType.STRING]
+     */
+    public val stringValue: String
+
+    /**
+     * Entry value represented as [MapBuffer]
+     *
+     * @throws IllegalStateException if the data type doesn't match [DataType.MAP]
+     */
+    public val mapBufferValue: MapBuffer
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/MapBufferSoLoader.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/MapBufferSoLoader.kt
new file mode 100644
index 0000000..1c9536c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/MapBufferSoLoader.kt
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.common.mapbuffer
+
+import com.facebook.react.bridge.ReactMarker
+import com.facebook.react.bridge.ReactMarkerConstants
+import com.facebook.react.common.annotations.StableReactNativeAPI
+import com.facebook.soloader.SoLoader
+import com.facebook.systrace.Systrace
+
+@StableReactNativeAPI
+public object MapBufferSoLoader {
+  @Volatile private var didInit = false
+
+  @JvmStatic
+  public fun staticInit() {
+    if (didInit) {
+      return
+    }
+    didInit = true
+
+    Systrace.beginSection(
+        Systrace.TRACE_TAG_REACT_JAVA_BRIDGE,
+        "ReadableMapBufferSoLoader.staticInit::load:mapbufferjni")
+    ReactMarker.logMarker(ReactMarkerConstants.LOAD_REACT_NATIVE_MAPBUFFER_SO_FILE_START)
+    SoLoader.loadLibrary("mapbufferjni")
+    ReactMarker.logMarker(ReactMarkerConstants.LOAD_REACT_NATIVE_MAPBUFFER_SO_FILE_END)
+    Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE)
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/ReadableMapBuffer.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/ReadableMapBuffer.kt
new file mode 100644
index 0000000..ad6cdd4
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/ReadableMapBuffer.kt
@@ -0,0 +1,343 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.common.mapbuffer
+
+import com.facebook.jni.HybridData
+import com.facebook.proguard.annotations.DoNotStrip
+import com.facebook.react.common.annotations.StableReactNativeAPI
+import com.facebook.react.common.mapbuffer.MapBuffer.Companion.KEY_RANGE
+import java.lang.StringBuilder
+import java.nio.ByteBuffer
+import java.nio.ByteOrder
+import javax.annotation.concurrent.NotThreadSafe
+
+/**
+ * Read-only implementation of the [MapBuffer], imported from C++ environment. Use
+ * `<react/common/mapbuffer/JReadableMapBuffer.h> to create it.
+ *
+ * See [MapBuffer] documentation for more details
+ */
+@StableReactNativeAPI
+@NotThreadSafe
+@DoNotStrip
+public class ReadableMapBuffer : MapBuffer {
+
+  // Hybrid data must be kept in the `mHybridData` field for fbjni to work
+  @field:DoNotStrip private val mHybridData: HybridData?
+
+  // Byte data of the mapBuffer
+  private val buffer: ByteBuffer
+  // Offset to the start of the MapBuffer
+  private val offsetToMapBuffer: Int
+  // Amount of items serialized on the ByteBuffer
+  override var count: Int = 0
+    private set
+
+  @DoNotStrip
+  private constructor(hybridData: HybridData) {
+    mHybridData = hybridData
+    buffer = importByteBuffer()
+    offsetToMapBuffer = 0
+    readHeader()
+  }
+
+  private constructor(buffer: ByteBuffer) {
+    mHybridData = null
+    this.buffer = buffer
+    offsetToMapBuffer = 0
+    readHeader()
+  }
+
+  private constructor(buffer: ByteBuffer, offset: Int) {
+    mHybridData = null
+    this.buffer = buffer.duplicate().apply { position(offset) }
+    offsetToMapBuffer = offset
+    readHeader()
+  }
+
+  private external fun importByteBuffer(): ByteBuffer
+
+  private fun readHeader() {
+    // byte order
+    val storedAlignment = buffer.short
+    if (storedAlignment.toInt() != ALIGNMENT) {
+      buffer.order(ByteOrder.LITTLE_ENDIAN)
+    }
+    // count
+    count = readUnsignedShort(buffer.position()).toInt()
+  }
+
+  // returns the relative offset of the first byte of dynamic data
+  private val offsetForDynamicData: Int
+    get() = getKeyOffsetForBucketIndex(count)
+
+  /**
+   * @param key Key to search for
+   * @return the "bucket index" for a key or -1 if not found. It uses a binary search algorithm
+   *   (log(n))
+   */
+  private fun getBucketIndexForKey(intKey: Int): Int {
+    if (intKey !in KEY_RANGE) {
+      return -1
+    }
+    val key = intKey.toUShort()
+
+    var lo = 0
+    var hi = count - 1
+    while (lo <= hi) {
+      val mid = lo + hi ushr 1
+      val midVal = readUnsignedShort(getKeyOffsetForBucketIndex(mid))
+      when {
+        midVal < key -> lo = mid + 1
+        midVal > key -> hi = mid - 1
+        else -> return mid
+      }
+    }
+    return -1
+  }
+
+  private fun readDataType(bucketIndex: Int): MapBuffer.DataType {
+    val value = readUnsignedShort(getKeyOffsetForBucketIndex(bucketIndex) + TYPE_OFFSET).toInt()
+    return MapBuffer.DataType.values()[value]
+  }
+
+  private fun getTypedValueOffsetForKey(key: Int, expected: MapBuffer.DataType): Int {
+    val bucketIndex = getBucketIndexForKey(key)
+    require(bucketIndex != -1) { "Key not found: $key" }
+    val dataType = readDataType(bucketIndex)
+    check(!(dataType !== expected)) { "Expected $expected for key: $key, found $dataType instead." }
+    return getKeyOffsetForBucketIndex(bucketIndex) + VALUE_OFFSET
+  }
+
+  private fun readUnsignedShort(bufferPosition: Int): UShort {
+    return buffer.getShort(bufferPosition).toUShort()
+  }
+
+  private fun readDoubleValue(bufferPosition: Int): Double {
+    return buffer.getDouble(bufferPosition)
+  }
+
+  private fun readIntValue(bufferPosition: Int): Int {
+    return buffer.getInt(bufferPosition)
+  }
+
+  private fun readLongValue(bufferPosition: Int): Long {
+    return buffer.getLong(bufferPosition)
+  }
+
+  private fun readBooleanValue(bufferPosition: Int): Boolean {
+    return readIntValue(bufferPosition) == 1
+  }
+
+  private fun readStringValue(bufferPosition: Int): String {
+    val offset = offsetForDynamicData + buffer.getInt(bufferPosition)
+    val sizeOfString = buffer.getInt(offset)
+    val result = ByteArray(sizeOfString)
+    val stringOffset = offset + Int.SIZE_BYTES
+    buffer.position(stringOffset)
+    buffer[result, 0, sizeOfString]
+    return String(result)
+  }
+
+  private fun readMapBufferValue(position: Int): ReadableMapBuffer {
+    val offset = offsetForDynamicData + buffer.getInt(position)
+    return ReadableMapBuffer(buffer, offset + Int.SIZE_BYTES)
+  }
+
+  private fun readMapBufferListValue(position: Int): List<ReadableMapBuffer> {
+    val readMapBufferList = arrayListOf<ReadableMapBuffer>()
+    var offset = offsetForDynamicData + buffer.getInt(position)
+    val sizeMapBufferList = buffer.getInt(offset)
+    offset += Int.SIZE_BYTES
+    var curLen = 0
+    while (curLen < sizeMapBufferList) {
+      val sizeMapBuffer = buffer.getInt(offset + curLen)
+      curLen = curLen + Int.SIZE_BYTES
+      readMapBufferList.add(ReadableMapBuffer(buffer, offset + curLen))
+      curLen = curLen + sizeMapBuffer
+    }
+    return readMapBufferList
+  }
+
+  private fun getKeyOffsetForBucketIndex(bucketIndex: Int): Int {
+    return offsetToMapBuffer + HEADER_SIZE + BUCKET_SIZE * bucketIndex
+  }
+
+  override fun contains(key: Int): Boolean {
+    // TODO T83483191: Add tests
+    return getBucketIndexForKey(key) != -1
+  }
+
+  override fun getKeyOffset(key: Int): Int = getBucketIndexForKey(key)
+
+  override fun entryAt(offset: Int): MapBuffer.Entry =
+      MapBufferEntry(getKeyOffsetForBucketIndex(offset))
+
+  override fun getType(key: Int): MapBuffer.DataType {
+    val bucketIndex = getBucketIndexForKey(key)
+    require(bucketIndex != -1) { "Key not found: $key" }
+    return readDataType(bucketIndex)
+  }
+
+  override fun getInt(key: Int): Int =
+      readIntValue(getTypedValueOffsetForKey(key, MapBuffer.DataType.INT))
+
+  override fun getLong(key: Int): Long =
+      readLongValue(getTypedValueOffsetForKey(key, MapBuffer.DataType.LONG))
+
+  override fun getDouble(key: Int): Double =
+      readDoubleValue(getTypedValueOffsetForKey(key, MapBuffer.DataType.DOUBLE))
+
+  override fun getString(key: Int): String =
+      readStringValue(getTypedValueOffsetForKey(key, MapBuffer.DataType.STRING))
+
+  override fun getBoolean(key: Int): Boolean =
+      readBooleanValue(getTypedValueOffsetForKey(key, MapBuffer.DataType.BOOL))
+
+  override fun getMapBuffer(key: Int): ReadableMapBuffer =
+      readMapBufferValue(getTypedValueOffsetForKey(key, MapBuffer.DataType.MAP))
+
+  override fun getMapBufferList(key: Int): List<ReadableMapBuffer> =
+      readMapBufferListValue(getTypedValueOffsetForKey(key, MapBuffer.DataType.MAP))
+
+  override fun hashCode(): Int {
+    buffer.rewind()
+    return buffer.hashCode()
+  }
+
+  override fun equals(other: Any?): Boolean {
+    if (other !is ReadableMapBuffer) {
+      return false
+    }
+    val thisByteBuffer = buffer
+    val otherByteBuffer = other.buffer
+    if (thisByteBuffer === otherByteBuffer) {
+      return true
+    }
+    thisByteBuffer.rewind()
+    otherByteBuffer.rewind()
+    return thisByteBuffer == otherByteBuffer
+  }
+
+  override fun toString(): String {
+    val builder = StringBuilder("{")
+    joinTo(builder) { entry ->
+      StringBuilder().apply {
+        append(entry.key)
+        append('=')
+        when (entry.type) {
+          MapBuffer.DataType.BOOL -> append(entry.booleanValue)
+          MapBuffer.DataType.INT -> append(entry.intValue)
+          MapBuffer.DataType.LONG -> append(entry.longValue)
+          MapBuffer.DataType.DOUBLE -> append(entry.doubleValue)
+          MapBuffer.DataType.STRING -> {
+            append('"')
+            append(entry.stringValue)
+            append('"')
+          }
+          MapBuffer.DataType.MAP -> append(entry.mapBufferValue.toString())
+        }
+      }
+    }
+    builder.append('}')
+    return builder.toString()
+  }
+
+  override fun iterator(): Iterator<MapBuffer.Entry> {
+    return object : Iterator<MapBuffer.Entry> {
+      var current = 0
+      val last = count - 1
+
+      override fun hasNext(): Boolean {
+        return current <= last
+      }
+
+      override fun next(): MapBuffer.Entry {
+        return MapBufferEntry(getKeyOffsetForBucketIndex(current++))
+      }
+    }
+  }
+
+  private inner class MapBufferEntry(private val bucketOffset: Int) : MapBuffer.Entry {
+    private fun assertType(expected: MapBuffer.DataType) {
+      val dataType = type
+      check(!(expected !== dataType)) {
+        ("Expected " +
+            expected +
+            " for key: " +
+            key +
+            " found " +
+            dataType.toString() +
+            " instead.")
+      }
+    }
+
+    override val key: Int
+      get() = readUnsignedShort(bucketOffset).toInt()
+
+    override val type: MapBuffer.DataType
+      get() = MapBuffer.DataType.values()[readUnsignedShort(bucketOffset + TYPE_OFFSET).toInt()]
+
+    override val doubleValue: Double
+      get() {
+        assertType(MapBuffer.DataType.DOUBLE)
+        return readDoubleValue(bucketOffset + VALUE_OFFSET)
+      }
+
+    override val intValue: Int
+      get() {
+        assertType(MapBuffer.DataType.INT)
+        return readIntValue(bucketOffset + VALUE_OFFSET)
+      }
+
+    override val longValue: Long
+      get() {
+        assertType(MapBuffer.DataType.LONG)
+        return readLongValue(bucketOffset + VALUE_OFFSET)
+      }
+
+    override val booleanValue: Boolean
+      get() {
+        assertType(MapBuffer.DataType.BOOL)
+        return readBooleanValue(bucketOffset + VALUE_OFFSET)
+      }
+
+    override val stringValue: String
+      get() {
+        assertType(MapBuffer.DataType.STRING)
+        return readStringValue(bucketOffset + VALUE_OFFSET)
+      }
+
+    override val mapBufferValue: MapBuffer
+      get() {
+        assertType(MapBuffer.DataType.MAP)
+        return readMapBufferValue(bucketOffset + VALUE_OFFSET)
+      }
+  }
+
+  public companion object {
+    // Value used to verify if the data is serialized with LittleEndian order.
+    private const val ALIGNMENT = 0xFE
+
+    // 8 bytes = 2 (alignment) + 2 (count) + 4 (size)
+    private const val HEADER_SIZE = 8
+
+    // 10 bytes = 2 (key) + 2 (type) + 8 (value)
+    private const val BUCKET_SIZE = 12
+
+    // 2 bytes = 2 (key)
+    private const val TYPE_OFFSET = 2
+
+    // 4 bytes = 2 (key) + 2 (type)
+    private const val VALUE_OFFSET = 4
+
+    init {
+      MapBufferSoLoader.staticInit()
+    }
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/WritableMapBuffer.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/WritableMapBuffer.kt
new file mode 100644
index 0000000..f79e912
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/common/mapbuffer/WritableMapBuffer.kt
@@ -0,0 +1,200 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.common.mapbuffer
+
+import android.util.SparseArray
+import com.facebook.proguard.annotations.DoNotStrip
+import com.facebook.react.common.annotations.StableReactNativeAPI
+import com.facebook.react.common.mapbuffer.MapBuffer.Companion.KEY_RANGE
+import com.facebook.react.common.mapbuffer.MapBuffer.DataType
+import javax.annotation.concurrent.NotThreadSafe
+
+/**
+ * Implementation of writeable Java-only MapBuffer, which can be used to send information through
+ * JNI.
+ *
+ * See [MapBuffer] for more details
+ */
+@StableReactNativeAPI
+@NotThreadSafe
+@DoNotStrip
+public class WritableMapBuffer : MapBuffer {
+  private val values: SparseArray<Any> = SparseArray<Any>()
+
+  /*
+   * Write methods
+   */
+
+  /**
+   * Adds a boolean value for given key to the MapBuffer.
+   *
+   * @param key entry key
+   * @param value entry value
+   * @throws IllegalArgumentException if key is out of [UShort] range
+   */
+  public fun put(key: Int, value: Boolean): WritableMapBuffer = putInternal(key, value)
+
+  /**
+   * Adds an int value for given key to the MapBuffer.
+   *
+   * @param key entry key
+   * @param value entry value
+   * @throws IllegalArgumentException if key is out of [UShort] range
+   */
+  public fun put(key: Int, value: Int): WritableMapBuffer = putInternal(key, value)
+
+  /**
+   * Adds a long value for given key to the MapBuffer.
+   *
+   * @param key entry key
+   * @param value entry value
+   * @throws IllegalArgumentException if key is out of [UShort] range
+   */
+  public fun put(key: Int, value: Long): WritableMapBuffer = putInternal(key, value)
+
+  /**
+   * Adds a double value for given key to the MapBuffer.
+   *
+   * @param key entry key
+   * @param value entry value
+   * @throws IllegalArgumentException if key is out of [UShort] range
+   */
+  public fun put(key: Int, value: Double): WritableMapBuffer = putInternal(key, value)
+
+  /**
+   * Adds a string value for given key to the MapBuffer.
+   *
+   * @param key entry key
+   * @param value entry value
+   * @throws IllegalArgumentException if key is out of [UShort] range
+   */
+  public fun put(key: Int, value: String): WritableMapBuffer = putInternal(key, value)
+
+  /**
+   * Adds a [MapBuffer] value for given key to the current MapBuffer.
+   *
+   * @param key entry key
+   * @param value entry value
+   * @throws IllegalArgumentException if key is out of [UShort] range
+   */
+  public fun put(key: Int, value: MapBuffer): WritableMapBuffer = putInternal(key, value)
+
+  private fun putInternal(key: Int, value: Any): WritableMapBuffer {
+    require(key in KEY_RANGE) {
+      "Only integers in [${UShort.MIN_VALUE};${UShort.MAX_VALUE}] range are allowed for keys."
+    }
+
+    values.put(key, value)
+    return this
+  }
+
+  /*
+   * Read methods
+   */
+
+  override val count: Int
+    get() = values.size()
+
+  override fun contains(key: Int): Boolean = values.get(key) != null
+
+  override fun getKeyOffset(key: Int): Int = values.indexOfKey(key)
+
+  override fun entryAt(offset: Int): MapBuffer.Entry = MapBufferEntry(offset)
+
+  override fun getType(key: Int): DataType {
+    val value = values.get(key)
+    require(value != null) { "Key not found: $key" }
+    return value.dataType(key)
+  }
+
+  override fun getBoolean(key: Int): Boolean = verifyValue(key, values.get(key))
+
+  override fun getInt(key: Int): Int = verifyValue(key, values.get(key))
+
+  override fun getLong(key: Int): Long = verifyValue(key, values.get(key))
+
+  override fun getDouble(key: Int): Double = verifyValue(key, values.get(key))
+
+  override fun getString(key: Int): String = verifyValue(key, values.get(key))
+
+  override fun getMapBuffer(key: Int): MapBuffer = verifyValue(key, values.get(key))
+
+  override fun getMapBufferList(key: Int): List<MapBuffer> = verifyValue(key, values.get(key))
+
+  /** Generalizes verification of the value types based on the requested type. */
+  private inline fun <reified T> verifyValue(key: Int, value: Any?): T {
+    require(value != null) { "Key not found: $key" }
+    check(value is T) {
+      "Expected ${T::class.java} for key: $key, found ${value.javaClass} instead."
+    }
+    return value
+  }
+
+  private fun Any.dataType(key: Int): DataType {
+    return when (val value = this) {
+      is Boolean -> DataType.BOOL
+      is Int -> DataType.INT
+      is Long -> DataType.LONG
+      is Double -> DataType.DOUBLE
+      is String -> DataType.STRING
+      is MapBuffer -> DataType.MAP
+      else -> throw IllegalStateException("Key $key has value of unknown type: ${value.javaClass}")
+    }
+  }
+
+  override fun iterator(): Iterator<MapBuffer.Entry> =
+      object : Iterator<MapBuffer.Entry> {
+        var count = 0
+
+        override fun hasNext(): Boolean = count < values.size()
+
+        override fun next(): MapBuffer.Entry = MapBufferEntry(count++)
+      }
+
+  private inner class MapBufferEntry(private val index: Int) : MapBuffer.Entry {
+    override val key: Int = values.keyAt(index)
+    override val type: DataType = values.valueAt(index).dataType(key)
+    override val booleanValue: Boolean
+      get() = verifyValue(key, values.valueAt(index))
+
+    override val intValue: Int
+      get() = verifyValue(key, values.valueAt(index))
+
+    override val longValue: Long
+      get() = verifyValue(key, values.valueAt(index))
+
+    override val doubleValue: Double
+      get() = verifyValue(key, values.valueAt(index))
+
+    override val stringValue: String
+      get() = verifyValue(key, values.valueAt(index))
+
+    override val mapBufferValue: MapBuffer
+      get() = verifyValue(key, values.valueAt(index))
+  }
+
+  /*
+   * JNI hooks
+   */
+
+  @DoNotStrip
+  @Suppress("UNUSED")
+  /** JNI hook for MapBuffer to retrieve sorted keys from this class. */
+  private fun getKeys(): IntArray = IntArray(values.size()) { values.keyAt(it) }
+
+  @DoNotStrip
+  @Suppress("UNUSED")
+  /** JNI hook for MapBuffer to retrieve sorted values from this class. */
+  private fun getValues(): Array<Any> = Array(values.size()) { values.valueAt(it) }
+
+  private companion object {
+    init {
+      MapBufferSoLoader.staticInit()
+    }
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultComponentsRegistry.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultComponentsRegistry.kt
new file mode 100644
index 0000000..14d33e5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultComponentsRegistry.kt
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.defaults
+
+import com.facebook.jni.HybridData
+import com.facebook.proguard.annotations.DoNotStrip
+import com.facebook.react.fabric.ComponentFactory
+
+/**
+ * A utility class that provides users a ComponentRegistry they can customize with a C++
+ * implementation of its native methods.
+ *
+ * This class works together with the [DefaultNewArchitectureEntryPoint] and it's C++ implementation
+ * is hosted inside the React Native framework
+ *
+ * TODO(T186951312): Should this be @UnstableReactNativeAPI?
+ */
+@DoNotStrip
+public class DefaultComponentsRegistry
+@DoNotStrip
+private constructor(componentFactory: ComponentFactory) {
+
+  @DoNotStrip
+  @Suppress("NoHungarianNotation")
+  private val mHybridData: HybridData = initHybrid(componentFactory)
+
+  @DoNotStrip private external fun initHybrid(componentFactory: ComponentFactory): HybridData
+
+  public companion object {
+    init {
+      DefaultSoLoader.maybeLoadSoLibrary()
+    }
+
+    @JvmStatic
+    @DoNotStrip
+    public fun register(componentFactory: ComponentFactory): DefaultComponentsRegistry =
+        DefaultComponentsRegistry(componentFactory)
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultNewArchitectureEntryPoint.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultNewArchitectureEntryPoint.kt
new file mode 100644
index 0000000..0f8dfad
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultNewArchitectureEntryPoint.kt
@@ -0,0 +1,152 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+@file:Suppress("DEPRECATION") // We want to use ReactFeatureFlags here specifically
+
+package com.facebook.react.defaults
+
+import com.facebook.infer.annotation.Assertions
+import com.facebook.react.common.annotations.VisibleForTesting
+import com.facebook.react.config.ReactFeatureFlags
+import com.facebook.react.internal.featureflags.ReactNativeFeatureFlags
+import com.facebook.react.internal.featureflags.ReactNativeFeatureFlagsDefaults
+
+/**
+ * A utility class that serves as an entry point for users setup the New Architecture.
+ *
+ * This class needs to be invoked as `DefaultNewArchitectureEntryPoint.load(...)` by passing a
+ * series of optional parameters.
+ *
+ * By default it loads a library called `appmodules`. `appmodules` is a convention used to refer to
+ * the application dynamic library. If changed here should be updated also inside the template.
+ *
+ * By default it also enables both TurboModules, Fabric and Concurrent React (aka React 18), and
+ * Bridgeless
+ */
+public object DefaultNewArchitectureEntryPoint {
+  @JvmStatic
+  @JvmOverloads
+  public fun load(
+      turboModulesEnabled: Boolean = true,
+      fabricEnabled: Boolean = true,
+      bridgelessEnabled: Boolean = true
+  ) {
+    val (isValid, errorMessage) =
+        isConfigurationValid(turboModulesEnabled, fabricEnabled, bridgelessEnabled)
+    if (!isValid) {
+      error(errorMessage)
+    }
+    ReactFeatureFlags.useTurboModules = turboModulesEnabled
+    ReactFeatureFlags.enableFabricRenderer = fabricEnabled
+    ReactFeatureFlags.unstable_useFabricInterop = fabricEnabled
+    ReactFeatureFlags.enableBridgelessArchitecture = bridgelessEnabled
+    ReactFeatureFlags.unstable_useTurboModuleInterop = bridgelessEnabled
+    val fuseboxEnabledDebug = fuseboxEnabled
+
+    if (bridgelessEnabled) {
+      ReactNativeFeatureFlags.override(
+          object : ReactNativeFeatureFlagsDefaults() {
+            override fun useModernRuntimeScheduler(): Boolean = true
+
+            override fun enableMicrotasks(): Boolean = true
+
+            override fun batchRenderingUpdatesInEventLoop(): Boolean = true
+
+            override fun useNativeViewConfigsInBridgelessMode(): Boolean = true
+
+            // We need to assign this now as we can't call ReactNativeFeatureFlags.override()
+            // more than once.
+            override fun fuseboxEnabledDebug(): Boolean = fuseboxEnabledDebug
+          })
+    }
+
+    privateFabricEnabled = fabricEnabled
+    privateTurboModulesEnabled = turboModulesEnabled
+    privateConcurrentReactEnabled = fabricEnabled
+    privateBridgelessEnabled = bridgelessEnabled
+
+    DefaultSoLoader.maybeLoadSoLibrary()
+    loaded = true
+  }
+
+  private var privateFabricEnabled: Boolean = false
+
+  @JvmStatic
+  public val fabricEnabled: Boolean
+    get() = privateFabricEnabled
+
+  private var privateTurboModulesEnabled: Boolean = false
+
+  @JvmStatic
+  public val turboModulesEnabled: Boolean
+    get() = privateTurboModulesEnabled
+
+  private var privateConcurrentReactEnabled: Boolean = false
+
+  @JvmStatic
+  public val concurrentReactEnabled: Boolean
+    get() = privateConcurrentReactEnabled
+
+  private var privateBridgelessEnabled: Boolean = false
+
+  @JvmStatic
+  public val bridgelessEnabled: Boolean
+    get() = privateBridgelessEnabled
+
+  @VisibleForTesting
+  public fun isConfigurationValid(
+      turboModulesEnabled: Boolean,
+      fabricEnabled: Boolean,
+      bridgelessEnabled: Boolean
+  ): Pair<Boolean, String> =
+      when {
+        fabricEnabled && !turboModulesEnabled ->
+            false to
+                "fabricEnabled=true requires turboModulesEnabled=true (is now false) - Please update your DefaultNewArchitectureEntryPoint.load() parameters."
+        bridgelessEnabled && (!turboModulesEnabled || !fabricEnabled) ->
+            false to
+                "bridgelessEnabled=true requires (turboModulesEnabled=true AND fabricEnabled=true) - Please update your DefaultNewArchitectureEntryPoint.load() parameters."
+        else -> true to ""
+      }
+
+  // region unstable_loadFusebox (short-lived API for testing Fusebox - EXPERIMENTAL)
+
+  /**
+   * Set to {@code true} when {@link #load()} is called. Used for assertion in
+   * {@link #unstable_loadFusebox()}.
+   */
+  private var loaded: Boolean = false
+
+  /** Set to {@code true} if {@link #unstable_loadFusebox()} was called. */
+  private var fuseboxEnabled: Boolean = false
+
+  /**
+   * If called, enables the new debugger stack (codename Fusebox). Must be called before
+   * {@link #load()}.
+   *
+   * @param isNewArchEnabled Please pass {@code BuildConfig.IS_NEW_ARCH_ENABLED} here.
+   */
+  @JvmStatic
+  public fun unstable_loadFusebox(
+      isNewArchEnabled: Boolean,
+  ) {
+    fuseboxEnabled = true
+
+    if (!isNewArchEnabled) {
+      ReactNativeFeatureFlags.override(
+          object : ReactNativeFeatureFlagsDefaults() {
+            override fun fuseboxEnabledDebug(): Boolean = true
+          })
+    } else {
+      Assertions.assertCondition(
+          loaded == false, "unstable_loadFusebox() must be called before load()")
+    }
+  }
+
+  // endregion
+
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactActivityDelegate.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactActivityDelegate.kt
new file mode 100644
index 0000000..4cb4263
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactActivityDelegate.kt
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.defaults
+
+import com.facebook.react.ReactActivity
+import com.facebook.react.ReactActivityDelegate
+
+/**
+ * A utility class that allows you to simplify the setup of a [ReactActivityDelegate] for new apps
+ * in Open Source.
+ *
+ * Specifically, with this class you can simply control if Fabric is enabled for an Activity using
+ * the boolean flag in the constructor.
+ *
+ * @param fabricEnabled Whether Fabric should be enabled for the RootView of this Activity.
+ */
+public open class DefaultReactActivityDelegate(
+    activity: ReactActivity,
+    mainComponentName: String,
+    private val fabricEnabled: Boolean = false,
+) : ReactActivityDelegate(activity, mainComponentName) {
+
+  @Deprecated(
+      message =
+          "Creating DefaultReactActivityDelegate with both fabricEnabled and " +
+              "concurrentReactEnabled is deprecated. Please pass only one boolean value that will" +
+              " be used for both flags",
+      level = DeprecationLevel.WARNING,
+      replaceWith =
+          ReplaceWith("DefaultReactActivityDelegate(activity, mainComponentName, fabricEnabled)"))
+  public constructor(
+      activity: ReactActivity,
+      mainComponentName: String,
+      fabricEnabled: Boolean,
+      @Suppress("UNUSED_PARAMETER") concurrentReactEnabled: Boolean,
+  ) : this(activity, mainComponentName, fabricEnabled)
+
+  override fun isFabricEnabled(): Boolean = fabricEnabled
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactHost.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactHost.kt
new file mode 100644
index 0000000..06452e5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactHost.kt
@@ -0,0 +1,123 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.defaults
+
+import android.content.Context
+import com.facebook.react.JSEngineResolutionAlgorithm
+import com.facebook.react.ReactHost
+import com.facebook.react.ReactNativeHost
+import com.facebook.react.ReactPackage
+import com.facebook.react.bridge.JSBundleLoader
+import com.facebook.react.bridge.ReactContext
+import com.facebook.react.common.annotations.UnstableReactNativeAPI
+import com.facebook.react.common.build.ReactBuildConfig
+import com.facebook.react.fabric.ComponentFactory
+import com.facebook.react.runtime.JSCInstance
+import com.facebook.react.runtime.ReactHostImpl
+import com.facebook.react.runtime.cxxreactpackage.CxxReactPackage
+import com.facebook.react.runtime.hermes.HermesInstance
+
+/**
+ * A utility class that allows you to simplify the setup of a [ReactHost] for new apps in Open
+ * Source.
+ *
+ * [ReactHost] is an interface responsible of handling the lifecycle of a React Native app when
+ * running in bridgeless mode.
+ */
+public object DefaultReactHost {
+  private var reactHost: ReactHost? = null
+
+  /**
+   * Util function to create a default [ReactHost] to be used in your application. This method is
+   * used by the New App template.
+   *
+   * @param context the Android [Context] to use for creating the [ReactHost]
+   * @param packageList the list of [ReactPackage]s to use for creating the [ReactHost]
+   * @param jsMainModulePath the path to your app's main module on Metro. Usually `index` or
+   *   `index.<platform>`
+   * @param jsBundleAssetPath the path to the JS bundle relative to the assets directory. Will be
+   *   composed in a `asset://...` URL
+   * @param isHermesEnabled whether to use Hermes as the JS engine, default to true.
+   * @param useDevSupport whether to enable dev support, default to ReactBuildConfig.DEBUG.
+   * @param cxxReactPackageProviders a list of cxxreactpackage providers (to register c++ turbo
+   *   modules)
+   *
+   * TODO(T186951312): Should this be @UnstableReactNativeAPI?
+   */
+  @OptIn(UnstableReactNativeAPI::class)
+  @JvmStatic
+  public fun getDefaultReactHost(
+      context: Context,
+      packageList: List<ReactPackage>,
+      jsMainModulePath: String = "index",
+      jsBundleAssetPath: String = "index",
+      isHermesEnabled: Boolean = true,
+      useDevSupport: Boolean = ReactBuildConfig.DEBUG,
+      cxxReactPackageProviders: List<(ReactContext) -> CxxReactPackage> = emptyList(),
+  ): ReactHost {
+    if (reactHost == null) {
+      val jsBundleLoader =
+          JSBundleLoader.createAssetLoader(context, "assets://$jsBundleAssetPath", true)
+      val jsRuntimeFactory = if (isHermesEnabled) HermesInstance() else JSCInstance()
+      val defaultTmmDelegateBuilder = DefaultTurboModuleManagerDelegate.Builder()
+      cxxReactPackageProviders.forEach { defaultTmmDelegateBuilder.addCxxReactPackage(it) }
+      val defaultReactHostDelegate =
+          DefaultReactHostDelegate(
+              jsMainModulePath = jsMainModulePath,
+              jsBundleLoader = jsBundleLoader,
+              reactPackages = packageList,
+              jsRuntimeFactory = jsRuntimeFactory,
+              turboModuleManagerDelegateBuilder = defaultTmmDelegateBuilder)
+      val componentFactory = ComponentFactory()
+      DefaultComponentsRegistry.register(componentFactory)
+      // TODO: T164788699 find alternative of accessing ReactHostImpl for initialising reactHost
+      reactHost =
+          ReactHostImpl(
+                  context,
+                  defaultReactHostDelegate,
+                  componentFactory,
+                  true /* allowPackagerServerAccess */,
+                  useDevSupport,
+              )
+              .apply {
+                jsEngineResolutionAlgorithm =
+                    if (isHermesEnabled) {
+                      JSEngineResolutionAlgorithm.HERMES
+                    } else {
+                      JSEngineResolutionAlgorithm.JSC
+                    }
+              }
+    }
+    return reactHost as ReactHost
+  }
+
+  /**
+   * Util function to create a default [ReactHost] to be used in your application. This method is
+   * used by the New App template.
+   *
+   * This method takes in input a [ReactNativeHost] (bridge-mode) and uses its configuration to
+   * create an equivalent [ReactHost] (bridgeless-mode).
+   *
+   * @param context the Android [Context] to use for creating the [ReactHost]
+   * @param reactNativeHost the [ReactNativeHost] to use for creating the [ReactHost]
+   *
+   * TODO(T186951312): Should this be @UnstableReactNativeAPI? It's not, to maintain consistency
+   *   with above getDefaultReactHost.
+   */
+  @OptIn(UnstableReactNativeAPI::class)
+  @JvmStatic
+  public fun getDefaultReactHost(
+      context: Context,
+      reactNativeHost: ReactNativeHost,
+  ): ReactHost {
+    require(reactNativeHost is DefaultReactNativeHost) {
+      "You can call getDefaultReactHost only with instances of DefaultReactNativeHost"
+    }
+    return reactNativeHost.toReactHost(context)
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactHostDelegate.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactHostDelegate.kt
new file mode 100644
index 0000000..3c50cac
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactHostDelegate.kt
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.defaults
+
+import com.facebook.jni.annotations.DoNotStrip
+import com.facebook.react.ReactPackage
+import com.facebook.react.ReactPackageTurboModuleManagerDelegate
+import com.facebook.react.bridge.JSBundleLoader
+import com.facebook.react.common.annotations.UnstableReactNativeAPI
+import com.facebook.react.fabric.ReactNativeConfig
+import com.facebook.react.runtime.BindingsInstaller
+import com.facebook.react.runtime.JSRuntimeFactory
+import com.facebook.react.runtime.ReactHostDelegate
+import com.facebook.react.runtime.hermes.HermesInstance
+
+/**
+ * A utility class that allows you to simplify the initialization of React Native by setting up a
+ * [ReactHostDelegate] that uses recommended dependencies.
+ *
+ * @param jsMainModulePath Path to your app's main module on Metro. This is used when reloading JS
+ *   during development. All paths are relative to the root folder the packager is serving files
+ *   from. Examples: `index.android` or `subdirectory/index.android`
+ * @param jsBundleLoader Bundle loader to use when setting up JS environment. <p>Example:
+ *   [JSBundleLoader.createFileLoader(application, bundleFile)]
+ * @param reactPackages list of reactPackages to expose Native Modules and View Components to JS
+ * @param jsRuntimeFactory Object that holds a native reference to the JS Runtime factory
+ * @param bindingsInstaller Object that holds a native C++ references that allow host applications
+ *   to install C++ objects into jsi::Runtime during the initialization of React Native
+ * @param reactNativeConfig ReactNative Configuration that allows to customize the behavior of
+ *   key/value pairs used by the framework to enable/disable experimental capabilities
+ * @param exceptionHandler Callback that can be used by React Native host applications to react to
+ *   exceptions thrown by the internals of React Native.
+ */
+@DoNotStrip
+@UnstableReactNativeAPI
+public class DefaultReactHostDelegate(
+    override val jsMainModulePath: String,
+    override val jsBundleLoader: JSBundleLoader,
+    override val reactPackages: List<ReactPackage> = emptyList(),
+    override val jsRuntimeFactory: JSRuntimeFactory = HermesInstance(),
+    override val bindingsInstaller: BindingsInstaller? = null,
+    private val reactNativeConfig: ReactNativeConfig = ReactNativeConfig.DEFAULT_CONFIG,
+    private val exceptionHandler: (Exception) -> Unit = {},
+    override val turboModuleManagerDelegateBuilder: ReactPackageTurboModuleManagerDelegate.Builder
+) : ReactHostDelegate {
+
+  override fun getReactNativeConfig(): ReactNativeConfig = reactNativeConfig
+
+  override fun handleInstanceException(error: Exception): Unit = exceptionHandler(error)
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactNativeHost.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactNativeHost.kt
new file mode 100644
index 0000000..e309410
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultReactNativeHost.kt
@@ -0,0 +1,117 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.defaults
+
+import android.app.Application
+import android.content.Context
+import com.facebook.react.JSEngineResolutionAlgorithm
+import com.facebook.react.ReactHost
+import com.facebook.react.ReactNativeHost
+import com.facebook.react.ReactPackageTurboModuleManagerDelegate
+import com.facebook.react.bridge.ReactApplicationContext
+import com.facebook.react.bridge.UIManagerProvider
+import com.facebook.react.common.annotations.UnstableReactNativeAPI
+import com.facebook.react.fabric.ComponentFactory
+import com.facebook.react.fabric.FabricUIManagerProviderImpl
+import com.facebook.react.fabric.ReactNativeConfig
+import com.facebook.react.uimanager.ViewManagerRegistry
+import com.facebook.react.uimanager.ViewManagerResolver
+
+/**
+ * A utility class that allows you to simplify the setup of a [ReactNativeHost] for new apps in Open
+ * Source.
+ *
+ * Specifically, for apps that are using the New Architecture, this Default class takes care of
+ * providing the default TurboModuleManagerDelegateBuilder and the default JSIModulePackage,
+ * provided the name of the dynamic library to load.
+ */
+public abstract class DefaultReactNativeHost
+protected constructor(
+    application: Application,
+) : ReactNativeHost(application) {
+
+  override fun getReactPackageTurboModuleManagerDelegateBuilder():
+      ReactPackageTurboModuleManagerDelegate.Builder? =
+      if (isNewArchEnabled) {
+        DefaultTurboModuleManagerDelegate.Builder()
+      } else {
+        null
+      }
+
+  override fun getUIManagerProvider(): UIManagerProvider? =
+      if (isNewArchEnabled) {
+        UIManagerProvider { reactApplicationContext: ReactApplicationContext ->
+          val componentFactory = ComponentFactory()
+          DefaultComponentsRegistry.register(componentFactory)
+
+          val viewManagerRegistry =
+              if (lazyViewManagersEnabled) {
+                ViewManagerRegistry(
+                    object : ViewManagerResolver {
+                      override fun getViewManager(viewManagerName: String) =
+                          reactInstanceManager.createViewManager(viewManagerName)
+
+                      override fun getViewManagerNames() = reactInstanceManager.viewManagerNames
+                    })
+              } else {
+                ViewManagerRegistry(
+                    reactInstanceManager.getOrCreateViewManagers(reactApplicationContext))
+              }
+
+          FabricUIManagerProviderImpl(
+                  componentFactory, ReactNativeConfig.DEFAULT_CONFIG, viewManagerRegistry)
+              .createUIManager(reactApplicationContext)
+        }
+      } else {
+        null
+      }
+
+  override fun getJSEngineResolutionAlgorithm(): JSEngineResolutionAlgorithm? =
+      when (isHermesEnabled) {
+        true -> JSEngineResolutionAlgorithm.HERMES
+        false -> JSEngineResolutionAlgorithm.JSC
+        null -> null
+      }
+
+  /**
+   * Returns whether the user wants to use the New Architecture or not.
+   *
+   * If true, we will load the default JSI Module Package and TurboModuleManagerDelegate needed to
+   * enable the New Architecture
+   *
+   * If false, the app will not attempt to load the New Architecture modules.
+   */
+  protected open val isNewArchEnabled: Boolean
+    get() = false
+
+  /**
+   * Returns whether the user wants to use Hermes.
+   *
+   * If true, the app will load the Hermes engine, and fail if not found. If false, the app will
+   * load the JSC engine, and fail if not found. If null, the app will attempt to load JSC first and
+   * fallback to Hermes if not found.
+   */
+  protected open val isHermesEnabled: Boolean?
+    get() = null
+
+  /**
+   * Converts this [ReactNativeHost] (bridge-mode) to a [ReactHost] (bridgeless-mode).
+   *
+   * @param context the Android [Context] to use for creating the [ReactHost]
+   */
+  @UnstableReactNativeAPI
+  internal fun toReactHost(context: Context): ReactHost =
+      DefaultReactHost.getDefaultReactHost(
+          context,
+          packages,
+          jsMainModuleName,
+          bundleAssetName ?: "index",
+          isHermesEnabled ?: true,
+          useDeveloperSupport,
+      )
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultTurboModuleManagerDelegate.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultTurboModuleManagerDelegate.kt
new file mode 100644
index 0000000..3da64ba
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/defaults/DefaultTurboModuleManagerDelegate.kt
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.defaults
+
+import com.facebook.jni.HybridData
+import com.facebook.proguard.annotations.DoNotStrip
+import com.facebook.react.ReactPackage
+import com.facebook.react.ReactPackageTurboModuleManagerDelegate
+import com.facebook.react.bridge.ReactApplicationContext
+import com.facebook.react.common.annotations.UnstableReactNativeAPI
+import com.facebook.react.runtime.cxxreactpackage.CxxReactPackage
+
+/**
+ * A utility class that allows you to simplify the setup of a
+ * [ReactPackageTurboModuleManagerDelegate] for new apps in Open Source.
+ *
+ * This class works together with the [DefaultNewArchitectureEntryPoint] and it's C++ implementation
+ * is hosted inside the React Native framework
+ *
+ * TODO(T186951312): Should this be @UnstableReactNativeAPI?
+ */
+@OptIn(UnstableReactNativeAPI::class)
+public class DefaultTurboModuleManagerDelegate
+private constructor(
+    context: ReactApplicationContext,
+    packages: List<ReactPackage>,
+    cxxReactPackages: List<CxxReactPackage>,
+) : ReactPackageTurboModuleManagerDelegate(context, packages, initHybrid(cxxReactPackages)) {
+
+  override fun initHybrid(): HybridData {
+    throw UnsupportedOperationException(
+        "DefaultTurboModuleManagerDelegate.initHybrid() must never be called!")
+  }
+
+  public class Builder : ReactPackageTurboModuleManagerDelegate.Builder() {
+    private var cxxReactPackageProviders:
+        MutableList<((context: ReactApplicationContext) -> CxxReactPackage)> =
+        mutableListOf()
+
+    public fun addCxxReactPackage(provider: () -> CxxReactPackage): Builder {
+      cxxReactPackageProviders.add { _ -> provider() }
+      return this
+    }
+
+    public fun addCxxReactPackage(
+        provider: (context: ReactApplicationContext) -> CxxReactPackage
+    ): Builder {
+      cxxReactPackageProviders.add(provider)
+      return this
+    }
+
+    override fun build(
+        context: ReactApplicationContext,
+        packages: List<ReactPackage>
+    ): DefaultTurboModuleManagerDelegate {
+      val cxxReactPackages = mutableListOf<CxxReactPackage>()
+      for (cxxReactPackageProvider in cxxReactPackageProviders) {
+        cxxReactPackages.add(cxxReactPackageProvider(context))
+      }
+
+      return DefaultTurboModuleManagerDelegate(context, packages, cxxReactPackages)
+    }
+  }
+
+  private companion object {
+    init {
+      DefaultSoLoader.maybeLoadSoLibrary()
+    }
+
+    @DoNotStrip
+    @JvmStatic
+    external fun initHybrid(cxxReactPackages: List<CxxReactPackage>): HybridData
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/devsupport/AndroidManifest.xml b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/devsupport/AndroidManifest.xml
new file mode 100644
index 0000000..8e8524c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/devsupport/AndroidManifest.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.facebook.react.devsupport">
+  <application>
+    <!-- This activity will be removed for release builds -->
+    <activity android:name="com.facebook.react.devsupport.DevSettingsActivity"
+              android:exported="false"
+    />
+  </application>
+</manifest>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/fabric/ReactNativeConfig.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/fabric/ReactNativeConfig.kt
new file mode 100644
index 0000000..7cc81c4
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/fabric/ReactNativeConfig.kt
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.fabric
+
+import com.facebook.proguard.annotations.DoNotStrip
+
+/**
+ * ReactNative Configuration that allows to customize the behavior of key/value pairs used by the
+ * framework to enable/disable capabilities.
+ *
+ * The hosting app should provide an implementation of this interface to allow specific
+ * customization of single keys. An empty implementation is available as [EmptyReactNativeConfig].
+ *
+ * This is a wrapper for the ReactNativeConfig object in C++
+ */
+@DoNotStrip
+public interface ReactNativeConfig {
+  /**
+   * Get a boolean param by string name. Default should be false.
+   *
+   * @param param The string name of the parameter being requested.
+   */
+  @DoNotStrip public fun getBool(param: String): Boolean
+
+  /**
+   * Get a Long param by string name. Default should be 0.
+   *
+   * @param param The string name of the parameter being requested.
+   */
+  @DoNotStrip public fun getInt64(param: String): Long
+
+  /**
+   * Get a string param by string name. Default should be "", empty string.
+   *
+   * @param param The string name of the parameter being requested.
+   */
+  @DoNotStrip public fun getString(param: String): String
+
+  /**
+   * Get a double param by string name. Default should be 0.
+   *
+   * @param param The string name of the parameter being requested.
+   */
+  @DoNotStrip public fun getDouble(param: String): Double
+
+  public companion object {
+    @JvmField public val DEFAULT_CONFIG: ReactNativeConfig = EmptyReactNativeConfig()
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/TaskInterface.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/TaskInterface.kt
new file mode 100644
index 0000000..c7d9680
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/TaskInterface.kt
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.interfaces
+
+import java.util.concurrent.TimeUnit
+
+/**
+ * This is the public interface for Task which represents the result of an asynchronous computation.
+ */
+public interface TaskInterface<TResult> {
+
+  /** Blocks until the task is complete. */
+  @Throws(InterruptedException::class) public fun waitForCompletion()
+
+  /**
+   * Blocks until the task is complete or times out.
+   *
+   * @return true if the task completed (has a result, an error, or was cancelled). false otherwise.
+   */
+  @Throws(InterruptedException::class)
+  public fun waitForCompletion(duration: Long, timeUnit: TimeUnit?): Boolean
+
+  /** @return The result of the task, if set. null otherwise. */
+  public fun getResult(): TResult?
+
+  /** @return The error for the task, if set. null otherwise. */
+  public fun getError(): Exception?
+
+  /**
+   * @return true if the task completed (has a result, an error, or was cancelled. false otherwise.
+   */
+  public fun isCompleted(): Boolean
+
+  /** @return true if the task was cancelled, false otherwise. */
+  public fun isCancelled(): Boolean
+
+  /** @return true if the task has an error, false otherwise. */
+  public fun isFaulted(): Boolean
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/exceptionmanager/ReactJsExceptionHandler.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/exceptionmanager/ReactJsExceptionHandler.kt
new file mode 100644
index 0000000..c12a1eb
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/exceptionmanager/ReactJsExceptionHandler.kt
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.interfaces.exceptionmanager
+
+import com.facebook.proguard.annotations.DoNotStripAny
+import com.facebook.react.common.annotations.UnstableReactNativeAPI
+import java.util.ArrayList
+
+@DoNotStripAny
+@UnstableReactNativeAPI
+public fun interface ReactJsExceptionHandler {
+  @DoNotStripAny
+  public interface ParsedError {
+    @DoNotStripAny
+    public interface StackFrame {
+      public val fileName: String
+      public val methodName: String
+      public val lineNumber: Int
+      public val columnNumber: Int
+    }
+
+    public val frames: List<StackFrame>
+    public val message: String
+    public val exceptionId: Int
+    public val isFatal: Boolean
+  }
+
+  @DoNotStripAny
+  private data class ParsedStackFrameImpl(
+      override val fileName: String,
+      override val methodName: String,
+      override val lineNumber: Int,
+      override val columnNumber: Int,
+  ) : ParsedError.StackFrame
+
+  @DoNotStripAny
+  private data class ParsedErrorImpl(
+      override val frames: ArrayList<ParsedStackFrameImpl>,
+      override val message: String,
+      override val exceptionId: Int,
+      override val isFatal: Boolean,
+  ) : ParsedError
+
+  public fun reportJsException(errorMap: ParsedError)
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/fabric/ReactSurface.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/fabric/ReactSurface.kt
new file mode 100644
index 0000000..5f2e13b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/fabric/ReactSurface.kt
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.interfaces.fabric
+
+import android.content.Context
+import android.view.ViewGroup
+import com.facebook.react.interfaces.TaskInterface
+
+/** Represents a Surface in React Native. */
+public interface ReactSurface {
+
+  // the API of this interface will be completed as we analyze and refactor API of ReactSurface,
+  // ReactRootView, etc.
+
+  // Returns surface ID of this surface
+  public val surfaceID: Int
+
+  // Returns module name of this surface
+  public val moduleName: String
+
+  // Returns whether the surface is running or not
+  public val isRunning: Boolean
+
+  // Returns React root view of this surface
+  public val view: ViewGroup?
+
+  // Returns context associated with the surface
+  public val context: Context
+
+  // Prerender this surface
+  public fun prerender(): TaskInterface<Void>
+
+  // Start running this surface
+  public fun start(): TaskInterface<Void>
+
+  // Stop running this surface
+  public fun stop(): TaskInterface<Void>
+
+  // Clear surface
+  public fun clear()
+
+  // Detach surface from Host
+  public fun detach()
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/fabric/SurfaceHandler.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/fabric/SurfaceHandler.kt
new file mode 100644
index 0000000..e6a50ed
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/interfaces/fabric/SurfaceHandler.kt
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.interfaces.fabric
+
+import com.facebook.react.bridge.NativeMap
+import javax.annotation.concurrent.ThreadSafe
+
+/** Represents a Java variant of the surface, its status and inner data required to display it. */
+@ThreadSafe
+public interface SurfaceHandler {
+
+  /**
+   * Provides current surface id. Id should be updated after each call to {@link
+   * SurfaceHandler#stop}
+   */
+  public val surfaceId: Int
+
+  public val isRunning: Boolean
+
+  public val moduleName: String
+
+  /** Starts the surface if the surface is not running */
+  public fun start()
+
+  /** Stops the surface if it is currently running */
+  public fun stop()
+
+  public fun setProps(props: NativeMap)
+
+  /**
+   * Updates current surface id. Id should be updated after each call to {@link SurfaceHandler#stop}
+   */
+  public fun setSurfaceId(surfaceId: Int)
+
+  public fun setLayoutConstraints(
+      widthMeasureSpec: Int,
+      heightMeasureSpec: Int,
+      offsetX: Int,
+      offsetY: Int,
+      doLeftAndRightSwapInRTL: Boolean,
+      isRTL: Boolean,
+      pixelDensity: Float
+  )
+
+  public fun setMountable(mountable: Boolean)
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/jscexecutor/JSCExecutor.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/jscexecutor/JSCExecutor.kt
new file mode 100644
index 0000000..ed92a48
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/jscexecutor/JSCExecutor.kt
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.jscexecutor
+
+import com.facebook.jni.HybridData
+import com.facebook.proguard.annotations.DoNotStrip
+import com.facebook.react.bridge.JavaScriptExecutor
+import com.facebook.react.bridge.ReadableNativeMap
+import com.facebook.soloader.SoLoader
+
+@DoNotStrip
+public class JSCExecutor internal constructor(jscConfig: ReadableNativeMap) :
+    JavaScriptExecutor(initHybrid(jscConfig)) {
+  override fun getName(): String {
+    return "JSCExecutor"
+  }
+
+  private companion object {
+    init {
+      loadLibrary()
+    }
+
+    @JvmStatic
+    @Throws(UnsatisfiedLinkError::class)
+    fun loadLibrary() {
+      SoLoader.loadLibrary("jscexecutor")
+    }
+
+    @JvmStatic private external fun initHybrid(jscConfig: ReadableNativeMap): HybridData
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/jscexecutor/JSCExecutorFactory.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/jscexecutor/JSCExecutorFactory.kt
new file mode 100644
index 0000000..d4b9ea0
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/jscexecutor/JSCExecutorFactory.kt
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.jscexecutor
+
+import com.facebook.react.bridge.JavaScriptExecutor
+import com.facebook.react.bridge.JavaScriptExecutorFactory
+import com.facebook.react.bridge.WritableNativeMap
+
+public class JSCExecutorFactory(private val appName: String, private val deviceName: String) :
+    JavaScriptExecutorFactory {
+
+  @Throws(Exception::class)
+  override fun create(): JavaScriptExecutor {
+    val jscConfig =
+        WritableNativeMap().apply {
+          putString("OwnerIdentity", "ReactNative")
+          putString("AppIdentity", appName)
+          putString("DeviceIdentity", deviceName)
+        }
+    return JSCExecutor(jscConfig)
+  }
+
+  override fun startSamplingProfiler() {
+    throw UnsupportedOperationException("Starting sampling profiler not supported on ${toString()}")
+  }
+
+  override fun stopSamplingProfiler(filename: String) {
+    throw UnsupportedOperationException("Stopping sampling profiler not supported on ${toString()}")
+  }
+
+  override fun toString(): String = "JSIExecutor+JSCRuntime"
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/BindingsInstaller.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/BindingsInstaller.kt
new file mode 100644
index 0000000..c229320
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/BindingsInstaller.kt
@@ -0,0 +1,22 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.runtime
+
+import com.facebook.jni.HybridData
+import com.facebook.proguard.annotations.DoNotStrip
+import com.facebook.proguard.annotations.DoNotStripAny
+import com.facebook.soloader.SoLoader
+
+@DoNotStripAny
+public abstract class BindingsInstaller(@field:DoNotStrip private val mHybridData: HybridData?) {
+  private companion object {
+    init {
+      SoLoader.loadLibrary("rninstance")
+    }
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/README.md b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/README.md
new file mode 100644
index 0000000..60660d6
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/README.md
@@ -0,0 +1,3 @@
+# Bridgeless Mode for Android
+
+This library is not ready for integration for production nor local experimentation. Expect breaking changes regularly if you use any of these APIs. Use at your own risk!
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/ReactHostDelegate.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/ReactHostDelegate.kt
new file mode 100644
index 0000000..7c53923
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/ReactHostDelegate.kt
@@ -0,0 +1,84 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.runtime
+
+import com.facebook.infer.annotation.ThreadSafe
+import com.facebook.react.ReactPackage
+import com.facebook.react.ReactPackageTurboModuleManagerDelegate
+import com.facebook.react.bridge.JSBundleLoader
+import com.facebook.react.common.annotations.UnstableReactNativeAPI
+import com.facebook.react.fabric.ReactNativeConfig
+
+/**
+ * [ReactHostDelegate] is an interface that defines parameters required to initialize React Native.
+ * This interface works in combination with [ReactHost]
+ */
+@ThreadSafe
+@UnstableReactNativeAPI
+public interface ReactHostDelegate {
+  /**
+   * Path to your app's main module on Metro. This is used when reloading JS during development. All
+   * paths are relative to the root folder the packager is serving files from. Examples:
+   * `index.android` or `subdirectory/index.android`
+   */
+  public val jsMainModulePath: String
+
+  /**
+   * Object that holds a native C++ references that allow host applications to install C++ objects
+   * into jsi::Runtime during the initialization of React Native
+   */
+  public val bindingsInstaller: BindingsInstaller?
+
+  /** list of [ReactPackage] to expose Native Modules and View Components to JS */
+  public val reactPackages: List<ReactPackage>
+
+  /** Object that holds a native reference to the javascript engine */
+  public val jsRuntimeFactory: JSRuntimeFactory
+
+  /**
+   * Bundle loader to use when setting up JS environment. <p>Example:
+   * [JSBundleLoader.createFileLoader(application, bundleFile)]
+   */
+  public val jsBundleLoader: JSBundleLoader
+
+  /** TODO: combine getTurboModuleManagerDelegate inside [ReactPackage] */
+  public val turboModuleManagerDelegateBuilder: ReactPackageTurboModuleManagerDelegate.Builder
+
+  /**
+   * Callback that can be used by React Native host applications to react to exceptions thrown by
+   * the internals of React Native.
+   */
+  public fun handleInstanceException(error: Exception)
+
+  /**
+   * ReactNative Configuration that allows to customize the behavior of key/value pairs used by the
+   * framework to enable/disable experimental capabilities
+   *
+   * [moduleProvider] is a function that returns the Native Module with the name received as a
+   * parameter.
+   */
+  public fun getReactNativeConfig(): ReactNativeConfig
+
+  @UnstableReactNativeAPI
+  public class ReactHostDelegateBase(
+      override val jsMainModulePath: String,
+      override val jsBundleLoader: JSBundleLoader,
+      override val jsRuntimeFactory: JSRuntimeFactory,
+      override val turboModuleManagerDelegateBuilder:
+          ReactPackageTurboModuleManagerDelegate.Builder,
+      override val reactPackages: List<ReactPackage> = emptyList(),
+      override val bindingsInstaller: BindingsInstaller? = null,
+      private val reactNativeConfig: ReactNativeConfig = ReactNativeConfig.DEFAULT_CONFIG,
+      private val exceptionHandler: (error: Exception) -> Unit = {}
+  ) : ReactHostDelegate {
+
+    override fun getReactNativeConfig(): ReactNativeConfig = reactNativeConfig
+
+    override fun handleInstanceException(error: Exception): Unit = exceptionHandler(error)
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/hermes/HermesInstance.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/hermes/HermesInstance.kt
new file mode 100644
index 0000000..47efb3f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/runtime/hermes/HermesInstance.kt
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.runtime.hermes
+
+import com.facebook.jni.HybridData
+import com.facebook.jni.annotations.DoNotStrip
+import com.facebook.react.fabric.ReactNativeConfig
+import com.facebook.react.runtime.JSRuntimeFactory
+import com.facebook.soloader.SoLoader
+
+public class HermesInstance(reactNativeConfig: ReactNativeConfig?) :
+    JSRuntimeFactory(initHybrid(reactNativeConfig as Any?)) {
+
+  public constructor() : this(null)
+
+  public companion object {
+    @JvmStatic @DoNotStrip protected external fun initHybrid(reactNativeConfig: Any?): HybridData
+
+    init {
+      SoLoader.loadLibrary("hermesinstancejni")
+    }
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/turbomodule/core/interfaces/CallInvokerHolder.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/turbomodule/core/interfaces/CallInvokerHolder.kt
new file mode 100644
index 0000000..de3d307
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/turbomodule/core/interfaces/CallInvokerHolder.kt
@@ -0,0 +1,17 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.turbomodule.core.interfaces
+/**
+ * JS CallInvoker is created by CatalystInstance.cpp, but used by TurboModuleManager.cpp. Both C++
+ * classes are instantiated at different times/places. Therefore, to pass the JS CallInvoker
+ * instance from CatalystInstance to TurboModuleManager, we make it take a trip through Java.
+ *
+ * This interface represents the opaque Java object that contains a pointer to and instance of
+ * CallInvoker.
+ */
+public interface CallInvokerHolder
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/turbomodule/core/interfaces/NativeMethodCallInvokerHolder.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/turbomodule/core/interfaces/NativeMethodCallInvokerHolder.kt
new file mode 100644
index 0000000..1748a6d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/turbomodule/core/interfaces/NativeMethodCallInvokerHolder.kt
@@ -0,0 +1,13 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.turbomodule.core.interfaces
+/**
+ * This interface represents the opaque Java object that contains a pointer to and instance of
+ * NativeMethodCallInvoker.
+ */
+public interface NativeMethodCallInvokerHolder
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/turbomodule/core/interfaces/TurboModule.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/turbomodule/core/interfaces/TurboModule.kt
new file mode 100644
index 0000000..6333b81
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/turbomodule/core/interfaces/TurboModule.kt
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.turbomodule.core.interfaces
+/** All turbo modules should inherit from this interface */
+public interface TurboModule {
+  /** Initialize the TurboModule. */
+  public fun initialize()
+
+  /**
+   * Called during the turn down process of ReactHost. This method is called before React Native is
+   * stopped. Override this method to clean up resources used by the TurboModule.
+   */
+  public fun invalidate()
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.kt
new file mode 100644
index 0000000..d5e053c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/ReactModalHostManager.kt
@@ -0,0 +1,141 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.views.modal
+
+import android.content.DialogInterface.OnShowListener
+import com.facebook.react.bridge.ReadableArray
+import com.facebook.react.common.MapBuilder
+import com.facebook.react.module.annotations.ReactModule
+import com.facebook.react.uimanager.LayoutShadowNode
+import com.facebook.react.uimanager.ReactStylesDiffMap
+import com.facebook.react.uimanager.StateWrapper
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.UIManagerHelper
+import com.facebook.react.uimanager.ViewGroupManager
+import com.facebook.react.uimanager.ViewManagerDelegate
+import com.facebook.react.uimanager.annotations.ReactProp
+import com.facebook.react.viewmanagers.ModalHostViewManagerDelegate
+import com.facebook.react.viewmanagers.ModalHostViewManagerInterface
+import com.facebook.react.views.modal.ReactModalHostView.OnRequestCloseListener
+
+/** View manager for [ReactModalHostView] components. */
+@ReactModule(name = ReactModalHostManager.REACT_CLASS)
+public class ReactModalHostManager :
+    ViewGroupManager<ReactModalHostView>(), ModalHostViewManagerInterface<ReactModalHostView> {
+  private val delegate: ViewManagerDelegate<ReactModalHostView> = ModalHostViewManagerDelegate(this)
+
+  public override fun getName(): String = REACT_CLASS
+
+  protected override fun createViewInstance(reactContext: ThemedReactContext): ReactModalHostView =
+      ReactModalHostView(reactContext)
+
+  public override fun onDropViewInstance(view: ReactModalHostView) {
+    super.onDropViewInstance(view)
+    view.onDropInstance()
+  }
+
+  @ReactProp(name = "animationType")
+  public override fun setAnimationType(view: ReactModalHostView, animationType: String?) {
+    if (animationType != null) {
+      view.animationType = animationType
+    }
+  }
+
+  @ReactProp(name = "transparent")
+  public override fun setTransparent(view: ReactModalHostView, transparent: Boolean) {
+    view.transparent = transparent
+  }
+
+  @ReactProp(name = "statusBarTranslucent")
+  public override fun setStatusBarTranslucent(
+      view: ReactModalHostView,
+      statusBarTranslucent: Boolean
+  ) {
+    view.statusBarTranslucent = statusBarTranslucent
+  }
+
+  @ReactProp(name = "hardwareAccelerated")
+  public override fun setHardwareAccelerated(
+      view: ReactModalHostView,
+      hardwareAccelerated: Boolean
+  ) {
+    view.hardwareAccelerated = hardwareAccelerated
+  }
+
+  @ReactProp(name = "visible")
+  public override fun setVisible(view: ReactModalHostView, visible: Boolean) {
+    // iOS only
+  }
+
+  @ReactProp(name = "presentationStyle")
+  public override fun setPresentationStyle(view: ReactModalHostView, value: String?): Unit = Unit
+
+  @ReactProp(name = "animated")
+  public override fun setAnimated(view: ReactModalHostView, value: Boolean): Unit = Unit
+
+  @ReactProp(name = "supportedOrientations")
+  public override fun setSupportedOrientations(
+      view: ReactModalHostView,
+      value: ReadableArray?
+  ): Unit = Unit
+
+  @ReactProp(name = "identifier")
+  public override fun setIdentifier(view: ReactModalHostView, value: Int): Unit = Unit
+
+  protected override fun addEventEmitters(
+      reactContext: ThemedReactContext,
+      view: ReactModalHostView
+  ) {
+    val dispatcher = UIManagerHelper.getEventDispatcherForReactTag(reactContext, view.id)
+    if (dispatcher != null) {
+      view.onRequestCloseListener = OnRequestCloseListener {
+        dispatcher.dispatchEvent(
+            RequestCloseEvent(UIManagerHelper.getSurfaceId(reactContext), view.id))
+      }
+      view.onShowListener = OnShowListener {
+        dispatcher.dispatchEvent(ShowEvent(UIManagerHelper.getSurfaceId(reactContext), view.id))
+      }
+      view.eventDispatcher = dispatcher
+    }
+  }
+
+  public override fun getExportedCustomDirectEventTypeConstants(): Map<String, Any> =
+      (super.getExportedCustomDirectEventTypeConstants() ?: mutableMapOf()).apply {
+        putAll(
+            MapBuilder.builder<String, Any>()
+                .put(
+                    RequestCloseEvent.EVENT_NAME,
+                    MapBuilder.of("registrationName", "onRequestClose"))
+                .put(ShowEvent.EVENT_NAME, MapBuilder.of("registrationName", "onShow")) // iOS only
+                .put("topDismiss", MapBuilder.of("registrationName", "onDismiss")) // iOS only
+                .put(
+                    "topOrientationChange",
+                    MapBuilder.of("registrationName", "onOrientationChange"))
+                .build())
+      }
+
+  protected override fun onAfterUpdateTransaction(view: ReactModalHostView) {
+    super.onAfterUpdateTransaction(view)
+    view.showOrUpdate()
+  }
+
+  public override fun updateState(
+      view: ReactModalHostView,
+      props: ReactStylesDiffMap,
+      stateWrapper: StateWrapper
+  ): Any? {
+    view.stateWrapper = stateWrapper
+    return null
+  }
+
+  public override fun getDelegate(): ViewManagerDelegate<ReactModalHostView> = delegate
+
+  public companion object {
+    public const val REACT_CLASS: String = "RCTModalHostView"
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/ReactModalHostView.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/ReactModalHostView.kt
new file mode 100644
index 0000000..f6e0d82
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/ReactModalHostView.kt
@@ -0,0 +1,531 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+@file:Suppress("DEPRECATION")
+
+package com.facebook.react.views.modal
+
+import android.annotation.SuppressLint
+import android.app.Activity
+import android.app.Dialog
+import android.content.Context
+import android.content.DialogInterface
+import android.os.Build
+import android.view.KeyEvent
+import android.view.MotionEvent
+import android.view.View
+import android.view.ViewGroup
+import android.view.ViewStructure
+import android.view.Window
+import android.view.WindowInsetsController
+import android.view.WindowManager
+import android.view.accessibility.AccessibilityEvent
+import android.widget.FrameLayout
+import androidx.annotation.UiThread
+import com.facebook.react.R
+import com.facebook.react.bridge.GuardedRunnable
+import com.facebook.react.bridge.LifecycleEventListener
+import com.facebook.react.bridge.ReactContext
+import com.facebook.react.bridge.ReadableMap
+import com.facebook.react.bridge.UiThreadUtil
+import com.facebook.react.bridge.WritableMap
+import com.facebook.react.bridge.WritableNativeMap
+import com.facebook.react.common.annotations.VisibleForTesting
+import com.facebook.react.config.ReactFeatureFlags
+import com.facebook.react.uimanager.JSPointerDispatcher
+import com.facebook.react.uimanager.JSTouchDispatcher
+import com.facebook.react.uimanager.PixelUtil
+import com.facebook.react.uimanager.RootView
+import com.facebook.react.uimanager.StateWrapper
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.uimanager.UIManagerModule
+import com.facebook.react.uimanager.events.EventDispatcher
+import com.facebook.react.views.common.ContextUtils
+import com.facebook.react.views.view.ReactViewGroup
+import java.util.Objects
+import kotlin.math.abs
+
+/**
+ * ReactModalHostView is a view that sits in the view hierarchy representing a Modal view.
+ *
+ * It does a number of things:
+ * 1. It creates a [Dialog]. We use this Dialog to actually display the Modal in the window.
+ * 2. It creates a [DialogRootViewGroup]. This view is the view that is displayed by the Dialog. To
+ *    display a view within a Dialog, that view must have its parent set to the window the Dialog
+ *    creates. Because of this, we can not use the ReactModalHostView since it sits in the normal
+ *    React view hierarchy. We do however want all of the layout magic to happen as if the
+ *    DialogRootViewGroup were part of the hierarchy. Therefore, we forward all view changes around
+ *    addition and removal of views to the DialogRootViewGroup.
+ */
+@SuppressLint("ViewConstructor")
+public class ReactModalHostView(context: ThemedReactContext) :
+    ViewGroup(context), LifecycleEventListener {
+
+  @get:VisibleForTesting
+  public var dialog: Dialog? = null
+    private set
+
+  public var transparent: Boolean = false
+  public var onShowListener: DialogInterface.OnShowListener? = null
+  public var onRequestCloseListener: OnRequestCloseListener? = null
+  public var statusBarTranslucent: Boolean = false
+    set(value) {
+      field = value
+      createNewDialog = true
+    }
+
+  public var animationType: String? = null
+    set(value) {
+      field = value
+      createNewDialog = true
+    }
+
+  public var hardwareAccelerated: Boolean = false
+    set(value) {
+      field = value
+      createNewDialog = true
+    }
+
+  public var stateWrapper: StateWrapper?
+    get() = hostView.stateWrapper
+    public set(stateWrapper) {
+      hostView.stateWrapper = stateWrapper
+    }
+
+  public var eventDispatcher: EventDispatcher?
+    get() = hostView.eventDispatcher
+    public set(eventDispatcher) {
+      hostView.eventDispatcher = eventDispatcher
+    }
+
+  private var hostView: DialogRootViewGroup
+
+  // Set this flag to true if changing a particular property on the view requires a new Dialog to
+  // be created or Dialog was destroyed. For instance, animation does since it affects Dialog
+  // creation through the theme
+  // but transparency does not since we can access the window to update the property.
+  private var createNewDialog = false
+
+  init {
+    context.addLifecycleEventListener(this)
+    hostView = DialogRootViewGroup(context)
+  }
+
+  public override fun dispatchProvideStructure(structure: ViewStructure) {
+    hostView.dispatchProvideStructure(structure)
+  }
+
+  protected override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {
+    // Do nothing as we are laid out by UIManager
+  }
+
+  protected override fun onDetachedFromWindow() {
+    super.onDetachedFromWindow()
+    dismiss()
+  }
+
+  public override fun addView(child: View?, index: Int) {
+    UiThreadUtil.assertOnUiThread()
+    hostView.addView(child, index)
+  }
+
+  public override fun getChildCount(): Int = hostView.childCount
+
+  public override fun getChildAt(index: Int): View? = hostView.getChildAt(index)
+
+  public override fun removeView(child: View?) {
+    UiThreadUtil.assertOnUiThread()
+
+    if (child != null) {
+      hostView.removeView(child)
+    }
+  }
+
+  public override fun removeViewAt(index: Int) {
+    UiThreadUtil.assertOnUiThread()
+    val child = getChildAt(index)
+    hostView.removeView(child)
+  }
+
+  public override fun addChildrenForAccessibility(outChildren: ArrayList<View>) {
+    // Explicitly override this to prevent accessibility events being passed down to children
+    // Those will be handled by the mHostView which lives in the dialog
+  }
+
+  // Explicitly override this to prevent accessibility events being passed down to children
+  // Those will be handled by the mHostView which lives in the dialog
+  public override fun dispatchPopulateAccessibilityEvent(event: AccessibilityEvent): Boolean = false
+
+  public fun onDropInstance() {
+    (context as ThemedReactContext).removeLifecycleEventListener(this)
+    dismiss()
+  }
+
+  private fun dismiss() {
+    UiThreadUtil.assertOnUiThread()
+
+    dialog?.let { nonNullDialog ->
+      if (nonNullDialog.isShowing) {
+        val dialogContext =
+            ContextUtils.findContextOfType(nonNullDialog.context, Activity::class.java)
+        if (dialogContext == null || !dialogContext.isFinishing) {
+          nonNullDialog.dismiss()
+        }
+      }
+      dialog = null
+      createNewDialog = true
+
+      // We need to remove the mHostView from the parent
+      // It is possible we are dismissing this dialog and reattaching the hostView to another
+      (hostView.parent as? ViewGroup)?.removeViewAt(0)
+    }
+  }
+
+  public override fun onHostResume() {
+    // We show the dialog again when the host resumes
+    showOrUpdate()
+  }
+
+  public override fun onHostPause() {
+    // do nothing
+  }
+
+  public override fun onHostDestroy() {
+    // Drop the instance if the host is destroyed which will dismiss the dialog
+    onDropInstance()
+  }
+
+  private fun getCurrentActivity(): Activity? = (context as ThemedReactContext).currentActivity
+
+  /**
+   * showOrUpdate will display the Dialog. It is called by the manager once all properties are set
+   * because we need to know all of them before creating the Dialog. It is also smart during updates
+   * if the changed properties can be applied directly to the Dialog or require the recreation of a
+   * new Dialog.
+   */
+  public fun showOrUpdate() {
+    UiThreadUtil.assertOnUiThread()
+
+    // If the existing Dialog is currently up, we may need to redraw it or we may be able to update
+    // the property without having to recreate the dialog
+    if (createNewDialog) {
+      dismiss()
+    } else {
+      updateProperties()
+      return
+    }
+
+    // Reset the flag since we are going to create a new dialog
+    createNewDialog = false
+    val theme: Int =
+        when (animationType) {
+          "fade" -> R.style.Theme_FullScreenDialogAnimatedFade
+          "slide" -> R.style.Theme_FullScreenDialogAnimatedSlide
+          else -> R.style.Theme_FullScreenDialog
+        }
+
+    val currentActivity = getCurrentActivity()
+    val newDialog = Dialog(currentActivity ?: context, theme)
+    dialog = newDialog
+    Objects.requireNonNull<Window>(newDialog.window)
+        .setFlags(
+            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
+            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE)
+
+    newDialog.setContentView(contentView)
+    updateProperties()
+
+    newDialog.setOnShowListener(onShowListener)
+    newDialog.setOnKeyListener(
+        object : DialogInterface.OnKeyListener {
+          override fun onKey(dialog: DialogInterface, keyCode: Int, event: KeyEvent): Boolean {
+            if (event.action == KeyEvent.ACTION_UP) {
+              // We need to stop the BACK button and ESCAPE key from closing the dialog by default
+              // so we capture that event and instead inform JS so that it can make the decision as
+              // to whether or not to allow the back/escape key to close the dialog. If it chooses
+              // to, it can just set visible to false on the Modal and the Modal will go away
+              if (keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE) {
+                val listener =
+                    checkNotNull(onRequestCloseListener) {
+                      "onRequestClose callback must be set if back key is expected to close the modal"
+                    }
+                listener.onRequestClose(dialog)
+                return true
+              } else {
+                // We redirect the rest of the key events to the current activity, since the
+                // activity expects to receive those events and react to them, ie. in the case of
+                // the dev menu
+                val innerCurrentActivity =
+                    (this@ReactModalHostView.context as ReactContext).currentActivity
+                if (innerCurrentActivity != null) {
+                  return innerCurrentActivity.onKeyUp(keyCode, event)
+                }
+              }
+            }
+            return false
+          }
+        })
+
+    newDialog.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)
+    if (hardwareAccelerated) {
+      newDialog.window?.addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED)
+    }
+    if (currentActivity?.isFinishing == false) {
+      newDialog.show()
+      updateSystemAppearance()
+      newDialog.window?.clearFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE)
+    }
+  }
+
+  private val contentView: View
+    /**
+     * Returns the view that will be the root view of the dialog. We are wrapping this in a
+     * FrameLayout because this is the system's way of notifying us that the dialog size has
+     * changed. This has the pleasant side-effect of us not having to preface all Modals with "top:
+     * statusBarHeight", since that margin will be included in the FrameLayout.
+     */
+    get() {
+      val frameLayout = FrameLayout(context)
+      frameLayout.addView(hostView)
+      if (statusBarTranslucent) {
+        frameLayout.systemUiVisibility = SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+      } else {
+        frameLayout.fitsSystemWindows = true
+      }
+      return frameLayout
+    }
+
+  /**
+   * updateProperties will update the properties that do not require us to recreate the dialog
+   * Properties that do require us to recreate the dialog should set mPropertyRequiresNewDialog to
+   * true when the property changes
+   */
+  private fun updateProperties() {
+    val dialog = checkNotNull(dialog) { "dialog must exist when we call updateProperties" }
+    val currentActivity = getCurrentActivity()
+    val window =
+        checkNotNull(dialog.window) { "dialog must have window when we call updateProperties" }
+    if (currentActivity == null || currentActivity.isFinishing || !window.isActive) {
+      // If the activity has disappeared, then we shouldn't update the window associated to the
+      // Dialog.
+      return
+    }
+    val activityWindow = currentActivity.window
+    if (activityWindow != null) {
+      val activityWindowFlags = activityWindow.attributes.flags
+      if ((activityWindowFlags and WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0) {
+        window.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN)
+      } else {
+        window.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN)
+      }
+    }
+
+    if (transparent) {
+      window.clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND)
+    } else {
+      window.setDimAmount(0.5f)
+      window.setFlags(
+          WindowManager.LayoutParams.FLAG_DIM_BEHIND, WindowManager.LayoutParams.FLAG_DIM_BEHIND)
+    }
+  }
+
+  private fun updateSystemAppearance() {
+    val currentActivity = getCurrentActivity() ?: return
+    val dialog = checkNotNull(dialog) { "dialog must exist when we call updateProperties" }
+    val window =
+        checkNotNull(dialog.window) { "dialog must have window when we call updateProperties" }
+    // Modeled after the version check in StatusBarModule.setStyle
+    if (Build.VERSION.SDK_INT > Build.VERSION_CODES.R) {
+      val currentActivityWindow = currentActivity.window
+      val insetsController: WindowInsetsController =
+          checkNotNull(currentActivityWindow.insetsController)
+      val activityAppearance: Int = insetsController.systemBarsAppearance
+
+      val activityLightStatusBars =
+          activityAppearance and WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS
+
+      window.insetsController?.setSystemBarsAppearance(
+          activityLightStatusBars, WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS)
+    } else {
+      val currentActivityWindow = checkNotNull(currentActivity.window)
+      val decorView = currentActivityWindow.decorView
+      decorView.setSystemUiVisibility(decorView.systemUiVisibility)
+    }
+  }
+
+  public fun updateState(width: Int, height: Int) {
+    hostView.updateState(width, height)
+  }
+
+  // This listener is called when the user presses KeyEvent.KEYCODE_BACK
+  // An event is then passed to JS which can either close or not close the Modal by setting the
+  // visible property
+  public fun interface OnRequestCloseListener {
+    public fun onRequestClose(dialog: DialogInterface?)
+  }
+
+  private companion object {
+    private const val TAG = "ReactModalHost"
+  }
+
+  /**
+   * DialogRootViewGroup is the ViewGroup which contains all the children of a Modal. It gets all
+   * child information forwarded from [ReactModalHostView] and uses that to create children. It is
+   * also responsible for acting as a RootView and handling touch events. It does this the same way
+   * as ReactRootView.
+   *
+   * To get layout to work properly, we need to layout all the elements within the Modal as if they
+   * can fill the entire window. To do that, we need to explicitly set the styleWidth and
+   * styleHeight on the LayoutShadowNode to be the window size. This is done through the
+   * UIManagerModule, and will then cause the children to layout as if they can fill the window.
+   */
+  public inner class DialogRootViewGroup(context: Context?) : ReactViewGroup(context), RootView {
+    internal var stateWrapper: StateWrapper? = null
+
+    private var hasAdjustedSize = false
+    private var viewWidth = 0
+    private var viewHeight = 0
+    private val jSTouchDispatcher: JSTouchDispatcher = JSTouchDispatcher(this)
+    private var jSPointerDispatcher: JSPointerDispatcher? = null
+    internal var eventDispatcher: EventDispatcher? = null
+
+    private val reactContext: ThemedReactContext
+      get() = context as ThemedReactContext
+
+    init {
+      if (ReactFeatureFlags.dispatchPointerEvents) {
+        jSPointerDispatcher = JSPointerDispatcher(this)
+      }
+    }
+
+    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
+      super.onSizeChanged(w, h, oldw, oldh)
+      viewWidth = w
+      viewHeight = h
+      updateFirstChildView()
+    }
+
+    private fun updateFirstChildView() {
+      if (childCount > 0) {
+        hasAdjustedSize = false
+        val viewTag: Int = getChildAt(0).id
+        if (stateWrapper != null) {
+          // This will only be called under Fabric
+          updateState(viewWidth, viewHeight)
+        } else {
+          // TODO: T44725185 remove after full migration to Fabric
+          val reactContext: ReactContext = reactContext
+          reactContext.runOnNativeModulesQueueThread(
+              object : GuardedRunnable(reactContext) {
+                override fun runGuarded() {
+                  this@DialogRootViewGroup.reactContext.reactApplicationContext
+                      .getNativeModule(UIManagerModule::class.java)
+                      ?.updateNodeSize(viewTag, viewWidth, viewHeight)
+                }
+              })
+        }
+      } else {
+        hasAdjustedSize = true
+      }
+    }
+
+    @UiThread
+    public fun updateState(width: Int, height: Int) {
+      val realWidth: Float = PixelUtil.toDIPFromPixel(width.toFloat())
+      val realHeight: Float = PixelUtil.toDIPFromPixel(height.toFloat())
+
+      // Check incoming state values. If they're already the correct value, return early to prevent
+      // infinite UpdateState/SetState loop.
+      val currentState: ReadableMap? = stateWrapper?.getStateData()
+      if (currentState != null) {
+        val delta = 0.9f
+        val stateScreenHeight =
+            if (currentState.hasKey("screenHeight")) {
+              currentState.getDouble("screenHeight").toFloat()
+            } else {
+              0f
+            }
+        val stateScreenWidth =
+            if (currentState.hasKey("screenWidth")) {
+              currentState.getDouble("screenWidth").toFloat()
+            } else {
+              0f
+            }
+
+        if (abs((stateScreenWidth - realWidth).toDouble()) < delta &&
+            abs((stateScreenHeight - realHeight).toDouble()) < delta) {
+          return
+        }
+      }
+
+      stateWrapper?.let { sw ->
+        val newStateData: WritableMap = WritableNativeMap()
+        newStateData.putDouble("screenWidth", realWidth.toDouble())
+        newStateData.putDouble("screenHeight", realHeight.toDouble())
+        sw.updateState(newStateData)
+      }
+    }
+
+    override fun addView(child: View, index: Int, params: LayoutParams) {
+      super.addView(child, index, params)
+      if (hasAdjustedSize) {
+        updateFirstChildView()
+      }
+    }
+
+    override fun handleException(t: Throwable) {
+      reactContext.reactApplicationContext.handleException(RuntimeException(t))
+    }
+
+    override fun onInterceptTouchEvent(event: MotionEvent): Boolean {
+      eventDispatcher?.let { eventDispatcher ->
+        jSTouchDispatcher.handleTouchEvent(event, eventDispatcher)
+        jSPointerDispatcher?.handleMotionEvent(event, eventDispatcher, true)
+      }
+      return super.onInterceptTouchEvent(event)
+    }
+
+    @SuppressLint("ClickableViewAccessibility")
+    override fun onTouchEvent(event: MotionEvent): Boolean {
+      eventDispatcher?.let { eventDispatcher ->
+        jSTouchDispatcher.handleTouchEvent(event, eventDispatcher)
+        jSPointerDispatcher?.handleMotionEvent(event, eventDispatcher, false)
+      }
+      super.onTouchEvent(event)
+      // In case when there is no children interested in handling touch event, we return true from
+      // the root view in order to receive subsequent events related to that gesture
+      return true
+    }
+
+    override fun onInterceptHoverEvent(event: MotionEvent): Boolean {
+      eventDispatcher?.let { jSPointerDispatcher?.handleMotionEvent(event, it, true) }
+      return super.onHoverEvent(event)
+    }
+
+    override fun onHoverEvent(event: MotionEvent): Boolean {
+      eventDispatcher?.let { jSPointerDispatcher?.handleMotionEvent(event, it, false) }
+      return super.onHoverEvent(event)
+    }
+
+    override fun onChildStartedNativeGesture(childView: View, ev: MotionEvent) {
+      eventDispatcher?.let { eventDispatcher ->
+        jSTouchDispatcher.onChildStartedNativeGesture(ev, eventDispatcher)
+        jSPointerDispatcher?.onChildStartedNativeGesture(childView, ev, eventDispatcher)
+      }
+    }
+
+    override fun onChildEndedNativeGesture(childView: View, ev: MotionEvent) {
+      eventDispatcher?.let { jSTouchDispatcher.onChildEndedNativeGesture(ev, it) }
+      jSPointerDispatcher?.onChildEndedNativeGesture()
+    }
+
+    override fun requestDisallowInterceptTouchEvent(disallowIntercept: Boolean) {
+      // No-op - override in order to still receive events to onInterceptTouchEvent
+      // even when some other view disallow that
+    }
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/RequestCloseEvent.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/RequestCloseEvent.kt
new file mode 100644
index 0000000..13aa821
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/RequestCloseEvent.kt
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.views.modal
+
+import com.facebook.react.bridge.Arguments
+import com.facebook.react.bridge.WritableMap
+import com.facebook.react.uimanager.common.ViewUtil
+import com.facebook.react.uimanager.events.Event
+
+/** [Event] for dismissing a Dialog. */
+internal class RequestCloseEvent(surfaceId: Int, viewTag: Int) :
+    Event<RequestCloseEvent>(surfaceId, viewTag) {
+
+  @Deprecated(
+      "Do not use this constructor, use the one with explicit surfaceId",
+      ReplaceWith("ShowEvent(surfaceId, viewTag)"))
+  constructor(viewTag: Int) : this(ViewUtil.NO_SURFACE_ID, viewTag)
+
+  override fun getEventName(): String = EVENT_NAME
+
+  override fun getEventData(): WritableMap = Arguments.createMap()
+
+  companion object {
+    const val EVENT_NAME: String = "topRequestClose"
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/ShowEvent.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/ShowEvent.kt
new file mode 100644
index 0000000..20ae8ab
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/modal/ShowEvent.kt
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.views.modal
+
+import com.facebook.react.bridge.Arguments
+import com.facebook.react.bridge.WritableMap
+import com.facebook.react.uimanager.common.ViewUtil
+import com.facebook.react.uimanager.events.Event
+
+/** [Event] for showing a Dialog. */
+internal class ShowEvent(surfaceId: Int, viewTag: Int) : Event<ShowEvent>(surfaceId, viewTag) {
+
+  @Deprecated(
+      "Do not use this constructor, use the one with explicit surfaceId",
+      ReplaceWith("ShowEvent(surfaceId, viewTag)"))
+  constructor(viewTag: Int) : this(ViewUtil.NO_SURFACE_ID, viewTag)
+
+  override fun getEventName(): String = EVENT_NAME
+
+  override fun getEventData(): WritableMap? = Arguments.createMap()
+
+  companion object {
+    const val EVENT_NAME: String = "topShow"
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ReactHorizontalScrollContainerViewManager.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ReactHorizontalScrollContainerViewManager.kt
new file mode 100644
index 0000000..bbe48af
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ReactHorizontalScrollContainerViewManager.kt
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.views.scroll
+
+import com.facebook.react.module.annotations.ReactModule
+import com.facebook.react.uimanager.ThemedReactContext
+import com.facebook.react.views.view.ReactClippingViewManager
+
+/** View manager for {@link ReactHorizontalScrollContainerView} components. */
+@ReactModule(name = ReactHorizontalScrollContainerViewManager.REACT_CLASS)
+public class ReactHorizontalScrollContainerViewManager :
+    ReactClippingViewManager<ReactHorizontalScrollContainerView>() {
+
+  override public fun getName(): String = REACT_CLASS
+
+  override public fun createViewInstance(
+      context: ThemedReactContext
+  ): ReactHorizontalScrollContainerView = ReactHorizontalScrollContainerView(context)
+
+  public companion object {
+    public const val REACT_CLASS: String = "AndroidHorizontalScrollContentView"
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ReactScrollViewHelper.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ReactScrollViewHelper.kt
new file mode 100644
index 0000000..603c47c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ReactScrollViewHelper.kt
@@ -0,0 +1,570 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.views.scroll
+
+import android.animation.Animator
+import android.animation.ValueAnimator
+import android.content.Context
+import android.graphics.Point
+import android.view.View
+import android.view.ViewGroup
+import android.widget.OverScroller
+import androidx.core.view.ViewCompat
+import com.facebook.common.logging.FLog
+import com.facebook.react.bridge.ReactContext
+import com.facebook.react.bridge.WritableMap
+import com.facebook.react.bridge.WritableNativeMap
+import com.facebook.react.common.ReactConstants
+import com.facebook.react.uimanager.PixelUtil.toDIPFromPixel
+import com.facebook.react.uimanager.StateWrapper
+import com.facebook.react.uimanager.UIManagerHelper
+import com.facebook.react.uimanager.common.UIManagerType
+import com.facebook.react.uimanager.common.ViewUtil
+import java.util.Collections
+import java.util.WeakHashMap
+
+/** Helper class that deals with emitting Scroll Events. */
+public object ReactScrollViewHelper {
+  private val TAG = ReactHorizontalScrollView::class.java.simpleName
+  private val DEBUG_MODE = false // ReactBuildConfig.DEBUG
+  private const val CONTENT_OFFSET_LEFT = "contentOffsetLeft"
+  private const val CONTENT_OFFSET_TOP = "contentOffsetTop"
+  private const val SCROLL_AWAY_PADDING_TOP = "scrollAwayPaddingTop"
+
+  public const val MOMENTUM_DELAY: Long = 20
+  public const val OVER_SCROLL_ALWAYS: String = "always"
+  public const val AUTO: String = "auto"
+  public const val OVER_SCROLL_NEVER: String = "never"
+  public const val SNAP_ALIGNMENT_DISABLED: Int = 0
+  public const val SNAP_ALIGNMENT_START: Int = 1
+  public const val SNAP_ALIGNMENT_CENTER: Int = 2
+  public const val SNAP_ALIGNMENT_END: Int = 3
+
+  // Support global native listeners for scroll events
+  private val scrollListeners = Collections.newSetFromMap(WeakHashMap<ScrollListener, Boolean>())
+
+  // If all else fails, this is the hardcoded value in OverScroller.java, in AOSP.
+  // The default is defined here (as of this diff):
+  // https://android.googlesource.com/platform/frameworks/base/+/ae5bcf23b5f0875e455790d6af387184dbd009c1/core/java/android/widget/OverScroller.java#44
+  private var SMOOTH_SCROLL_DURATION = 250
+  private var smoothScrollDurationInitialized = false
+
+  /** Shared by [ReactScrollView] and [ReactHorizontalScrollView]. */
+  @JvmStatic
+  public fun <T> emitScrollEvent(scrollView: T, xVelocity: Float, yVelocity: Float) where
+  T : HasScrollEventThrottle?,
+  T : ViewGroup {
+    emitScrollEvent(scrollView, ScrollEventType.SCROLL, xVelocity, yVelocity)
+  }
+
+  @JvmStatic
+  public fun <T> emitScrollBeginDragEvent(scrollView: T) where
+  T : HasScrollEventThrottle?,
+  T : ViewGroup {
+    emitScrollEvent(scrollView, ScrollEventType.BEGIN_DRAG)
+  }
+
+  @JvmStatic
+  public fun <T> emitScrollEndDragEvent(scrollView: T, xVelocity: Float, yVelocity: Float) where
+  T : HasScrollEventThrottle?,
+  T : ViewGroup {
+    emitScrollEvent(scrollView, ScrollEventType.END_DRAG, xVelocity, yVelocity)
+  }
+
+  @JvmStatic
+  public fun <T> emitScrollMomentumBeginEvent(scrollView: T, xVelocity: Int, yVelocity: Int) where
+  T : HasScrollEventThrottle?,
+  T : ViewGroup {
+    emitScrollEvent(
+        scrollView, ScrollEventType.MOMENTUM_BEGIN, xVelocity.toFloat(), yVelocity.toFloat())
+  }
+
+  @JvmStatic
+  public fun <T> emitScrollMomentumEndEvent(scrollView: T) where
+  T : HasScrollEventThrottle?,
+  T : ViewGroup {
+    emitScrollEvent(scrollView, ScrollEventType.MOMENTUM_END)
+  }
+
+  private fun <T> emitScrollEvent(scrollView: T, scrollEventType: ScrollEventType) where
+  T : HasScrollEventThrottle?,
+  T : ViewGroup {
+    emitScrollEvent(scrollView, scrollEventType, 0f, 0f)
+  }
+
+  private fun <T> emitScrollEvent(
+      scrollView: T,
+      scrollEventType: ScrollEventType,
+      xVelocity: Float,
+      yVelocity: Float,
+      experimental_isSynchronous: Boolean = false,
+  ) where T : HasScrollEventThrottle?, T : ViewGroup {
+    val now = System.currentTimeMillis()
+    // Throttle the scroll event if scrollEventThrottle is set to be equal or more than 17 ms.
+    // We limit the delta to 17ms so that small throttles intended to enable 60fps updates will not
+    // inadvertently filter out any scroll events.
+    if (scrollView.scrollEventThrottle >= Math.max(17, now - scrollView.lastScrollDispatchTime)) {
+      // Scroll events are throttled.
+      return
+    }
+    val contentView = scrollView.getChildAt(0) ?: return
+    for (scrollListener in scrollListeners) {
+      scrollListener.onScroll(scrollView, scrollEventType, xVelocity, yVelocity)
+    }
+    val reactContext = scrollView.context as ReactContext
+    val surfaceId = UIManagerHelper.getSurfaceId(reactContext)
+
+    // It's possible for the EventDispatcher to go away - for example,
+    // if there's a crash initiated from JS and we tap on a ScrollView
+    // around teardown of RN, this will cause a NPE. We can safely ignore
+    // this since the crash is usually a red herring.
+    val eventDispatcher = UIManagerHelper.getEventDispatcherForReactTag(reactContext, scrollView.id)
+    if (eventDispatcher != null) {
+      eventDispatcher.dispatchEvent(
+          ScrollEvent.obtain(
+              surfaceId,
+              scrollView.id,
+              scrollEventType,
+              scrollView.scrollX.toFloat(),
+              scrollView.scrollY.toFloat(),
+              xVelocity,
+              yVelocity,
+              contentView.width,
+              contentView.height,
+              scrollView.width,
+              scrollView.height,
+              experimental_isSynchronous))
+      scrollView.lastScrollDispatchTime = now
+    }
+  }
+
+  /** This is only for Java listeners. onLayout events emitted to JS are handled elsewhere. */
+  @JvmStatic
+  public fun emitLayoutEvent(scrollView: ViewGroup) {
+    for (scrollListener in scrollListeners) {
+      scrollListener.onLayout(scrollView)
+    }
+  }
+
+  @JvmStatic
+  public fun parseOverScrollMode(jsOverScrollMode: String?): Int {
+    return if (jsOverScrollMode == null || jsOverScrollMode == AUTO) {
+      View.OVER_SCROLL_IF_CONTENT_SCROLLS
+    } else if (jsOverScrollMode == OVER_SCROLL_ALWAYS) {
+      View.OVER_SCROLL_ALWAYS
+    } else if (jsOverScrollMode == OVER_SCROLL_NEVER) {
+      View.OVER_SCROLL_NEVER
+    } else {
+      FLog.w(ReactConstants.TAG, "wrong overScrollMode: $jsOverScrollMode")
+      View.OVER_SCROLL_IF_CONTENT_SCROLLS
+    }
+  }
+
+  @JvmStatic
+  public fun parseSnapToAlignment(alignment: String?): Int {
+    return if (alignment == null) {
+      SNAP_ALIGNMENT_DISABLED
+    } else if ("start".equals(alignment, ignoreCase = true)) {
+      SNAP_ALIGNMENT_START
+    } else if ("center".equals(alignment, ignoreCase = true)) {
+      SNAP_ALIGNMENT_CENTER
+    } else if ("end" == alignment) {
+      SNAP_ALIGNMENT_END
+    } else {
+      FLog.w(ReactConstants.TAG, "wrong snap alignment value: $alignment")
+      SNAP_ALIGNMENT_DISABLED
+    }
+  }
+
+  @JvmStatic
+  public fun getDefaultScrollAnimationDuration(context: Context?): Int {
+    if (!smoothScrollDurationInitialized) {
+      smoothScrollDurationInitialized = true
+      try {
+        val overScrollerDurationGetter = OverScrollerDurationGetter(context)
+        SMOOTH_SCROLL_DURATION = overScrollerDurationGetter.scrollAnimationDuration
+      } catch (e: Throwable) {}
+    }
+    return SMOOTH_SCROLL_DURATION
+  }
+
+  /**
+   * Adds a scroll listener.
+   *
+   * Note that you must keep a reference to this scroll listener because this class only keeps a
+   * weak reference to it (to prevent memory leaks). This means that code like `
+   * addScrollListener(new ScrollListener() {...})` won't work, you need to do this instead: `
+   * mScrollListener = new ScrollListener() {...};
+   * ReactScrollViewHelper.addScrollListener(mScrollListener); ` * instead.
+   *
+   * @param listener
+   */
+  @JvmStatic
+  public fun addScrollListener(listener: ScrollListener?) {
+    if (listener != null) {
+      scrollListeners.add(listener)
+    }
+  }
+
+  @JvmStatic
+  public fun removeScrollListener(listener: ScrollListener?) {
+    if (listener != null) {
+      scrollListeners.remove(listener)
+    }
+  }
+
+  /**
+   * Scroll the given view to the location (x, y), with provided initial velocity. This method works
+   * by calculate the "would be" initial velocity with internal friction to move to the point (x,
+   * y), then apply that to the animator.
+   */
+  @JvmStatic
+  public fun <T> smoothScrollTo(scrollView: T, x: Int, y: Int) where
+  T : HasFlingAnimator?,
+  T : HasScrollState?,
+  T : HasStateWrapper?,
+  T : ViewGroup {
+    if (DEBUG_MODE) {
+      FLog.i(TAG, "smoothScrollTo[%d] x %d y %d", scrollView.id, x, y)
+    }
+
+    // Register the listeners for the fling animator if there isn't any
+    val flingAnimator = scrollView.getFlingAnimator()
+    if (flingAnimator.listeners == null || flingAnimator.listeners.size == 0) {
+      registerFlingAnimator<T>(scrollView)
+    }
+    val scrollState = scrollView.reactScrollViewScrollState
+    scrollState.setFinalAnimatedPositionScroll(x, y)
+    val scrollX = scrollView.scrollX
+    val scrollY = scrollView.scrollY
+    // Only one fling animator will be started. For the horizontal scroll view, scrollY will always
+    // be the same to y. This is the same to the vertical scroll view.
+    if (scrollX != x) {
+      scrollView.startFlingAnimator(scrollX, x)
+    }
+    if (scrollY != y) {
+      scrollView.startFlingAnimator(scrollY, y)
+    }
+    updateFabricScrollState<T>(scrollView, x, y)
+  }
+
+  /** Get current position or position after current animation finishes, if any. */
+  @JvmStatic
+  public fun <T> getNextFlingStartValue(
+      scrollView: T,
+      currentValue: Int,
+      postAnimationValue: Int,
+      velocity: Int
+  ): Int where T : HasFlingAnimator?, T : HasScrollState?, T : ViewGroup {
+    val scrollState = scrollView.reactScrollViewScrollState
+    val velocityDirectionMask = if (velocity != 0) velocity / Math.abs(velocity) else 0
+    val isMovingTowardsAnimatedValue =
+        velocityDirectionMask * (postAnimationValue - currentValue) > 0
+
+    // When the fling animation is not finished, or it was canceled and now we are moving towards
+    // the final animated value, we will return the final animated value. This is because follow up
+    // animation should consider the "would be" animated location, so that previous quick small
+    // scrolls are still working.
+    return if (!scrollState.isFinished ||
+        (scrollState.isCanceled && isMovingTowardsAnimatedValue)) {
+      postAnimationValue
+    } else {
+      currentValue
+    }
+  }
+
+  @JvmStatic
+  public fun <T> updateFabricScrollState(scrollView: T) where
+  T : HasFlingAnimator?,
+  T : HasScrollState?,
+  T : HasStateWrapper?,
+  T : ViewGroup {
+    updateFabricScrollState(scrollView, scrollView.scrollX, scrollView.scrollY)
+  }
+
+  /**
+   * Called on any stabilized onScroll change to propagate content offset value to a Shadow Node.
+   */
+  public fun <T> updateFabricScrollState(scrollView: T, scrollX: Int, scrollY: Int) where
+  T : HasFlingAnimator?,
+  T : HasScrollState?,
+  T : HasStateWrapper?,
+  T : ViewGroup {
+    if (DEBUG_MODE) {
+      FLog.i(
+          TAG, "updateFabricScrollState[%d] scrollX %d scrollY %d", scrollView.id, scrollX, scrollY)
+    }
+    if (ViewUtil.getUIManagerType(scrollView.id) == UIManagerType.DEFAULT) {
+      return
+    }
+    val scrollState = scrollView.reactScrollViewScrollState
+    // Dedupe events to reduce JNI traffic
+    if (scrollState.lastStateUpdateScroll.equals(scrollX, scrollY)) {
+      return
+    }
+    scrollState.setLastStateUpdateScroll(scrollX, scrollY)
+    forceUpdateState<T>(scrollView)
+    return
+  }
+
+  @JvmStatic
+  public fun <T> forceUpdateState(scrollView: T) where
+  T : HasFlingAnimator?,
+  T : HasScrollState?,
+  T : HasStateWrapper?,
+  T : ViewGroup {
+    val scrollState = scrollView.reactScrollViewScrollState
+    val scrollAwayPaddingTop = scrollState.scrollAwayPaddingTop
+    val scrollPos = scrollState.lastStateUpdateScroll
+    val scrollX = scrollPos.x
+    val scrollY = scrollPos.y
+    val fabricScrollX: Int
+    val layoutDirection = scrollState.layoutDirection
+    fabricScrollX =
+        if (layoutDirection == View.LAYOUT_DIRECTION_RTL) {
+          // getScrollX returns offset from left even when layout direction is RTL.
+          // The following line calculates offset from right.
+          val child = scrollView.getChildAt(0)
+          val contentWidth = child?.width ?: 0
+          -(contentWidth - scrollX - scrollView.width)
+        } else {
+          scrollX
+        }
+    if (DEBUG_MODE) {
+      FLog.i(
+          TAG,
+          "updateFabricScrollState[%d] scrollX %d scrollY %d fabricScrollX",
+          scrollView.id,
+          scrollX,
+          scrollY,
+          fabricScrollX)
+    }
+    val stateWrapper = scrollView.stateWrapper
+    if (stateWrapper != null) {
+      val newStateData: WritableMap = WritableNativeMap()
+      newStateData.putDouble(CONTENT_OFFSET_LEFT, toDIPFromPixel(scrollX.toFloat()).toDouble())
+      newStateData.putDouble(CONTENT_OFFSET_TOP, toDIPFromPixel(scrollY.toFloat()).toDouble())
+      newStateData.putDouble(
+          SCROLL_AWAY_PADDING_TOP, toDIPFromPixel(scrollAwayPaddingTop.toFloat()).toDouble())
+      stateWrapper.updateState(newStateData)
+    }
+  }
+
+  @JvmStatic
+  public fun <T> updateStateOnScrollChanged(
+      scrollView: T,
+      xVelocity: Float,
+      yVelocity: Float
+  ) where
+  T : HasFlingAnimator?,
+  T : HasScrollEventThrottle?,
+  T : HasScrollState?,
+  T : HasStateWrapper?,
+  T : ViewGroup {
+    updateStateOnScrollChanged(scrollView, xVelocity, yVelocity, false)
+  }
+
+  @JvmStatic
+  public fun <T> updateStateOnScrollChanged(
+      scrollView: T,
+      xVelocity: Float,
+      yVelocity: Float,
+      experimental_synchronous: Boolean,
+  ) where
+  T : HasFlingAnimator?,
+  T : HasScrollEventThrottle?,
+  T : HasScrollState?,
+  T : HasStateWrapper?,
+  T : ViewGroup {
+    // Race an UpdateState with every onScroll. This makes it more likely that, in Fabric,
+    // when JS processes the scroll event, the C++ ShadowNode representation will have a
+    // "more correct" scroll position. It will frequently be /incorrect/ but this decreases
+    // the error as much as possible.
+    updateFabricScrollState(scrollView)
+    emitScrollEvent(
+        scrollView, ScrollEventType.SCROLL, xVelocity, yVelocity, experimental_synchronous)
+  }
+
+  public fun <T> registerFlingAnimator(scrollView: T) where
+  T : HasFlingAnimator?,
+  T : HasScrollState?,
+  T : HasStateWrapper?,
+  T : ViewGroup {
+    scrollView
+        .getFlingAnimator()
+        .addListener(
+            object : Animator.AnimatorListener {
+              override fun onAnimationStart(animator: Animator) {
+                val scrollState = scrollView.reactScrollViewScrollState
+                scrollState.isCanceled = false
+                scrollState.isFinished = false
+              }
+
+              override fun onAnimationEnd(animator: Animator) {
+                scrollView.reactScrollViewScrollState.isFinished = true
+                updateFabricScrollState<T>(scrollView)
+              }
+
+              override fun onAnimationCancel(animator: Animator) {
+                scrollView.reactScrollViewScrollState.isCanceled = true
+              }
+
+              override fun onAnimationRepeat(animator: Animator) = Unit
+            })
+  }
+
+  @JvmStatic
+  public fun <T> predictFinalScrollPosition(
+      scrollView: T,
+      velocityX: Int,
+      velocityY: Int,
+      maximumOffsetX: Int,
+      maximumOffsetY: Int
+  ): Point where T : HasFlingAnimator?, T : HasScrollState?, T : ViewGroup {
+    val scrollState = scrollView.reactScrollViewScrollState
+    // ScrollView can *only* scroll for 250ms when using smoothScrollTo and there's
+    // no way to customize the scroll duration. So, we create a temporary OverScroller
+    // so we can predict where a fling would land and snap to nearby that point.
+    val scroller = OverScroller(scrollView.context)
+    scroller.setFriction(1.0f - scrollState.decelerationRate)
+
+    // predict where a fling would end up so we can scroll to the nearest snap offset
+    val width =
+        (scrollView.width -
+            ViewCompat.getPaddingStart(scrollView) -
+            ViewCompat.getPaddingEnd(scrollView))
+    val height = scrollView.height - scrollView.paddingBottom - scrollView.paddingTop
+    val finalAnimatedPositionScroll = scrollState.finalAnimatedPositionScroll
+    scroller.fling(
+        getNextFlingStartValue<T>(
+            scrollView, scrollView.scrollX, finalAnimatedPositionScroll.x, velocityX), // startX
+        getNextFlingStartValue<T>(
+            scrollView, scrollView.scrollY, finalAnimatedPositionScroll.y, velocityY), // startY
+        velocityX, // velocityX
+        velocityY, // velocityY
+        0, // minX
+        maximumOffsetX, // maxX
+        0, // minY
+        maximumOffsetY, // maxY
+        width / 2, // overX
+        height / 2 // overY
+        )
+    return Point(scroller.finalX, scroller.finalY)
+  }
+
+  public interface ScrollListener {
+    public fun onScroll(
+        scrollView: ViewGroup?,
+        scrollEventType: ScrollEventType?,
+        xVelocity: Float,
+        yVelocity: Float
+    )
+
+    public fun onLayout(scrollView: ViewGroup?)
+  }
+
+  public interface HasStateWrapper {
+    public val stateWrapper: StateWrapper?
+  }
+
+  private class OverScrollerDurationGetter internal constructor(context: Context?) :
+      OverScroller(context) {
+    // This is the default in AOSP, hardcoded in OverScroller.java.
+    private var currentScrollAnimationDuration = 250
+    val scrollAnimationDuration: Int
+      get() {
+        // If startScroll is called without a duration, OverScroller will call `startScroll(x, y,
+        // dx,
+        // dy, duration)` with the default duration.
+        super.startScroll(0, 0, 0, 0)
+        return currentScrollAnimationDuration
+      }
+
+    override fun startScroll(startX: Int, startY: Int, dx: Int, dy: Int, duration: Int) {
+      currentScrollAnimationDuration = duration
+    }
+  }
+
+  public class ReactScrollViewScrollState(
+      /**
+       * Get the layout direction. Can be either scrollView.LAYOUT_DIRECTION_RTL (1) or
+       * scrollView.LAYOUT_DIRECTION_LTR (0). If the value is -1, it means unknown layout.
+       */
+      public val layoutDirection: Int
+  ) {
+
+    /** Get the position after current animation is finished */
+    public val finalAnimatedPositionScroll: Point = Point()
+    /** Get the padding on the top for nav bar */
+    public var scrollAwayPaddingTop: Int = 0
+    /** Get the Fabric state of last scroll position */
+    public val lastStateUpdateScroll: Point = Point(0, 0)
+    /** Get true if the previous animation was canceled */
+    public var isCanceled: Boolean = false
+    /** Get true if previous animation was finished */
+    public var isFinished: Boolean = true
+    /** Get true if previous animation was finished */
+    public var decelerationRate: Float = 0.985f
+
+    /** Set the final scroll position after scrolling animation is finished */
+    public fun setFinalAnimatedPositionScroll(
+        finalAnimatedPositionScrollX: Int,
+        finalAnimatedPositionScrollY: Int
+    ): ReactScrollViewScrollState {
+      finalAnimatedPositionScroll[finalAnimatedPositionScrollX] = finalAnimatedPositionScrollY
+      return this
+    }
+
+    /** Set the Fabric state of last scroll position */
+    public fun setLastStateUpdateScroll(
+        lastStateUpdateScrollX: Int,
+        lastStateUpdateScrollY: Int
+    ): ReactScrollViewScrollState {
+      lastStateUpdateScroll[lastStateUpdateScrollX] = lastStateUpdateScrollY
+      return this
+    }
+  }
+
+  public interface HasScrollState {
+    /** Get the scroll state for the current ScrollView */
+    public val reactScrollViewScrollState: ReactScrollViewScrollState
+  }
+
+  public interface HasFlingAnimator {
+    /**
+     * Start the fling animator that the ScrollView has to go from the start position to end
+     * position.
+     */
+    public fun startFlingAnimator(start: Int, end: Int)
+
+    /** Get the fling animator that is reused for the ScrollView to handle fling animation. */
+    public fun getFlingAnimator(): ValueAnimator
+
+    /** Get the fling distance with current velocity for prediction */
+    public fun getFlingExtrapolatedDistance(velocity: Int): Int
+  }
+
+  public interface HasScrollEventThrottle {
+    /** Get the scroll event throttle in ms. */
+    /**
+     * Set the scroll event throttle in ms. This number is used to throttle the scroll events. The
+     * default value is zero, which means the scroll events are sent with no throttle.
+     */
+    public var scrollEventThrottle: Int
+
+    /** Get the scroll view dispatch time for throttling */
+    /** Set the scroll view's last dispatch time for throttling */
+    public var lastScrollDispatchTime: Long
+  }
+
+  public interface HasSmoothScroll {
+    public fun reactSmoothScrollTo(x: Int, y: Int)
+
+    public fun scrollToPreservingMomentum(x: Int, y: Int)
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ScrollEvent.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ScrollEvent.kt
new file mode 100644
index 0000000..1f9fafd
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ScrollEvent.kt
@@ -0,0 +1,174 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.views.scroll
+
+import androidx.core.util.Pools.SynchronizedPool
+import com.facebook.infer.annotation.Assertions
+import com.facebook.react.bridge.Arguments
+import com.facebook.react.bridge.ReactSoftExceptionLogger
+import com.facebook.react.bridge.WritableMap
+import com.facebook.react.uimanager.PixelUtil.toDIPFromPixel
+import com.facebook.react.uimanager.common.ViewUtil
+import com.facebook.react.uimanager.events.Event
+
+/** A event dispatched from a ScrollView scrolling. */
+public class ScrollEvent private constructor() : Event<ScrollEvent>() {
+  private var scrollX = 0f
+  private var scrollY = 0f
+  private var xVelocity = 0f
+  private var yVelocity = 0f
+  private var contentWidth = 0
+  private var contentHeight = 0
+  private var scrollViewWidth = 0
+  private var scrollViewHeight = 0
+  private var scrollEventType: ScrollEventType? = null
+  private var experimental_isSynchronous = false
+
+  override fun onDispose() {
+    try {
+      EVENTS_POOL.release(this)
+    } catch (e: IllegalStateException) {
+      // This exception can be thrown when an event is double-released.
+      // This is a problem but won't cause user-visible impact, so it's okay to fail silently.
+      ReactSoftExceptionLogger.logSoftException(TAG, e)
+    }
+  }
+
+  private fun init(
+      surfaceId: Int,
+      viewTag: Int,
+      scrollEventType: ScrollEventType?,
+      scrollX: Float,
+      scrollY: Float,
+      xVelocity: Float,
+      yVelocity: Float,
+      contentWidth: Int,
+      contentHeight: Int,
+      scrollViewWidth: Int,
+      scrollViewHeight: Int,
+      experimental_isSynchronous: Boolean,
+  ) {
+    super.init(surfaceId, viewTag)
+    this.scrollEventType = scrollEventType
+    this.scrollX = scrollX
+    this.scrollY = scrollY
+    this.xVelocity = xVelocity
+    this.yVelocity = yVelocity
+    this.contentWidth = contentWidth
+    this.contentHeight = contentHeight
+    this.scrollViewWidth = scrollViewWidth
+    this.scrollViewHeight = scrollViewHeight
+    this.experimental_isSynchronous = experimental_isSynchronous
+  }
+
+  override fun getEventName(): String =
+      ScrollEventType.getJSEventName(Assertions.assertNotNull(scrollEventType))
+
+  override fun canCoalesce(): Boolean = scrollEventType == ScrollEventType.SCROLL
+
+  override fun experimental_isSynchronous(): Boolean {
+    return experimental_isSynchronous
+  }
+
+  override fun getEventData(): WritableMap {
+    val contentInset = Arguments.createMap()
+    contentInset.putDouble("top", 0.0)
+    contentInset.putDouble("bottom", 0.0)
+    contentInset.putDouble("left", 0.0)
+    contentInset.putDouble("right", 0.0)
+    val contentOffset = Arguments.createMap()
+    contentOffset.putDouble("x", toDIPFromPixel(scrollX).toDouble())
+    contentOffset.putDouble("y", toDIPFromPixel(scrollY).toDouble())
+    val contentSize = Arguments.createMap()
+    contentSize.putDouble("width", toDIPFromPixel(contentWidth.toFloat()).toDouble())
+    contentSize.putDouble("height", toDIPFromPixel(contentHeight.toFloat()).toDouble())
+    val layoutMeasurement = Arguments.createMap()
+    layoutMeasurement.putDouble("width", toDIPFromPixel(scrollViewWidth.toFloat()).toDouble())
+    layoutMeasurement.putDouble("height", toDIPFromPixel(scrollViewHeight.toFloat()).toDouble())
+    val velocity = Arguments.createMap()
+    velocity.putDouble("x", xVelocity.toDouble())
+    velocity.putDouble("y", yVelocity.toDouble())
+    val event = Arguments.createMap()
+    event.putMap("contentInset", contentInset)
+    event.putMap("contentOffset", contentOffset)
+    event.putMap("contentSize", contentSize)
+    event.putMap("layoutMeasurement", layoutMeasurement)
+    event.putMap("velocity", velocity)
+    event.putInt("target", viewTag)
+    event.putBoolean("responderIgnoreScroll", true)
+    return event
+  }
+
+  public companion object {
+    private val TAG = ScrollEvent::class.java.simpleName
+    private val EVENTS_POOL = SynchronizedPool<ScrollEvent>(3)
+
+    @JvmStatic
+    public fun obtain(
+        surfaceId: Int,
+        viewTag: Int,
+        scrollEventType: ScrollEventType?,
+        scrollX: Float,
+        scrollY: Float,
+        xVelocity: Float,
+        yVelocity: Float,
+        contentWidth: Int,
+        contentHeight: Int,
+        scrollViewWidth: Int,
+        scrollViewHeight: Int,
+        experimental_isSynchronous: Boolean,
+    ): ScrollEvent =
+        (EVENTS_POOL.acquire() ?: ScrollEvent()).apply {
+          init(
+              surfaceId,
+              viewTag,
+              scrollEventType,
+              scrollX,
+              scrollY,
+              xVelocity,
+              yVelocity,
+              contentWidth,
+              contentHeight,
+              scrollViewWidth,
+              scrollViewHeight,
+              experimental_isSynchronous)
+        }
+
+    @Deprecated(
+        "Use the obtain version that explicitly takes surfaceId as an argument",
+        ReplaceWith(
+            "obtain(surfaceId, viewTag, scrollEventType, scrollX, scrollY, xVelocity, yVelocity, contentWidth, contentHeight, scrollViewWidth, scrollViewHeight)"))
+    @JvmStatic
+    public fun obtain(
+        viewTag: Int,
+        scrollEventType: ScrollEventType?,
+        scrollX: Float,
+        scrollY: Float,
+        xVelocity: Float,
+        yVelocity: Float,
+        contentWidth: Int,
+        contentHeight: Int,
+        scrollViewWidth: Int,
+        scrollViewHeight: Int
+    ): ScrollEvent =
+        obtain(
+            ViewUtil.NO_SURFACE_ID,
+            viewTag,
+            scrollEventType,
+            scrollX,
+            scrollY,
+            xVelocity,
+            yVelocity,
+            contentWidth,
+            contentHeight,
+            scrollViewWidth,
+            scrollViewHeight,
+            false,
+        )
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ScrollEventType.kt b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ScrollEventType.kt
new file mode 100644
index 0000000..94d8d82
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/java/com/facebook/react/views/scroll/ScrollEventType.kt
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.views.scroll
+
+/** Scroll event types that JS module RCTEventEmitter can understand */
+public enum class ScrollEventType {
+  BEGIN_DRAG,
+  END_DRAG,
+  SCROLL,
+  MOMENTUM_BEGIN,
+  MOMENTUM_END;
+
+  public companion object {
+    @JvmStatic
+    public fun getJSEventName(type: ScrollEventType): String =
+        when (type) {
+          BEGIN_DRAG -> "topScrollBeginDrag"
+          END_DRAG -> "topScrollEndDrag"
+          SCROLL -> "topScroll"
+          MOMENTUM_BEGIN -> "topMomentumScrollBegin"
+          MOMENTUM_END -> "topMomentumScrollEnd"
+        }
+  }
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/CMakeLists.txt
new file mode 100644
index 0000000..488cd4a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/CMakeLists.txt
@@ -0,0 +1,225 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+project(ReactAndroid)
+
+# Convert input paths to CMake format (with forward slashes)
+file(TO_CMAKE_PATH "${REACT_ANDROID_DIR}" REACT_ANDROID_DIR)
+file(TO_CMAKE_PATH "${REACT_BUILD_DIR}" REACT_BUILD_DIR)
+file(TO_CMAKE_PATH "${REACT_COMMON_DIR}" REACT_COMMON_DIR)
+
+# If you have ccache installed, we're going to honor it.
+find_program(CCACHE_FOUND ccache)
+if(CCACHE_FOUND)
+  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
+  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
+endif(CCACHE_FOUND)
+
+# Make sure every shared lib includes a .note.gnu.build-id header
+add_link_options(-Wl,--build-id)
+add_compile_options(-Wall -Werror -std=c++20)
+
+function(add_react_android_subdir relative_path)
+  add_subdirectory(${REACT_ANDROID_DIR}/${relative_path} ReactAndroid/${relative_path})
+endfunction()
+
+function(add_react_build_subdir relative_path)
+  add_subdirectory(${REACT_BUILD_DIR}/${relative_path} build/${relative_path})
+endfunction()
+
+function(add_react_third_party_ndk_subdir relative_path)
+  add_react_build_subdir(third-party-ndk/${relative_path})
+endfunction()
+
+function(add_react_common_subdir relative_path)
+  add_subdirectory(${REACT_COMMON_DIR}/${relative_path} ReactCommon/${relative_path})
+endfunction()
+
+# Third-party prefabs
+find_package(hermes-engine REQUIRED CONFIG)
+find_package(fbjni REQUIRED CONFIG)
+add_library(fbjni ALIAS fbjni::fbjni)
+
+# Third-party downloaded targets
+add_react_third_party_ndk_subdir(glog)
+add_react_third_party_ndk_subdir(boost)
+add_react_third_party_ndk_subdir(double-conversion)
+add_react_third_party_ndk_subdir(fmt)
+add_react_third_party_ndk_subdir(folly)
+add_react_third_party_ndk_subdir(jsc)
+add_react_third_party_ndk_subdir(googletest)
+
+# Common targets
+add_react_common_subdir(yoga)
+add_react_common_subdir(runtimeexecutor)
+add_react_common_subdir(reactperflogger)
+add_react_common_subdir(logger)
+add_react_common_subdir(jsiexecutor)
+add_react_common_subdir(cxxreact)
+add_react_common_subdir(jsc)
+add_react_common_subdir(jsi)
+add_react_common_subdir(callinvoker)
+add_react_common_subdir(jsinspector-modern)
+add_react_common_subdir(hermes/executor)
+add_react_common_subdir(hermes/inspector-modern)
+add_react_common_subdir(react/renderer/runtimescheduler)
+add_react_common_subdir(react/debug)
+add_react_common_subdir(react/config)
+add_react_common_subdir(react/featureflags)
+add_react_common_subdir(react/performance/timeline)
+add_react_common_subdir(react/renderer/animations)
+add_react_common_subdir(react/renderer/attributedstring)
+add_react_common_subdir(react/renderer/componentregistry)
+add_react_common_subdir(react/renderer/mounting)
+add_react_common_subdir(react/renderer/scheduler)
+add_react_common_subdir(react/renderer/telemetry)
+add_react_common_subdir(react/renderer/uimanager)
+add_react_common_subdir(react/renderer/core)
+add_react_common_subdir(react/renderer/consistency)
+add_react_common_subdir(react/renderer/uimanager/consistency)
+add_react_common_subdir(react/renderer/dom)
+add_react_common_subdir(react/renderer/element)
+add_react_common_subdir(react/renderer/graphics)
+add_react_common_subdir(react/renderer/debug)
+add_react_common_subdir(react/renderer/imagemanager)
+add_react_common_subdir(react/renderer/components/view)
+add_react_common_subdir(react/renderer/components/switch)
+add_react_common_subdir(react/renderer/components/textinput)
+add_react_common_subdir(react/renderer/components/progressbar)
+add_react_common_subdir(react/renderer/components/root)
+add_react_common_subdir(react/renderer/components/image)
+add_react_common_subdir(react/renderer/components/legacyviewmanagerinterop)
+add_react_common_subdir(react/renderer/componentregistry/native)
+add_react_common_subdir(react/renderer/components/text)
+add_react_common_subdir(react/renderer/components/unimplementedview)
+add_react_common_subdir(react/renderer/components/modal)
+add_react_common_subdir(react/renderer/components/scrollview)
+add_react_common_subdir(react/renderer/leakchecker)
+add_react_common_subdir(react/renderer/observers/events)
+add_react_common_subdir(react/renderer/textlayoutmanager)
+add_react_common_subdir(react/utils)
+add_react_common_subdir(react/bridging)
+add_react_common_subdir(react/renderer/mapbuffer)
+add_react_common_subdir(react/nativemodule/core)
+add_react_common_subdir(react/nativemodule/defaults)
+add_react_common_subdir(react/nativemodule/dom)
+add_react_common_subdir(react/nativemodule/featureflags)
+add_react_common_subdir(react/nativemodule/microtasks)
+add_react_common_subdir(react/nativemodule/idlecallbacks)
+add_react_common_subdir(jserrorhandler)
+add_react_common_subdir(react/runtime)
+add_react_common_subdir(react/runtime/hermes)
+add_react_common_subdir(react/runtime/nativeviewconfig)
+
+# ReactAndroid JNI targets
+add_react_build_subdir(generated/source/codegen/jni)
+add_react_android_subdir(src/main/jni/first-party/fb)
+add_react_android_subdir(src/main/jni/first-party/fbgloginit)
+add_react_android_subdir(src/main/jni/first-party/yogajni)
+add_react_android_subdir(src/main/jni/react/jni)
+add_react_android_subdir(src/main/jni/react/reactperflogger)
+add_react_android_subdir(src/main/jni/react/jscexecutor)
+add_react_android_subdir(src/main/jni/react/turbomodule)
+add_react_android_subdir(src/main/jni/react/uimanager)
+add_react_android_subdir(src/main/jni/react/mapbuffer)
+add_react_android_subdir(src/main/jni/react/reactnativeblob)
+add_react_android_subdir(src/main/jni/react/fabric)
+add_react_android_subdir(src/main/jni/react/featureflags)
+add_react_android_subdir(src/main/jni/react/newarchdefaults)
+add_react_android_subdir(src/main/jni/react/hermes/reactexecutor)
+add_react_android_subdir(src/main/jni/react/hermes/instrumentation/)
+add_react_android_subdir(src/main/jni/react/runtime/cxxreactpackage)
+add_react_android_subdir(src/main/jni/react/runtime/jni)
+add_react_android_subdir(src/main/jni/react/runtime/hermes/jni)
+add_react_android_subdir(src/main/jni/react/runtime/jsc/jni)
+add_react_android_subdir(src/main/jni/react/devsupport)
+
+# GTest dependencies
+add_executable(reactnative_unittest
+  ${REACT_COMMON_DIR}/cxxreact/tests/jsarg_helpers.cpp
+  ${REACT_COMMON_DIR}/cxxreact/tests/jsbigstring.cpp
+  ${REACT_COMMON_DIR}/cxxreact/tests/methodcall.cpp
+  ${REACT_COMMON_DIR}/cxxreact/tests/RecoverableErrorTest.cpp
+  ${REACT_COMMON_DIR}/react/bridging/tests/BridgingTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/attributedstring/tests/AttributedStringBoxTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/components/image/tests/ImageTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/components/root/tests/RootShadowNodeTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/components/scrollview/tests/ScrollViewTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/components/view/tests/LayoutTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/components/view/tests/ViewTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/core/tests/DynamicPropsUtilitiesTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/core/tests/EventQueueProcessorTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/core/tests/FindNodeAtPointTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/core/tests/LayoutableShadowNodeTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/core/tests/PrimitivesTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/core/tests/RawPropsTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/core/tests/ShadowNodeFamilyTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/debug/tests/DebugStringConvertibleTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/element/tests/ElementTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/graphics/tests/GraphicsTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/graphics/tests/TransformTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/imagemanager/tests/ImageManagerTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/mapbuffer/tests/MapBufferTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/mounting/tests/StackingContextTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/mounting/tests/StateReconciliationTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/runtimescheduler/tests/RuntimeSchedulerTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/runtimescheduler/tests/SchedulerPriorityTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/telemetry/tests/TransactionTelemetryTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/textlayoutmanager/tests/TextLayoutManagerTest.cpp
+  ${REACT_COMMON_DIR}/react/renderer/uimanager/tests/FabricUIManagerTest.cpp
+
+  ########## (COMPILE BUT FAIL ON ASSERTS) ###########
+  # ${REACT_COMMON_DIR}/react/renderer/animations/tests/LayoutAnimationTest.cpp
+  # ${REACT_COMMON_DIR}/react/renderer/mounting/tests/MountingTest.cpp
+  # ${REACT_COMMON_DIR}/react/renderer/mounting/tests/ShadowTreeLifeCycleTest.cpp
+
+  ########## (COMPILE BUT FAIL WITH RUNTIME EXCEPTIONS) ###########
+  # ${REACT_COMMON_DIR}/hermes/inspector-modern/chrome/tests/ConnectionDemuxTests.cpp
+
+  ########## (DO NOT COMPILE) ###########
+  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ShadowNodeTest.cpp
+  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ConcreteShadowNodeTest.cpp
+  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ComponentDescriptorTest.cpp
+  )
+  target_compile_options(reactnative_unittest
+    PRIVATE
+    -Wall
+    -Werror
+    -fexceptions
+    -frtti
+    -std=c++20
+    -DHERMES_ENABLE_DEBUGGER)
+
+  target_link_libraries(reactnative_unittest
+  folly_runtime
+  glog
+  glog_init
+  gtest_main
+  hermes-engine::libhermes
+  hermes_inspector_modern
+  jsi
+  react_cxxreact
+  react_codegen_rncore
+  react_debug
+  react_render_animations
+  react_render_attributedstring
+  react_render_core
+  react_render_debug
+  react_render_element
+  react_render_graphics
+  react_render_mapbuffer
+  react_render_mounting
+  react_render_textlayoutmanager
+  react_render_uimanager
+  react_utils
+  rrc_modal
+  rrc_scrollview
+  rrc_text
+  rrc_view
+  yoga
+)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/CMakeLists.txt
new file mode 100644
index 0000000..572123b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/CMakeLists.txt
@@ -0,0 +1,31 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_library(fb
+        STATIC
+        assert.cpp
+        log.cpp)
+
+add_compile_options(
+        -DLOG_TAG=\"libfb\"
+        -DDISABLE_CPUCAP
+        -DDISABLE_XPLAT
+        -fexceptions
+        -frtti
+        -Wno-unused-parameter
+        -Wno-error=unused-but-set-variable
+        -DHAVE_POSIX_CLOCKS
+)
+if(NOT ${CMAKE_BUILD_TYPE} MATCHES Debug)
+        add_compile_options(-DNDEBUG)
+endif()
+
+# Yogacore needs to link towards android and log from the NDK libs
+target_link_libraries(fb dl android log)
+
+target_include_directories(fb PUBLIC include)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/assert.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/assert.cpp
new file mode 100644
index 0000000..3ffd43a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/assert.cpp
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <stdio.h>
+#include <cstdarg>
+
+#include <fb/assert.h>
+#include <fb/log.h>
+
+namespace facebook {
+
+#define ASSERT_BUF_SIZE 4096
+static char sAssertBuf[ASSERT_BUF_SIZE];
+static AssertHandler gAssertHandler;
+
+void assertInternal(const char* formatstr...) {
+  va_list va_args;
+  va_start(va_args, formatstr);
+  vsnprintf(sAssertBuf, sizeof(sAssertBuf), formatstr, va_args);
+  va_end(va_args);
+  if (gAssertHandler != NULL) {
+    gAssertHandler(sAssertBuf);
+  }
+  FBLOG(LOG_FATAL, "fbassert", "%s", sAssertBuf);
+  // crash at this specific address so that we can find our crashes easier
+  *(int*)0xdeadb00c = 0;
+  // let the compiler know we won't reach the end of the function
+  __builtin_unreachable();
+}
+
+void setAssertHandler(AssertHandler assertHandler) {
+  gAssertHandler = assertHandler;
+}
+
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/ALog.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/ALog.h
new file mode 100644
index 0000000..8d87f05
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/ALog.h
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+/** @file ALog.h
+ *
+ *  Very simple android only logging. Define LOG_TAG to enable the macros.
+ */
+
+#pragma once
+
+#ifdef __ANDROID__
+
+#include <android/log.h>
+
+namespace facebook {
+namespace alog {
+
+template <typename... ARGS>
+inline void
+log(int level, const char* tag, const char* msg, ARGS... args) noexcept {
+  __android_log_print(level, tag, msg, args...);
+}
+
+template <typename... ARGS>
+inline void log(int level, const char* tag, const char* msg) noexcept {
+  __android_log_write(level, tag, msg);
+}
+
+template <typename... ARGS>
+inline void logv(const char* tag, const char* msg, ARGS... args) noexcept {
+  log(ANDROID_LOG_VERBOSE, tag, msg, args...);
+}
+
+template <typename... ARGS>
+inline void logd(const char* tag, const char* msg, ARGS... args) noexcept {
+  log(ANDROID_LOG_DEBUG, tag, msg, args...);
+}
+
+template <typename... ARGS>
+inline void logi(const char* tag, const char* msg, ARGS... args) noexcept {
+  log(ANDROID_LOG_INFO, tag, msg, args...);
+}
+
+template <typename... ARGS>
+inline void logw(const char* tag, const char* msg, ARGS... args) noexcept {
+  log(ANDROID_LOG_WARN, tag, msg, args...);
+}
+
+template <typename... ARGS>
+inline void loge(const char* tag, const char* msg, ARGS... args) noexcept {
+  log(ANDROID_LOG_ERROR, tag, msg, args...);
+}
+
+template <typename... ARGS>
+inline void logf(const char* tag, const char* msg, ARGS... args) noexcept {
+  log(ANDROID_LOG_FATAL, tag, msg, args...);
+}
+
+#ifdef LOG_TAG
+#define ALOGV(...) ::facebook::alog::logv(LOG_TAG, __VA_ARGS__)
+#define ALOGD(...) ::facebook::alog::logd(LOG_TAG, __VA_ARGS__)
+#define ALOGI(...) ::facebook::alog::logi(LOG_TAG, __VA_ARGS__)
+#define ALOGW(...) ::facebook::alog::logw(LOG_TAG, __VA_ARGS__)
+#define ALOGE(...) ::facebook::alog::loge(LOG_TAG, __VA_ARGS__)
+#define ALOGF(...) ::facebook::alog::logf(LOG_TAG, __VA_ARGS__)
+#endif
+
+} // namespace alog
+} // namespace facebook
+
+#else
+#define ALOGV(...) ((void)0)
+#define ALOGD(...) ((void)0)
+#define ALOGI(...) ((void)0)
+#define ALOGW(...) ((void)0)
+#define ALOGE(...) ((void)0)
+#define ALOGF(...) ((void)0)
+#endif
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Build.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Build.h
new file mode 100644
index 0000000..94916b1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Build.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <stdlib.h>
+
+#if defined(__ANDROID__)
+#include <sys/system_properties.h>
+#endif
+
+namespace facebook {
+namespace build {
+
+struct Build {
+  static int getAndroidSdk() {
+    static auto android_sdk = ([] {
+      char sdk_version_str[PROP_VALUE_MAX];
+      __system_property_get("ro.build.version.sdk", sdk_version_str);
+      return atoi(sdk_version_str);
+    })();
+    return android_sdk;
+  }
+};
+
+} // namespace build
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Countable.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Countable.h
new file mode 100644
index 0000000..6ba2439
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Countable.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+#include <fb/RefPtr.h>
+#include <fb/assert.h>
+#include <fb/noncopyable.h>
+#include <fb/nonmovable.h>
+#include <atomic>
+
+namespace facebook {
+
+class Countable : public noncopyable, public nonmovable {
+ public:
+  // RefPtr expects refcount to start at 0
+  Countable() : m_refcount(0) {}
+  virtual ~Countable() {
+    FBASSERT(m_refcount == 0);
+  }
+
+ private:
+  void ref() {
+    ++m_refcount;
+  }
+
+  void unref() {
+    if (0 == --m_refcount) {
+      delete this;
+    }
+  }
+
+  bool hasOnlyOneRef() const {
+    return m_refcount == 1;
+  }
+
+  template <typename T>
+  friend class RefPtr;
+  std::atomic<int> m_refcount;
+};
+
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Doxyfile b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Doxyfile
new file mode 100644
index 0000000..8b4df6a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Doxyfile
@@ -0,0 +1,18 @@
+PROJECT_NAME           = "Facebook JNI"
+PROJECT_BRIEF          = "Helper library to provide safe and convenient access to JNI with very low overhead"
+JAVADOC_AUTOBRIEF      = YES
+EXTRACT_ALL            = YES
+RECURSIVE              = YES
+EXCLUDE                = tests Asserts.h Countable.h GlobalReference.h LocalReference.h LocalString.h Registration.h WeakReference.h jni_helpers.h Environment.h
+EXCLUDE_PATTERNS       = *-inl.h *.cpp
+GENERATE_HTML          = YES
+GENERATE_LATEX         = NO
+ENABLE_PREPROCESSING   = YES
+HIDE_UNDOC_MEMBERS     = YES
+HIDE_SCOPE_NAMES       = YES
+HIDE_FRIEND_COMPOUNDS  = YES
+HIDE_UNDOC_CLASSES     = YES
+SHOW_INCLUDE_FILES     = NO
+PREDEFINED             = LOG_TAG=fbjni
+EXAMPLE_PATH           = samples
+#ENABLED_SECTIONS       = INTERNAL
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Environment.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Environment.h
new file mode 100644
index 0000000..f6f5318
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/Environment.h
@@ -0,0 +1,93 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+#include <jni.h>
+#include <functional>
+#include <string>
+
+#include <fb/visibility.h>
+
+namespace facebook {
+namespace jni {
+
+namespace internal {
+struct CacheEnvTag {};
+} // namespace internal
+
+// Keeps a thread-local reference to the current thread's JNIEnv.
+struct Environment {
+  // May be null if this thread isn't attached to the JVM
+  FBEXPORT static JNIEnv* current();
+  static void initialize(JavaVM* vm);
+
+  // There are subtle issues with calling the next functions directly. It is
+  // much better to always use a ThreadScope to manage attaching/detaching for
+  // you.
+  FBEXPORT static JNIEnv* ensureCurrentThreadIsAttached();
+  FBEXPORT static void detachCurrentThread();
+};
+
+/**
+ * RAII Object that attaches a thread to the JVM. Failing to detach from a
+ * thread before it exits will cause a crash, as will calling Detach an extra
+ * time, and this guard class helps keep that straight. In addition, it
+ * remembers whether it performed the attach or not, so it is safe to nest it
+ * with itself or with non-fbjni code that manages the attachment correctly.
+ *
+ * Potential concerns:
+ *  - Attaching to the JVM is fast (~100us on MotoG), but ideally you would
+ * attach while the app is not busy.
+ *  - Having a thread detach at arbitrary points is not safe in Dalvik; you need
+ * to be sure that there is no Java code on the current stack or you run the
+ * risk of a crash like: ERROR: detaching thread with interp frames (count=18)
+ *    (More detail at
+ * https://groups.google.com/forum/#!topic/android-ndk/2H8z5grNqjo) ThreadScope
+ * won't do a detach if the thread was already attached before the guard is
+ *    instantiated, but there's probably some usage that could trip this up.
+ *  - Newly attached C++ threads only get the bootstrap class loader -- i.e.
+ * java language classes, not any of our application's classes. This will be
+ * different behavior than threads that were initiated on the Java side. A
+ * workaround is to pass a global reference for a class or instance to the new
+ * thread; this bypasses the need for the class loader. (See
+ * http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/invocation.html#attach_current_thread)
+ *    If you need access to the application's classes, you can use
+ * ThreadScope::WithClassLoader.
+ */
+class FBEXPORT ThreadScope {
+ public:
+  ThreadScope();
+  ThreadScope(ThreadScope&) = delete;
+  ThreadScope(ThreadScope&&) = default;
+  ThreadScope& operator=(ThreadScope&) = delete;
+  ThreadScope& operator=(ThreadScope&&) = delete;
+  ~ThreadScope();
+
+  /**
+   * This runs the closure in a scope with fbjni's classloader. This should be
+   * the same classloader as the rest of the application and thus anything
+   * running in the closure will have access to the same classes as in a normal
+   * java-create thread.
+   */
+  static void WithClassLoader(std::function<void()>&& runnable);
+
+  static void OnLoad();
+
+  // This constructor is only used internally by fbjni.
+  ThreadScope(JNIEnv*, internal::CacheEnvTag);
+
+ private:
+  friend struct Environment;
+  ThreadScope* previous_;
+  // If the JNIEnv* is set, it is guaranteed to be valid at least through the
+  // lifetime of this ThreadScope. The only case where that guarantee can be
+  // made is when there is a java frame in the stack below this.
+  JNIEnv* env_;
+  bool attachedWithThisScope_;
+};
+} // namespace jni
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/ProgramLocation.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/ProgramLocation.h
new file mode 100644
index 0000000..45c4ca5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/ProgramLocation.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+#include <cstring>
+#include <sstream>
+#include <string>
+
+namespace facebook {
+
+#define FROM_HERE facebook::ProgramLocation(__FUNCTION__, __FILE__, __LINE__)
+
+class ProgramLocation {
+ public:
+  ProgramLocation()
+      : m_functionName("Unspecified"),
+        m_fileName("Unspecified"),
+        m_lineNumber(0) {}
+
+  ProgramLocation(const char* functionName, const char* fileName, int line)
+      : m_functionName(functionName),
+        m_fileName(fileName),
+        m_lineNumber(line) {}
+
+  const char* functionName() const {
+    return m_functionName;
+  }
+  const char* fileName() const {
+    return m_fileName;
+  }
+  int lineNumber() const {
+    return m_lineNumber;
+  }
+
+  std::string asFormattedString() const {
+    std::stringstream str;
+    str << "Function " << m_functionName << " in file " << m_fileName << ":"
+        << m_lineNumber;
+    return str.str();
+  }
+
+  bool operator==(const ProgramLocation& other) const {
+    // Assumes that the strings are static
+    return (m_functionName == other.m_functionName) &&
+        (m_fileName == other.m_fileName) && m_lineNumber == other.m_lineNumber;
+  }
+
+ private:
+  const char* m_functionName;
+  const char* m_fileName;
+  int m_lineNumber;
+};
+
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/RefPtr.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/RefPtr.h
new file mode 100644
index 0000000..c7acd78
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/RefPtr.h
@@ -0,0 +1,266 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+#include <fb/assert.h>
+#include <utility>
+
+namespace facebook {
+
+// Reference counting smart pointer. This is designed to work with the
+// Countable class or other implementations in the future. It is designed in a
+// way to be both efficient and difficult to misuse. Typical usage is very
+// simple once you learn the patterns (and the compiler will help!):
+//
+// By default, the internal pointer is null.
+//   RefPtr<Foo> ref;
+//
+// Object creation requires explicit construction:
+//   RefPtr<Foo> ref = createNew<Foo>(...);
+//
+// Or if the constructor is not public:
+//   RefPtr<Foo> ref = adoptRef(new Foo(...));
+//
+// But you can implicitly create from nullptr:
+//   RefPtr<Foo> maybeRef = cond ? ref : nullptr;
+//
+// Move/Copy Construction/Assignment are straightforward:
+//   RefPtr<Foo> ref2 = ref;
+//   ref = std::move(ref2);
+//
+// Destruction automatically drops the RefPtr's reference as expected.
+//
+// Upcasting is implicit but downcasting requires an explicit cast:
+//   struct Bar : public Foo {};
+//   RefPtr<Bar> barRef = static_cast<RefPtr<Bar>>(ref);
+//   ref = barRef;
+//
+template <class T>
+class RefPtr {
+ public:
+  constexpr RefPtr() : m_ptr(nullptr) {}
+
+  // Allow implicit construction from a pointer only from nullptr
+  constexpr RefPtr(std::nullptr_t ptr) : m_ptr(nullptr) {}
+
+  RefPtr(const RefPtr<T>& ref) : m_ptr(ref.m_ptr) {
+    refIfNecessary(m_ptr);
+  }
+
+  // Only allow implicit upcasts. A downcast will result in a compile error
+  // unless you use static_cast (which will end up invoking the explicit
+  // operator below).
+  template <typename U>
+  RefPtr(
+      const RefPtr<U>& ref,
+      typename std::enable_if<std::is_base_of<T, U>::value, U>::type* = nullptr)
+      : m_ptr(ref.get()) {
+    refIfNecessary(m_ptr);
+  }
+
+  RefPtr(RefPtr<T>&& ref) : m_ptr(nullptr) {
+    *this = std::move(ref);
+  }
+
+  // Only allow implicit upcasts. A downcast will result in a compile error
+  // unless you use static_cast (which will end up invoking the explicit
+  // operator below).
+  template <typename U>
+  RefPtr(
+      RefPtr<U>&& ref,
+      typename std::enable_if<std::is_base_of<T, U>::value, U>::type* = nullptr)
+      : m_ptr(nullptr) {
+    *this = std::move(ref);
+  }
+
+  ~RefPtr() {
+    unrefIfNecessary(m_ptr);
+    m_ptr = nullptr;
+  }
+
+  RefPtr<T>& operator=(const RefPtr<T>& ref) {
+    if (m_ptr != ref.m_ptr) {
+      unrefIfNecessary(m_ptr);
+      m_ptr = ref.m_ptr;
+      refIfNecessary(m_ptr);
+    }
+    return *this;
+  }
+
+  // The STL assumes rvalue references are unique and for simplicity's sake, we
+  // make the same assumption here, that &ref != this.
+  RefPtr<T>& operator=(RefPtr<T>&& ref) {
+    unrefIfNecessary(m_ptr);
+    m_ptr = ref.m_ptr;
+    ref.m_ptr = nullptr;
+    return *this;
+  }
+
+  template <typename U>
+  RefPtr<T>& operator=(RefPtr<U>&& ref) {
+    unrefIfNecessary(m_ptr);
+    m_ptr = ref.m_ptr;
+    ref.m_ptr = nullptr;
+    return *this;
+  }
+
+  void reset() {
+    unrefIfNecessary(m_ptr);
+    m_ptr = nullptr;
+  }
+
+  T* get() const {
+    return m_ptr;
+  }
+
+  T* operator->() const {
+    return m_ptr;
+  }
+
+  T& operator*() const {
+    return *m_ptr;
+  }
+
+  template <typename U>
+  explicit operator RefPtr<U>() const;
+
+  explicit operator bool() const {
+    return m_ptr ? true : false;
+  }
+
+  bool isTheLastRef() const {
+    FBASSERT(m_ptr);
+    return m_ptr->hasOnlyOneRef();
+  }
+
+  // Creates a strong reference from a raw pointer, assuming that is already
+  // referenced from some other RefPtr. This should be used sparingly.
+  static inline RefPtr<T> assumeAlreadyReffed(T* ptr) {
+    return RefPtr<T>(ptr, ConstructionMode::External);
+  }
+
+  // Creates a strong reference from a raw pointer, assuming that it points to a
+  // freshly-created object. See the documentation for RefPtr for usage.
+  static inline RefPtr<T> adoptRef(T* ptr) {
+    return RefPtr<T>(ptr, ConstructionMode::Adopted);
+  }
+
+ private:
+  enum class ConstructionMode { Adopted, External };
+
+  RefPtr(T* ptr, ConstructionMode mode) : m_ptr(ptr) {
+    FBASSERTMSGF(
+        ptr,
+        "Got null pointer in %s construction mode",
+        mode == ConstructionMode::Adopted ? "adopted" : "external");
+    ptr->ref();
+    if (mode == ConstructionMode::Adopted) {
+      FBASSERT(ptr->hasOnlyOneRef());
+    }
+  }
+
+  static inline void refIfNecessary(T* ptr) {
+    if (ptr) {
+      ptr->ref();
+    }
+  }
+  static inline void unrefIfNecessary(T* ptr) {
+    if (ptr) {
+      ptr->unref();
+    }
+  }
+
+  template <typename U>
+  friend class RefPtr;
+
+  T* m_ptr;
+};
+
+// Creates a strong reference from a raw pointer, assuming that is already
+// referenced from some other RefPtr and that it is non-null. This should be
+// used sparingly.
+template <typename T>
+static inline RefPtr<T> assumeAlreadyReffed(T* ptr) {
+  return RefPtr<T>::assumeAlreadyReffed(ptr);
+}
+
+// As above, but tolerant of nullptr.
+template <typename T>
+static inline RefPtr<T> assumeAlreadyReffedOrNull(T* ptr) {
+  return ptr ? RefPtr<T>::assumeAlreadyReffed(ptr) : nullptr;
+}
+
+// Creates a strong reference from a raw pointer, assuming that it points to a
+// freshly-created object. See the documentation for RefPtr for usage.
+template <typename T>
+static inline RefPtr<T> adoptRef(T* ptr) {
+  return RefPtr<T>::adoptRef(ptr);
+}
+
+template <typename T, typename... Args>
+static inline RefPtr<T> createNew(Args&&... arguments) {
+  return RefPtr<T>::adoptRef(new T(std::forward<Args>(arguments)...));
+}
+
+template <typename T>
+template <typename U>
+RefPtr<T>::operator RefPtr<U>() const {
+  static_assert(std::is_base_of<T, U>::value, "Invalid static cast");
+  return assumeAlreadyReffedOrNull<U>(static_cast<U*>(m_ptr));
+}
+
+template <typename T, typename U>
+inline bool operator==(const RefPtr<T>& a, const RefPtr<U>& b) {
+  return a.get() == b.get();
+}
+
+template <typename T, typename U>
+inline bool operator!=(const RefPtr<T>& a, const RefPtr<U>& b) {
+  return a.get() != b.get();
+}
+
+template <typename T, typename U>
+inline bool operator==(const RefPtr<T>& ref, U* ptr) {
+  return ref.get() == ptr;
+}
+
+template <typename T, typename U>
+inline bool operator!=(const RefPtr<T>& ref, U* ptr) {
+  return ref.get() != ptr;
+}
+
+template <typename T, typename U>
+inline bool operator==(U* ptr, const RefPtr<T>& ref) {
+  return ref.get() == ptr;
+}
+
+template <typename T, typename U>
+inline bool operator!=(U* ptr, const RefPtr<T>& ref) {
+  return ref.get() != ptr;
+}
+
+template <typename T>
+inline bool operator==(const RefPtr<T>& ref, std::nullptr_t ptr) {
+  return ref.get() == ptr;
+}
+
+template <typename T>
+inline bool operator!=(const RefPtr<T>& ref, std::nullptr_t ptr) {
+  return ref.get() != ptr;
+}
+
+template <typename T>
+inline bool operator==(std::nullptr_t ptr, const RefPtr<T>& ref) {
+  return ref.get() == ptr;
+}
+
+template <typename T>
+inline bool operator!=(std::nullptr_t ptr, const RefPtr<T>& ref) {
+  return ref.get() != ptr;
+}
+
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/StaticInitialized.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/StaticInitialized.h
new file mode 100644
index 0000000..4139b42
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/StaticInitialized.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+#include <fb/assert.h>
+#include <utility>
+
+namespace facebook {
+
+// Class that lets you declare a global but does not add a static constructor
+// to the binary. Eventually I'd like to have this auto-initialize in a
+// multithreaded environment but for now it's easiest just to use manual
+// initialization.
+template <typename T>
+class StaticInitialized {
+ public:
+  constexpr StaticInitialized() : m_instance(nullptr) {}
+
+  template <typename... Args>
+  void initialize(Args&&... arguments) {
+    FBASSERT(!m_instance);
+    m_instance = new T(std::forward<Args>(arguments)...);
+  }
+
+  T* operator->() const {
+    return m_instance;
+  }
+
+ private:
+  T* m_instance;
+};
+
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/ThreadLocal.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/ThreadLocal.h
new file mode 100644
index 0000000..acd5d24
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/ThreadLocal.h
@@ -0,0 +1,112 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <errno.h>
+#include <pthread.h>
+
+#include <fb/assert.h>
+
+namespace facebook {
+
+///////////////////////////////////////////////////////////////////////////////
+
+/**
+ * A thread-local object is a "global" object within a thread. This is useful
+ * for writing apartment-threaded code, where nothing is actullay shared
+ * between different threads (hence no locking) but those variables are not
+ * on stack in local scope. To use it, just do something like this,
+ *
+ *   ThreadLocal<MyClass> static_object;
+ *     static_object->data_ = ...;
+ *     static_object->doSomething();
+ *
+ *   ThreadLocal<int> static_number;
+ *     int value = *static_number;
+ *
+ * So, syntax-wise it's similar to pointers. T can be primitive types, and if
+ * it's a class, there has to be a default constructor.
+ */
+template <typename T>
+class ThreadLocal {
+ public:
+  /**
+   * Constructor that has to be called from a thread-neutral place.
+   */
+  ThreadLocal() : m_key(0), m_cleanup(OnThreadExit) {
+    initialize();
+  }
+
+  /**
+   * As above but with a custom cleanup function
+   */
+  typedef void (*CleanupFunction)(void* obj);
+  explicit ThreadLocal(CleanupFunction cleanup) : m_key(0), m_cleanup(cleanup) {
+    FBASSERT(cleanup);
+    initialize();
+  }
+
+  /**
+   * Access object's member or method through this operator overload.
+   */
+  T* operator->() const {
+    return get();
+  }
+
+  T& operator*() const {
+    return *get();
+  }
+
+  T* get() const {
+    return (T*)pthread_getspecific(m_key);
+  }
+
+  T* release() {
+    T* obj = get();
+    pthread_setspecific(m_key, NULL);
+    return obj;
+  }
+
+  void reset(T* other = NULL) {
+    T* old = (T*)pthread_getspecific(m_key);
+    if (old != other) {
+      FBASSERT(m_cleanup);
+      m_cleanup(old);
+      pthread_setspecific(m_key, other);
+    }
+  }
+
+ private:
+  void initialize() {
+    int ret = pthread_key_create(&m_key, m_cleanup);
+    if (ret != 0) {
+      const char* msg = "(unknown error)";
+      switch (ret) {
+        case EAGAIN:
+          msg = "PTHREAD_KEYS_MAX (1024) is exceeded";
+          break;
+        case ENOMEM:
+          msg = "Out-of-memory";
+          break;
+      }
+      (void)msg;
+      FBASSERTMSGF(0, "pthread_key_create failed: %d %s", ret, msg);
+    }
+  }
+
+  static void OnThreadExit(void* obj) {
+    if (NULL != obj) {
+      delete (T*)obj;
+    }
+  }
+
+  pthread_key_t m_key;
+  CleanupFunction m_cleanup;
+};
+
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/assert.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/assert.h
new file mode 100644
index 0000000..25914cb
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/assert.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#ifndef FBASSERT_H
+#define FBASSERT_H
+
+#include <fb/visibility.h>
+
+namespace facebook {
+#define ENABLE_FBASSERT 1
+
+#if ENABLE_FBASSERT
+#define FBASSERTMSGF(expr, msg, ...)                                       \
+  !(expr) ? facebook::assertInternal(                                      \
+                "Assert (%s:%d): " msg, __FILE__, __LINE__, ##__VA_ARGS__) \
+          : (void)0
+#else
+#define FBASSERTMSGF(expr, msg, ...)
+#endif // ENABLE_FBASSERT
+
+#define FBASSERT(expr) FBASSERTMSGF(expr, "%s", #expr)
+
+#define FBCRASH(msg, ...)   \
+  facebook::assertInternal( \
+      "Fatal error (%s:%d): " msg, __FILE__, __LINE__, ##__VA_ARGS__)
+#define FBUNREACHABLE()     \
+  facebook::assertInternal( \
+      "This code should be unreachable (%s:%d)", __FILE__, __LINE__)
+
+FBEXPORT void assertInternal(const char* formatstr, ...)
+    __attribute__((noreturn));
+
+// This allows storing the assert message before the current process terminates
+// due to a crash
+typedef void (*AssertHandler)(const char* message);
+void setAssertHandler(AssertHandler assertHandler);
+
+} // namespace facebook
+#endif // FBASSERT_H
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/log.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/log.h
new file mode 100644
index 0000000..0185c7c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/log.h
@@ -0,0 +1,350 @@
+/*
+ * Copyright (C) 2005 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/*
+ * FB Wrapper for logging functions.
+ *
+ * The android logging API uses the macro "LOG()" for its logic, which means
+ * that it conflicts with random other places that use LOG for their own
+ * purposes and doesn't work right half the places you include it
+ *
+ * FBLOG uses exactly the same semantics (FBLOGD for debug etc) but because of
+ * the FB prefix it's strictly better. FBLOGV also gets stripped out based on
+ * whether NDEBUG is set, but can be overridden by FBLOG_NDEBUG
+ *
+ * Most of the rest is a copy of <cutils/log.h> with minor changes.
+ */
+
+//
+// C/C++ logging functions.  See the logging documentation for API details.
+//
+// We'd like these to be available from C code (in case we import some from
+// somewhere), so this has a C interface.
+//
+// The output will be correct when the log file is shared between multiple
+// threads and/or multiple processes so long as the operating system
+// supports O_APPEND.  These calls have mutex-protected data structures
+// and so are NOT reentrant.  Do not use LOG in a signal handler.
+//
+#pragma once
+
+#include <fb/visibility.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifdef ANDROID
+#include <android/log.h>
+#else
+// These declarations are needed for our internal use even on non-Android
+// builds.
+// (they are borrowed from <android/log.h>)
+
+/*
+ * Android log priority values, in ascending priority order.
+ */
+typedef enum android_LogPriority {
+  ANDROID_LOG_UNKNOWN = 0,
+  ANDROID_LOG_DEFAULT, /* only for SetMinPriority() */
+  ANDROID_LOG_VERBOSE,
+  ANDROID_LOG_DEBUG,
+  ANDROID_LOG_INFO,
+  ANDROID_LOG_WARN,
+  ANDROID_LOG_ERROR,
+  ANDROID_LOG_FATAL,
+  ANDROID_LOG_SILENT, /* only for SetMinPriority(); must be last */
+} android_LogPriority;
+
+/*
+ * Send a simple string to the log.
+ */
+int __android_log_write(int prio, const char* tag, const char* text);
+
+/*
+ * Send a formatted string to the log, used like printf(fmt,...)
+ */
+int __android_log_print(int prio, const char* tag, const char* fmt, ...)
+#if defined(__GNUC__)
+    __attribute__((format(printf, 3, 4)))
+#endif
+    ;
+
+#endif
+
+// ---------------------------------------------------------------------
+
+/*
+ * Normally we strip FBLOGV (VERBOSE messages) from release builds.
+ * You can modify this (for example with "#define FBLOG_NDEBUG 0"
+ * at the top of your source file) to change that behavior.
+ */
+#ifndef FBLOG_NDEBUG
+#ifdef NDEBUG
+#define FBLOG_NDEBUG 1
+#else
+#define FBLOG_NDEBUG 0
+#endif
+#endif
+
+/*
+ * This is the local tag used for the following simplified
+ * logging macros.  You can change this preprocessor definition
+ * before using the other macros to change the tag.
+ */
+#ifndef LOG_TAG
+#define LOG_TAG NULL
+#endif
+
+// ---------------------------------------------------------------------
+
+/*
+ * Simplified macro to send a verbose log message using the current LOG_TAG.
+ */
+#ifndef FBLOGV
+#if FBLOG_NDEBUG
+#define FBLOGV(...) ((void)0)
+#else
+#define FBLOGV(...) ((void)FBLOG(LOG_VERBOSE, LOG_TAG, __VA_ARGS__))
+#endif
+#endif
+
+#define CONDITION(cond) (__builtin_expect((cond) != 0, 0))
+
+#ifndef FBLOGV_IF
+#if FBLOG_NDEBUG
+#define FBLOGV_IF(cond, ...) ((void)0)
+#else
+#define FBLOGV_IF(cond, ...)                                            \
+  ((CONDITION(cond)) ? ((void)FBLOG(LOG_VERBOSE, LOG_TAG, __VA_ARGS__)) \
+                     : (void)0)
+#endif
+#endif
+
+/*
+ * Simplified macro to send a debug log message using the current LOG_TAG.
+ */
+#ifndef FBLOGD
+#define FBLOGD(...) ((void)FBLOG(LOG_DEBUG, LOG_TAG, __VA_ARGS__))
+#endif
+
+#ifndef FBLOGD_IF
+#define FBLOGD_IF(cond, ...) \
+  ((CONDITION(cond)) ? ((void)FBLOG(LOG_DEBUG, LOG_TAG, __VA_ARGS__)) : (void)0)
+#endif
+
+/*
+ * Simplified macro to send an info log message using the current LOG_TAG.
+ */
+#ifndef FBLOGI
+#define FBLOGI(...) ((void)FBLOG(LOG_INFO, LOG_TAG, __VA_ARGS__))
+#endif
+
+#ifndef FBLOGI_IF
+#define FBLOGI_IF(cond, ...) \
+  ((CONDITION(cond)) ? ((void)FBLOG(LOG_INFO, LOG_TAG, __VA_ARGS__)) : (void)0)
+#endif
+
+/*
+ * Simplified macro to send a warning log message using the current LOG_TAG.
+ */
+#ifndef FBLOGW
+#define FBLOGW(...) ((void)FBLOG(LOG_WARN, LOG_TAG, __VA_ARGS__))
+#endif
+
+#ifndef FBLOGW_IF
+#define FBLOGW_IF(cond, ...) \
+  ((CONDITION(cond)) ? ((void)FBLOG(LOG_WARN, LOG_TAG, __VA_ARGS__)) : (void)0)
+#endif
+
+/*
+ * Simplified macro to send an error log message using the current LOG_TAG.
+ */
+#ifndef FBLOGE
+#define FBLOGE(...) ((void)FBLOG(LOG_ERROR, LOG_TAG, __VA_ARGS__))
+#endif
+
+#ifndef FBLOGE_IF
+#define FBLOGE_IF(cond, ...) \
+  ((CONDITION(cond)) ? ((void)FBLOG(LOG_ERROR, LOG_TAG, __VA_ARGS__)) : (void)0)
+#endif
+
+// ---------------------------------------------------------------------
+
+/*
+ * Conditional based on whether the current LOG_TAG is enabled at
+ * verbose priority.
+ */
+#ifndef IF_FBLOGV
+#if FBLOG_NDEBUG
+#define IF_FBLOGV() if (false)
+#else
+#define IF_FBLOGV() IF_FBLOG(LOG_VERBOSE, LOG_TAG)
+#endif
+#endif
+
+/*
+ * Conditional based on whether the current LOG_TAG is enabled at
+ * debug priority.
+ */
+#ifndef IF_FBLOGD
+#define IF_FBLOGD() IF_FBLOG(LOG_DEBUG, LOG_TAG)
+#endif
+
+/*
+ * Conditional based on whether the current LOG_TAG is enabled at
+ * info priority.
+ */
+#ifndef IF_FBLOGI
+#define IF_FBLOGI() IF_FBLOG(LOG_INFO, LOG_TAG)
+#endif
+
+/*
+ * Conditional based on whether the current LOG_TAG is enabled at
+ * warn priority.
+ */
+#ifndef IF_FBLOGW
+#define IF_FBLOGW() IF_FBLOG(LOG_WARN, LOG_TAG)
+#endif
+
+/*
+ * Conditional based on whether the current LOG_TAG is enabled at
+ * error priority.
+ */
+#ifndef IF_FBLOGE
+#define IF_FBLOGE() IF_FBLOG(LOG_ERROR, LOG_TAG)
+#endif
+
+// ---------------------------------------------------------------------
+
+/*
+ * Log a fatal error.  If the given condition fails, this stops program
+ * execution like a normal assertion, but also generating the given message.
+ * It is NOT stripped from release builds.  Note that the condition test
+ * is -inverted- from the normal assert() semantics.
+ */
+#define FBLOG_ALWAYS_FATAL_IF(cond, ...)                                   \
+  ((CONDITION(cond)) ? ((void)fb_printAssert(#cond, LOG_TAG, __VA_ARGS__)) \
+                     : (void)0)
+
+#define FBLOG_ALWAYS_FATAL(...) \
+  (((void)fb_printAssert(NULL, LOG_TAG, __VA_ARGS__)))
+
+/*
+ * Versions of LOG_ALWAYS_FATAL_IF and LOG_ALWAYS_FATAL that
+ * are stripped out of release builds.
+ */
+#if FBLOG_NDEBUG
+
+#define FBLOG_FATAL_IF(cond, ...) ((void)0)
+#define FBLOG_FATAL(...) ((void)0)
+
+#else
+
+#define FBLOG_FATAL_IF(cond, ...) FBLOG_ALWAYS_FATAL_IF(cond, __VA_ARGS__)
+#define FBLOG_FATAL(...) FBLOG_ALWAYS_FATAL(__VA_ARGS__)
+
+#endif
+
+/*
+ * Assertion that generates a log message when the assertion fails.
+ * Stripped out of release builds.  Uses the current LOG_TAG.
+ */
+#define FBLOG_ASSERT(cond, ...) FBLOG_FATAL_IF(!(cond), __VA_ARGS__)
+// #define LOG_ASSERT(cond) LOG_FATAL_IF(!(cond), "Assertion failed: " #cond)
+
+// ---------------------------------------------------------------------
+
+/*
+ * Basic log message macro.
+ *
+ * Example:
+ *  FBLOG(LOG_WARN, NULL, "Failed with error %d", errno);
+ *
+ * The second argument may be NULL or "" to indicate the "global" tag.
+ */
+#ifndef FBLOG
+#define FBLOG(priority, tag, ...) \
+  FBLOG_PRI(ANDROID_##priority, tag, __VA_ARGS__)
+#endif
+
+#ifndef FBLOG_BY_DELIMS
+#define FBLOG_BY_DELIMS(priority, tag, delims, msg, ...) \
+  logPrintByDelims(ANDROID_##priority, tag, delims, msg, ##__VA_ARGS__)
+#endif
+
+/*
+ * Log macro that allows you to specify a number for the priority.
+ */
+#ifndef FBLOG_PRI
+#define FBLOG_PRI(priority, tag, ...) fb_printLog(priority, tag, __VA_ARGS__)
+#endif
+
+/*
+ * Log macro that allows you to pass in a varargs ("args" is a va_list).
+ */
+#ifndef FBLOG_PRI_VA
+#define FBLOG_PRI_VA(priority, tag, fmt, args) \
+  fb_vprintLog(priority, NULL, tag, fmt, args)
+#endif
+
+/*
+ * Conditional given a desired logging priority and tag.
+ */
+#ifndef IF_FBLOG
+#define IF_FBLOG(priority, tag) if (fb_testLog(ANDROID_##priority, tag))
+#endif
+
+typedef void (*LogHandler)(int priority, const char* tag, const char* message);
+FBEXPORT void setLogHandler(LogHandler logHandler);
+
+/*
+ * ===========================================================================
+ *
+ * The stuff in the rest of this file should not be used directly.
+ */
+FBEXPORT int fb_printLog(int prio, const char* tag, const char* fmt, ...)
+#if defined(__GNUC__)
+    __attribute__((format(printf, 3, 4)))
+#endif
+    ;
+
+#define fb_vprintLog(prio, cond, tag, fmt...) \
+  __android_log_vprint(prio, tag, fmt)
+
+#define fb_printAssert(cond, tag, fmt...) __android_log_assert(cond, tag, fmt)
+
+#define fb_writeLog(prio, tag, text) __android_log_write(prio, tag, text)
+
+#define fb_bWriteLog(tag, payload, len) __android_log_bwrite(tag, payload, len)
+#define fb_btWriteLog(tag, type, payload, len) \
+  __android_log_btwrite(tag, type, payload, len)
+
+#define fb_testLog(prio, tag) (1)
+
+/*
+ * FB extensions
+ */
+void logPrintByDelims(
+    int priority,
+    const char* tag,
+    const char* delims,
+    const char* msg,
+    ...);
+
+#ifdef __cplusplus
+}
+#endif
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/noncopyable.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/noncopyable.h
new file mode 100644
index 0000000..329ff5d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/noncopyable.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+namespace facebook {
+
+struct noncopyable {
+  noncopyable(const noncopyable&) = delete;
+  noncopyable& operator=(const noncopyable&) = delete;
+
+ protected:
+  noncopyable() = default;
+};
+
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/nonmovable.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/nonmovable.h
new file mode 100644
index 0000000..856b2f4
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/nonmovable.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+namespace facebook {
+
+struct nonmovable {
+  nonmovable(nonmovable&&) = delete;
+  nonmovable& operator=(nonmovable&&) = delete;
+
+ protected:
+  nonmovable() = default;
+};
+
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/visibility.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/visibility.h
new file mode 100644
index 0000000..f44ef60
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/include/fb/visibility.h
@@ -0,0 +1,10 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#define FBEXPORT __attribute__((visibility("default")))
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/log.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/log.cpp
new file mode 100644
index 0000000..8e9aa14
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fb/log.cpp
@@ -0,0 +1,102 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fb/log.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <string.h>
+
+#define LOG_BUFFER_SIZE 4096
+static LogHandler gLogHandler;
+
+void setLogHandler(LogHandler logHandler) {
+  gLogHandler = logHandler;
+}
+
+int fb_printLog(int prio, const char* tag, const char* fmt, ...) {
+  char logBuffer[LOG_BUFFER_SIZE];
+
+  va_list va_args;
+  va_start(va_args, fmt);
+  int result = vsnprintf(logBuffer, sizeof(logBuffer), fmt, va_args);
+  va_end(va_args);
+  if (gLogHandler != NULL) {
+    gLogHandler(prio, tag, logBuffer);
+  }
+  __android_log_write(prio, tag, logBuffer);
+  return result;
+}
+
+void logPrintByDelims(
+    int priority,
+    const char* tag,
+    const char* delims,
+    const char* msg,
+    ...) {
+  va_list ap;
+  char buf[32768];
+  char* context;
+  char* tok;
+
+  va_start(ap, msg);
+  vsnprintf(buf, sizeof(buf), msg, ap);
+  va_end(ap);
+
+  tok = strtok_r(buf, delims, &context);
+
+  if (!tok) {
+    return;
+  }
+
+  do {
+    __android_log_write(priority, tag, tok);
+  } while ((tok = strtok_r(NULL, delims, &context)));
+}
+
+#ifndef ANDROID
+
+// Implementations of the basic android logging functions for non-android
+// platforms.
+
+static char logTagChar(int prio) {
+  switch (prio) {
+    default:
+    case ANDROID_LOG_UNKNOWN:
+    case ANDROID_LOG_DEFAULT:
+    case ANDROID_LOG_SILENT:
+      return ' ';
+    case ANDROID_LOG_VERBOSE:
+      return 'V';
+    case ANDROID_LOG_DEBUG:
+      return 'D';
+    case ANDROID_LOG_INFO:
+      return 'I';
+    case ANDROID_LOG_WARN:
+      return 'W';
+    case ANDROID_LOG_ERROR:
+      return 'E';
+    case ANDROID_LOG_FATAL:
+      return 'F';
+  }
+}
+
+int __android_log_write(int prio, const char* tag, const char* text) {
+  return fprintf(stderr, "[%c/%.16s] %s\n", logTagChar(prio), tag, text);
+}
+
+int __android_log_print(int prio, const char* tag, const char* fmt, ...) {
+  va_list ap;
+  va_start(ap, fmt);
+
+  int res = fprintf(stderr, "[%c/%.16s] ", logTagChar(prio), tag);
+  res += vfprintf(stderr, "%s\n", ap);
+
+  va_end(ap);
+  return res;
+}
+
+#endif
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fbgloginit/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fbgloginit/CMakeLists.txt
new file mode 100644
index 0000000..194f607
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fbgloginit/CMakeLists.txt
@@ -0,0 +1,15 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-fexceptions -fno-omit-frame-pointer)
+
+add_library(glog_init STATIC glog_init.cpp)
+
+target_include_directories(glog_init PUBLIC .)
+
+target_link_libraries(glog_init log glog)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fbgloginit/fb/glog_init.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fbgloginit/fb/glog_init.h
new file mode 100644
index 0000000..9b48573
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fbgloginit/fb/glog_init.h
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <string>
+
+namespace facebook {
+namespace gloginit {
+
+void initialize(const char* tag = "ReactNativeJNI");
+
+}
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fbgloginit/glog_init.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fbgloginit/glog_init.cpp
new file mode 100644
index 0000000..f12d226
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/fbgloginit/glog_init.cpp
@@ -0,0 +1,141 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "fb/glog_init.h"
+
+#include <iostream>
+#include <mutex>
+#include <stdexcept>
+
+#include <glog/logging.h>
+
+#ifdef __ANDROID__
+
+#include <android/log.h>
+
+static int toAndroidLevel(google::LogSeverity severity) {
+  switch (severity) {
+    case google::GLOG_INFO:
+      return ANDROID_LOG_INFO;
+    case google::GLOG_WARNING:
+      return ANDROID_LOG_WARN;
+    case google::GLOG_ERROR:
+      return ANDROID_LOG_ERROR;
+    case google::GLOG_FATAL:
+      return ANDROID_LOG_FATAL;
+    default:
+      return ANDROID_LOG_FATAL;
+  }
+}
+
+/**
+ * Sends GLog output to adb logcat.
+ */
+class LogcatSink : public google::LogSink {
+ public:
+  void send(
+      google::LogSeverity severity,
+      const char* full_filename,
+      const char* base_filename,
+      int line,
+      const struct ::tm* tm_time,
+      const char* message,
+      size_t message_len) override {
+    auto level = toAndroidLevel(severity);
+    __android_log_print(
+        level, base_filename, "%.*s", (int)message_len, message);
+  }
+};
+
+/**
+ * Sends GLog output to adb logcat.
+ */
+class TaggedLogcatSink : public google::LogSink {
+  const std::string tag_;
+
+ public:
+  TaggedLogcatSink(const std::string& tag) : tag_{tag} {}
+
+  void send(
+      google::LogSeverity severity,
+      const char* full_filename,
+      const char* base_filename,
+      int line,
+      const struct ::tm* tm_time,
+      const char* message,
+      size_t message_len) override {
+    auto level = toAndroidLevel(severity);
+    __android_log_print(level, tag_.c_str(), "%.*s", (int)message_len, message);
+  }
+};
+
+static google::LogSink* make_sink(const std::string& tag) {
+  if (tag.empty()) {
+    return new LogcatSink{};
+  } else {
+    return new TaggedLogcatSink{tag};
+  }
+}
+
+static void sendGlogOutputToLogcat(const char* tag) {
+  google::AddLogSink(make_sink(tag));
+
+  // Disable logging to files
+  for (auto i = 0; i < google::NUM_SEVERITIES; ++i) {
+    google::SetLogDestination(i, "");
+  }
+}
+
+#endif // __ANDROID__
+
+static void
+lastResort(const char* tag, const char* msg, const char* arg = nullptr) {
+#ifdef __ANDROID__
+  if (!arg) {
+    __android_log_write(ANDROID_LOG_ERROR, tag, msg);
+  } else {
+    __android_log_print(ANDROID_LOG_ERROR, tag, "%s: %s", msg, arg);
+  }
+#else
+  std::cerr << msg;
+  if (arg) {
+    std::cerr << ": " << arg;
+  }
+  std::cerr << std::endl;
+#endif
+}
+
+namespace facebook {
+namespace gloginit {
+
+void initialize(const char* tag) {
+  static std::once_flag flag{};
+  static auto failed = false;
+
+  std::call_once(flag, [tag] {
+    try {
+      google::InitGoogleLogging(tag);
+
+#ifdef __ANDROID__
+      sendGlogOutputToLogcat(tag);
+#endif
+    } catch (std::exception& ex) {
+      lastResort(tag, "Failed to initialize glog", ex.what());
+      failed = true;
+    } catch (...) {
+      lastResort(tag, "Failed to initialize glog");
+      failed = true;
+    }
+  });
+
+  if (failed) {
+    throw std::runtime_error{"Failed to initialize glog"};
+  }
+}
+
+} // namespace gloginit
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/hermes/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/hermes/CMakeLists.txt
new file mode 100644
index 0000000..4bfbaa1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/hermes/CMakeLists.txt
@@ -0,0 +1,13 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_library(hermes SHARED IMPORTED GLOBAL)
+set_target_properties(hermes
+        PROPERTIES
+        IMPORTED_LOCATION
+        ${CMAKE_CURRENT_SOURCE_DIR}/jni/${ANDROID_ABI}/libhermes.so)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/jni-hack/README.md b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/jni-hack/README.md
new file mode 100644
index 0000000..c30486e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/jni-hack/README.md
@@ -0,0 +1 @@
+This buck module exists so that targets that need to be built against both 1) Android (where we can and should use the Android NDK jni headers) and 2) the host platform(generally for local unit tests) can depend on a single target and get the right jni header for whatever platform they're building against automatically.
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/jni-hack/jni.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/jni-hack/jni.h
new file mode 100644
index 0000000..cd49dc5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/jni-hack/jni.h
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#ifdef __ANDROID__
+#include_next <jni.h>
+#else
+#include "real/jni.h"
+#endif
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/jni-hack/real/jni.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/jni-hack/real/jni.h
new file mode 100644
index 0000000..1eb30b6
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/jni-hack/real/jni.h
@@ -0,0 +1,1330 @@
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/*
+ * JNI specification, as defined by Sun:
+ * http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html
+ *
+ * Everything here is expected to be VM-neutral.
+ */
+
+#ifndef JNI_H_
+#define JNI_H_
+
+#include <stdarg.h>
+#include <stdint.h>
+
+/* Primitive types that match up with Java equivalents. */
+typedef uint8_t jboolean; /* unsigned 8 bits */
+typedef int8_t jbyte; /* signed 8 bits */
+typedef uint16_t jchar; /* unsigned 16 bits */
+typedef int16_t jshort; /* signed 16 bits */
+typedef int32_t jint; /* signed 32 bits */
+typedef int64_t jlong; /* signed 64 bits */
+typedef float jfloat; /* 32-bit IEEE 754 */
+typedef double jdouble; /* 64-bit IEEE 754 */
+
+/* "cardinal indices and sizes" */
+typedef jint jsize;
+
+#ifdef __cplusplus
+/*
+ * Reference types, in C++
+ */
+class _jobject {};
+class _jclass : public _jobject {};
+class _jstring : public _jobject {};
+class _jarray : public _jobject {};
+class _jobjectArray : public _jarray {};
+class _jbooleanArray : public _jarray {};
+class _jbyteArray : public _jarray {};
+class _jcharArray : public _jarray {};
+class _jshortArray : public _jarray {};
+class _jintArray : public _jarray {};
+class _jlongArray : public _jarray {};
+class _jfloatArray : public _jarray {};
+class _jdoubleArray : public _jarray {};
+class _jthrowable : public _jobject {};
+
+typedef _jobject* jobject;
+typedef _jclass* jclass;
+typedef _jstring* jstring;
+typedef _jarray* jarray;
+typedef _jobjectArray* jobjectArray;
+typedef _jbooleanArray* jbooleanArray;
+typedef _jbyteArray* jbyteArray;
+typedef _jcharArray* jcharArray;
+typedef _jshortArray* jshortArray;
+typedef _jintArray* jintArray;
+typedef _jlongArray* jlongArray;
+typedef _jfloatArray* jfloatArray;
+typedef _jdoubleArray* jdoubleArray;
+typedef _jthrowable* jthrowable;
+typedef _jobject* jweak;
+
+#else /* not __cplusplus */
+
+/*
+ * Reference types, in C.
+ */
+typedef void* jobject;
+typedef jobject jclass;
+typedef jobject jstring;
+typedef jobject jarray;
+typedef jarray jobjectArray;
+typedef jarray jbooleanArray;
+typedef jarray jbyteArray;
+typedef jarray jcharArray;
+typedef jarray jshortArray;
+typedef jarray jintArray;
+typedef jarray jlongArray;
+typedef jarray jfloatArray;
+typedef jarray jdoubleArray;
+typedef jobject jthrowable;
+typedef jobject jweak;
+
+#endif /* not __cplusplus */
+
+struct _jfieldID; /* opaque structure */
+typedef struct _jfieldID* jfieldID; /* field IDs */
+
+struct _jmethodID; /* opaque structure */
+typedef struct _jmethodID* jmethodID; /* method IDs */
+
+struct JNIInvokeInterface;
+
+typedef union jvalue {
+  jboolean z;
+  jbyte b;
+  jchar c;
+  jshort s;
+  jint i;
+  jlong j;
+  jfloat f;
+  jdouble d;
+  jobject l;
+} jvalue;
+
+typedef enum jobjectRefType {
+  JNIInvalidRefType = 0,
+  JNILocalRefType = 1,
+  JNIGlobalRefType = 2,
+  JNIWeakGlobalRefType = 3
+} jobjectRefType;
+
+typedef struct {
+  const char* name;
+  const char* signature;
+  void* fnPtr;
+} JNINativeMethod;
+
+struct _JNIEnv;
+struct _JavaVM;
+typedef const struct JNINativeInterface* C_JNIEnv;
+
+#if defined(__cplusplus)
+typedef _JNIEnv JNIEnv;
+typedef _JavaVM JavaVM;
+#else
+typedef const struct JNINativeInterface* JNIEnv;
+typedef const struct JNIInvokeInterface* JavaVM;
+#endif
+
+/*
+ * Table of interface function pointers.
+ */
+struct JNINativeInterface {
+  void* reserved0;
+  void* reserved1;
+  void* reserved2;
+  void* reserved3;
+
+  jint (*GetVersion)(JNIEnv*);
+
+  jclass (*DefineClass)(JNIEnv*, const char*, jobject, const jbyte*, jsize);
+  jclass (*FindClass)(JNIEnv*, const char*);
+
+  jmethodID (*FromReflectedMethod)(JNIEnv*, jobject);
+  jfieldID (*FromReflectedField)(JNIEnv*, jobject);
+  /* spec doesn't show jboolean parameter */
+  jobject (*ToReflectedMethod)(JNIEnv*, jclass, jmethodID, jboolean);
+
+  jclass (*GetSuperclass)(JNIEnv*, jclass);
+  jboolean (*IsAssignableFrom)(JNIEnv*, jclass, jclass);
+
+  /* spec doesn't show jboolean parameter */
+  jobject (*ToReflectedField)(JNIEnv*, jclass, jfieldID, jboolean);
+
+  jint (*Throw)(JNIEnv*, jthrowable);
+  jint (*ThrowNew)(JNIEnv*, jclass, const char*);
+  jthrowable (*ExceptionOccurred)(JNIEnv*);
+  void (*ExceptionDescribe)(JNIEnv*);
+  void (*ExceptionClear)(JNIEnv*);
+  void (*FatalError)(JNIEnv*, const char*);
+
+  jint (*PushLocalFrame)(JNIEnv*, jint);
+  jobject (*PopLocalFrame)(JNIEnv*, jobject);
+
+  jobject (*NewGlobalRef)(JNIEnv*, jobject);
+  void (*DeleteGlobalRef)(JNIEnv*, jobject);
+  void (*DeleteLocalRef)(JNIEnv*, jobject);
+  jboolean (*IsSameObject)(JNIEnv*, jobject, jobject);
+
+  jobject (*NewLocalRef)(JNIEnv*, jobject);
+  jint (*EnsureLocalCapacity)(JNIEnv*, jint);
+
+  jobject (*AllocObject)(JNIEnv*, jclass);
+  jobject (*NewObject)(JNIEnv*, jclass, jmethodID, ...);
+  jobject (*NewObjectV)(JNIEnv*, jclass, jmethodID, va_list);
+  jobject (*NewObjectA)(JNIEnv*, jclass, jmethodID, jvalue*);
+
+  jclass (*GetObjectClass)(JNIEnv*, jobject);
+  jboolean (*IsInstanceOf)(JNIEnv*, jobject, jclass);
+  jmethodID (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);
+
+  jobject (*CallObjectMethod)(JNIEnv*, jobject, jmethodID, ...);
+  jobject (*CallObjectMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  jobject (*CallObjectMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+  jboolean (*CallBooleanMethod)(JNIEnv*, jobject, jmethodID, ...);
+  jboolean (*CallBooleanMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  jboolean (*CallBooleanMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+  jbyte (*CallByteMethod)(JNIEnv*, jobject, jmethodID, ...);
+  jbyte (*CallByteMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  jbyte (*CallByteMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+  jchar (*CallCharMethod)(JNIEnv*, jobject, jmethodID, ...);
+  jchar (*CallCharMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  jchar (*CallCharMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+  jshort (*CallShortMethod)(JNIEnv*, jobject, jmethodID, ...);
+  jshort (*CallShortMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  jshort (*CallShortMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+  jint (*CallIntMethod)(JNIEnv*, jobject, jmethodID, ...);
+  jint (*CallIntMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  jint (*CallIntMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+  jlong (*CallLongMethod)(JNIEnv*, jobject, jmethodID, ...);
+  jlong (*CallLongMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  jlong (*CallLongMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+  jfloat (*CallFloatMethod)(JNIEnv*, jobject, jmethodID, ...);
+  jfloat (*CallFloatMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  jfloat (*CallFloatMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+  jdouble (*CallDoubleMethod)(JNIEnv*, jobject, jmethodID, ...);
+  jdouble (*CallDoubleMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  jdouble (*CallDoubleMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+  void (*CallVoidMethod)(JNIEnv*, jobject, jmethodID, ...);
+  void (*CallVoidMethodV)(JNIEnv*, jobject, jmethodID, va_list);
+  void (*CallVoidMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
+
+  jobject (
+      *CallNonvirtualObjectMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  jobject (*CallNonvirtualObjectMethodV)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      va_list);
+  jobject (*CallNonvirtualObjectMethodA)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      jvalue*);
+  jboolean (
+      *CallNonvirtualBooleanMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  jboolean (*CallNonvirtualBooleanMethodV)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      va_list);
+  jboolean (*CallNonvirtualBooleanMethodA)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      jvalue*);
+  jbyte (*CallNonvirtualByteMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  jbyte (
+      *CallNonvirtualByteMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);
+  jbyte (
+      *CallNonvirtualByteMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);
+  jchar (*CallNonvirtualCharMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  jchar (
+      *CallNonvirtualCharMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);
+  jchar (
+      *CallNonvirtualCharMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);
+  jshort (*CallNonvirtualShortMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  jshort (*CallNonvirtualShortMethodV)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      va_list);
+  jshort (*CallNonvirtualShortMethodA)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      jvalue*);
+  jint (*CallNonvirtualIntMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  jint (
+      *CallNonvirtualIntMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);
+  jint (
+      *CallNonvirtualIntMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);
+  jlong (*CallNonvirtualLongMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  jlong (
+      *CallNonvirtualLongMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);
+  jlong (
+      *CallNonvirtualLongMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);
+  jfloat (*CallNonvirtualFloatMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  jfloat (*CallNonvirtualFloatMethodV)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      va_list);
+  jfloat (*CallNonvirtualFloatMethodA)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      jvalue*);
+  jdouble (
+      *CallNonvirtualDoubleMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  jdouble (*CallNonvirtualDoubleMethodV)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      va_list);
+  jdouble (*CallNonvirtualDoubleMethodA)(
+      JNIEnv*,
+      jobject,
+      jclass,
+      jmethodID,
+      jvalue*);
+  void (*CallNonvirtualVoidMethod)(JNIEnv*, jobject, jclass, jmethodID, ...);
+  void (
+      *CallNonvirtualVoidMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);
+  void (
+      *CallNonvirtualVoidMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);
+
+  jfieldID (*GetFieldID)(JNIEnv*, jclass, const char*, const char*);
+
+  jobject (*GetObjectField)(JNIEnv*, jobject, jfieldID);
+  jboolean (*GetBooleanField)(JNIEnv*, jobject, jfieldID);
+  jbyte (*GetByteField)(JNIEnv*, jobject, jfieldID);
+  jchar (*GetCharField)(JNIEnv*, jobject, jfieldID);
+  jshort (*GetShortField)(JNIEnv*, jobject, jfieldID);
+  jint (*GetIntField)(JNIEnv*, jobject, jfieldID);
+  jlong (*GetLongField)(JNIEnv*, jobject, jfieldID);
+  jfloat (*GetFloatField)(JNIEnv*, jobject, jfieldID);
+  jdouble (*GetDoubleField)(JNIEnv*, jobject, jfieldID);
+
+  void (*SetObjectField)(JNIEnv*, jobject, jfieldID, jobject);
+  void (*SetBooleanField)(JNIEnv*, jobject, jfieldID, jboolean);
+  void (*SetByteField)(JNIEnv*, jobject, jfieldID, jbyte);
+  void (*SetCharField)(JNIEnv*, jobject, jfieldID, jchar);
+  void (*SetShortField)(JNIEnv*, jobject, jfieldID, jshort);
+  void (*SetIntField)(JNIEnv*, jobject, jfieldID, jint);
+  void (*SetLongField)(JNIEnv*, jobject, jfieldID, jlong);
+  void (*SetFloatField)(JNIEnv*, jobject, jfieldID, jfloat);
+  void (*SetDoubleField)(JNIEnv*, jobject, jfieldID, jdouble);
+
+  jmethodID (*GetStaticMethodID)(JNIEnv*, jclass, const char*, const char*);
+
+  jobject (*CallStaticObjectMethod)(JNIEnv*, jclass, jmethodID, ...);
+  jobject (*CallStaticObjectMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  jobject (*CallStaticObjectMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+  jboolean (*CallStaticBooleanMethod)(JNIEnv*, jclass, jmethodID, ...);
+  jboolean (*CallStaticBooleanMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  jboolean (*CallStaticBooleanMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+  jbyte (*CallStaticByteMethod)(JNIEnv*, jclass, jmethodID, ...);
+  jbyte (*CallStaticByteMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  jbyte (*CallStaticByteMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+  jchar (*CallStaticCharMethod)(JNIEnv*, jclass, jmethodID, ...);
+  jchar (*CallStaticCharMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  jchar (*CallStaticCharMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+  jshort (*CallStaticShortMethod)(JNIEnv*, jclass, jmethodID, ...);
+  jshort (*CallStaticShortMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  jshort (*CallStaticShortMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+  jint (*CallStaticIntMethod)(JNIEnv*, jclass, jmethodID, ...);
+  jint (*CallStaticIntMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  jint (*CallStaticIntMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+  jlong (*CallStaticLongMethod)(JNIEnv*, jclass, jmethodID, ...);
+  jlong (*CallStaticLongMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  jlong (*CallStaticLongMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+  jfloat (*CallStaticFloatMethod)(JNIEnv*, jclass, jmethodID, ...);
+  jfloat (*CallStaticFloatMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  jfloat (*CallStaticFloatMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+  jdouble (*CallStaticDoubleMethod)(JNIEnv*, jclass, jmethodID, ...);
+  jdouble (*CallStaticDoubleMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  jdouble (*CallStaticDoubleMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+  void (*CallStaticVoidMethod)(JNIEnv*, jclass, jmethodID, ...);
+  void (*CallStaticVoidMethodV)(JNIEnv*, jclass, jmethodID, va_list);
+  void (*CallStaticVoidMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
+
+  jfieldID (*GetStaticFieldID)(JNIEnv*, jclass, const char*, const char*);
+
+  jobject (*GetStaticObjectField)(JNIEnv*, jclass, jfieldID);
+  jboolean (*GetStaticBooleanField)(JNIEnv*, jclass, jfieldID);
+  jbyte (*GetStaticByteField)(JNIEnv*, jclass, jfieldID);
+  jchar (*GetStaticCharField)(JNIEnv*, jclass, jfieldID);
+  jshort (*GetStaticShortField)(JNIEnv*, jclass, jfieldID);
+  jint (*GetStaticIntField)(JNIEnv*, jclass, jfieldID);
+  jlong (*GetStaticLongField)(JNIEnv*, jclass, jfieldID);
+  jfloat (*GetStaticFloatField)(JNIEnv*, jclass, jfieldID);
+  jdouble (*GetStaticDoubleField)(JNIEnv*, jclass, jfieldID);
+
+  void (*SetStaticObjectField)(JNIEnv*, jclass, jfieldID, jobject);
+  void (*SetStaticBooleanField)(JNIEnv*, jclass, jfieldID, jboolean);
+  void (*SetStaticByteField)(JNIEnv*, jclass, jfieldID, jbyte);
+  void (*SetStaticCharField)(JNIEnv*, jclass, jfieldID, jchar);
+  void (*SetStaticShortField)(JNIEnv*, jclass, jfieldID, jshort);
+  void (*SetStaticIntField)(JNIEnv*, jclass, jfieldID, jint);
+  void (*SetStaticLongField)(JNIEnv*, jclass, jfieldID, jlong);
+  void (*SetStaticFloatField)(JNIEnv*, jclass, jfieldID, jfloat);
+  void (*SetStaticDoubleField)(JNIEnv*, jclass, jfieldID, jdouble);
+
+  jstring (*NewString)(JNIEnv*, const jchar*, jsize);
+  jsize (*GetStringLength)(JNIEnv*, jstring);
+  const jchar* (*GetStringChars)(JNIEnv*, jstring, jboolean*);
+  void (*ReleaseStringChars)(JNIEnv*, jstring, const jchar*);
+  jstring (*NewStringUTF)(JNIEnv*, const char*);
+  jsize (*GetStringUTFLength)(JNIEnv*, jstring);
+  /* JNI spec says this returns const jbyte*, but that's inconsistent */
+  const char* (*GetStringUTFChars)(JNIEnv*, jstring, jboolean*);
+  void (*ReleaseStringUTFChars)(JNIEnv*, jstring, const char*);
+  jsize (*GetArrayLength)(JNIEnv*, jarray);
+  jobjectArray (*NewObjectArray)(JNIEnv*, jsize, jclass, jobject);
+  jobject (*GetObjectArrayElement)(JNIEnv*, jobjectArray, jsize);
+  void (*SetObjectArrayElement)(JNIEnv*, jobjectArray, jsize, jobject);
+
+  jbooleanArray (*NewBooleanArray)(JNIEnv*, jsize);
+  jbyteArray (*NewByteArray)(JNIEnv*, jsize);
+  jcharArray (*NewCharArray)(JNIEnv*, jsize);
+  jshortArray (*NewShortArray)(JNIEnv*, jsize);
+  jintArray (*NewIntArray)(JNIEnv*, jsize);
+  jlongArray (*NewLongArray)(JNIEnv*, jsize);
+  jfloatArray (*NewFloatArray)(JNIEnv*, jsize);
+  jdoubleArray (*NewDoubleArray)(JNIEnv*, jsize);
+
+  jboolean* (*GetBooleanArrayElements)(JNIEnv*, jbooleanArray, jboolean*);
+  jbyte* (*GetByteArrayElements)(JNIEnv*, jbyteArray, jboolean*);
+  jchar* (*GetCharArrayElements)(JNIEnv*, jcharArray, jboolean*);
+  jshort* (*GetShortArrayElements)(JNIEnv*, jshortArray, jboolean*);
+  jint* (*GetIntArrayElements)(JNIEnv*, jintArray, jboolean*);
+  jlong* (*GetLongArrayElements)(JNIEnv*, jlongArray, jboolean*);
+  jfloat* (*GetFloatArrayElements)(JNIEnv*, jfloatArray, jboolean*);
+  jdouble* (*GetDoubleArrayElements)(JNIEnv*, jdoubleArray, jboolean*);
+
+  void (*ReleaseBooleanArrayElements)(JNIEnv*, jbooleanArray, jboolean*, jint);
+  void (*ReleaseByteArrayElements)(JNIEnv*, jbyteArray, jbyte*, jint);
+  void (*ReleaseCharArrayElements)(JNIEnv*, jcharArray, jchar*, jint);
+  void (*ReleaseShortArrayElements)(JNIEnv*, jshortArray, jshort*, jint);
+  void (*ReleaseIntArrayElements)(JNIEnv*, jintArray, jint*, jint);
+  void (*ReleaseLongArrayElements)(JNIEnv*, jlongArray, jlong*, jint);
+  void (*ReleaseFloatArrayElements)(JNIEnv*, jfloatArray, jfloat*, jint);
+  void (*ReleaseDoubleArrayElements)(JNIEnv*, jdoubleArray, jdouble*, jint);
+
+  void (
+      *GetBooleanArrayRegion)(JNIEnv*, jbooleanArray, jsize, jsize, jboolean*);
+  void (*GetByteArrayRegion)(JNIEnv*, jbyteArray, jsize, jsize, jbyte*);
+  void (*GetCharArrayRegion)(JNIEnv*, jcharArray, jsize, jsize, jchar*);
+  void (*GetShortArrayRegion)(JNIEnv*, jshortArray, jsize, jsize, jshort*);
+  void (*GetIntArrayRegion)(JNIEnv*, jintArray, jsize, jsize, jint*);
+  void (*GetLongArrayRegion)(JNIEnv*, jlongArray, jsize, jsize, jlong*);
+  void (*GetFloatArrayRegion)(JNIEnv*, jfloatArray, jsize, jsize, jfloat*);
+  void (*GetDoubleArrayRegion)(JNIEnv*, jdoubleArray, jsize, jsize, jdouble*);
+
+  /* spec shows these without const; some jni.h do, some don't */
+  void (*SetBooleanArrayRegion)(
+      JNIEnv*,
+      jbooleanArray,
+      jsize,
+      jsize,
+      const jboolean*);
+  void (*SetByteArrayRegion)(JNIEnv*, jbyteArray, jsize, jsize, const jbyte*);
+  void (*SetCharArrayRegion)(JNIEnv*, jcharArray, jsize, jsize, const jchar*);
+  void (
+      *SetShortArrayRegion)(JNIEnv*, jshortArray, jsize, jsize, const jshort*);
+  void (*SetIntArrayRegion)(JNIEnv*, jintArray, jsize, jsize, const jint*);
+  void (*SetLongArrayRegion)(JNIEnv*, jlongArray, jsize, jsize, const jlong*);
+  void (
+      *SetFloatArrayRegion)(JNIEnv*, jfloatArray, jsize, jsize, const jfloat*);
+  void (*SetDoubleArrayRegion)(
+      JNIEnv*,
+      jdoubleArray,
+      jsize,
+      jsize,
+      const jdouble*);
+
+  jint (*RegisterNatives)(JNIEnv*, jclass, const JNINativeMethod*, jint);
+  jint (*UnregisterNatives)(JNIEnv*, jclass);
+  jint (*MonitorEnter)(JNIEnv*, jobject);
+  jint (*MonitorExit)(JNIEnv*, jobject);
+  jint (*GetJavaVM)(JNIEnv*, JavaVM**);
+
+  void (*GetStringRegion)(JNIEnv*, jstring, jsize, jsize, jchar*);
+  void (*GetStringUTFRegion)(JNIEnv*, jstring, jsize, jsize, char*);
+
+  void* (*GetPrimitiveArrayCritical)(JNIEnv*, jarray, jboolean*);
+  void (*ReleasePrimitiveArrayCritical)(JNIEnv*, jarray, void*, jint);
+
+  const jchar* (*GetStringCritical)(JNIEnv*, jstring, jboolean*);
+  void (*ReleaseStringCritical)(JNIEnv*, jstring, const jchar*);
+
+  jweak (*NewWeakGlobalRef)(JNIEnv*, jobject);
+  void (*DeleteWeakGlobalRef)(JNIEnv*, jweak);
+
+  jboolean (*ExceptionCheck)(JNIEnv*);
+
+  jobject (*NewDirectByteBuffer)(JNIEnv*, void*, jlong);
+  void* (*GetDirectBufferAddress)(JNIEnv*, jobject);
+  jlong (*GetDirectBufferCapacity)(JNIEnv*, jobject);
+
+  /* added in JNI 1.6 */
+  jobjectRefType (*GetObjectRefType)(JNIEnv*, jobject);
+};
+
+/*
+ * C++ object wrapper.
+ *
+ * This is usually overlaid on a C struct whose first element is a
+ * JNINativeInterface*.  We rely somewhat on compiler behavior.
+ */
+struct _JNIEnv {
+  /* do not rename this; it does not seem to be entirely opaque */
+  const struct JNINativeInterface* functions;
+
+#if defined(__cplusplus)
+
+  jint GetVersion() {
+    return functions->GetVersion(this);
+  }
+
+  jclass DefineClass(
+      const char* name,
+      jobject loader,
+      const jbyte* buf,
+      jsize bufLen) {
+    return functions->DefineClass(this, name, loader, buf, bufLen);
+  }
+
+  jclass FindClass(const char* name) {
+    return functions->FindClass(this, name);
+  }
+
+  jmethodID FromReflectedMethod(jobject method) {
+    return functions->FromReflectedMethod(this, method);
+  }
+
+  jfieldID FromReflectedField(jobject field) {
+    return functions->FromReflectedField(this, field);
+  }
+
+  jobject ToReflectedMethod(jclass cls, jmethodID methodID, jboolean isStatic) {
+    return functions->ToReflectedMethod(this, cls, methodID, isStatic);
+  }
+
+  jclass GetSuperclass(jclass clazz) {
+    return functions->GetSuperclass(this, clazz);
+  }
+
+  jboolean IsAssignableFrom(jclass clazz1, jclass clazz2) {
+    return functions->IsAssignableFrom(this, clazz1, clazz2);
+  }
+
+  jobject ToReflectedField(jclass cls, jfieldID fieldID, jboolean isStatic) {
+    return functions->ToReflectedField(this, cls, fieldID, isStatic);
+  }
+
+  jint Throw(jthrowable obj) {
+    return functions->Throw(this, obj);
+  }
+
+  jint ThrowNew(jclass clazz, const char* message) {
+    return functions->ThrowNew(this, clazz, message);
+  }
+
+  jthrowable ExceptionOccurred() {
+    return functions->ExceptionOccurred(this);
+  }
+
+  void ExceptionDescribe() {
+    functions->ExceptionDescribe(this);
+  }
+
+  void ExceptionClear() {
+    functions->ExceptionClear(this);
+  }
+
+  void FatalError(const char* msg) {
+    functions->FatalError(this, msg);
+  }
+
+  jint PushLocalFrame(jint capacity) {
+    return functions->PushLocalFrame(this, capacity);
+  }
+
+  jobject PopLocalFrame(jobject result) {
+    return functions->PopLocalFrame(this, result);
+  }
+
+  jobject NewGlobalRef(jobject obj) {
+    return functions->NewGlobalRef(this, obj);
+  }
+
+  void DeleteGlobalRef(jobject globalRef) {
+    functions->DeleteGlobalRef(this, globalRef);
+  }
+
+  void DeleteLocalRef(jobject localRef) {
+    functions->DeleteLocalRef(this, localRef);
+  }
+
+  jboolean IsSameObject(jobject ref1, jobject ref2) {
+    return functions->IsSameObject(this, ref1, ref2);
+  }
+
+  jobject NewLocalRef(jobject ref) {
+    return functions->NewLocalRef(this, ref);
+  }
+
+  jint EnsureLocalCapacity(jint capacity) {
+    return functions->EnsureLocalCapacity(this, capacity);
+  }
+
+  jobject AllocObject(jclass clazz) {
+    return functions->AllocObject(this, clazz);
+  }
+
+  jobject NewObject(jclass clazz, jmethodID methodID, ...) {
+    va_list args;
+    va_start(args, methodID);
+    jobject result = functions->NewObjectV(this, clazz, methodID, args);
+    va_end(args);
+    return result;
+  }
+
+  jobject NewObjectV(jclass clazz, jmethodID methodID, va_list args) {
+    return functions->NewObjectV(this, clazz, methodID, args);
+  }
+
+  jobject NewObjectA(jclass clazz, jmethodID methodID, jvalue* args) {
+    return functions->NewObjectA(this, clazz, methodID, args);
+  }
+
+  jclass GetObjectClass(jobject obj) {
+    return functions->GetObjectClass(this, obj);
+  }
+
+  jboolean IsInstanceOf(jobject obj, jclass clazz) {
+    return functions->IsInstanceOf(this, obj, clazz);
+  }
+
+  jmethodID GetMethodID(jclass clazz, const char* name, const char* sig) {
+    return functions->GetMethodID(this, clazz, name, sig);
+  }
+
+#define CALL_TYPE_METHOD(_jtype, _jname)                                  \
+  _jtype Call##_jname##Method(jobject obj, jmethodID methodID, ...) {     \
+    _jtype result;                                                        \
+    va_list args;                                                         \
+    va_start(args, methodID);                                             \
+    result = functions->Call##_jname##MethodV(this, obj, methodID, args); \
+    va_end(args);                                                         \
+    return result;                                                        \
+  }
+#define CALL_TYPE_METHODV(_jtype, _jname)                               \
+  _jtype Call##_jname##MethodV(                                         \
+      jobject obj, jmethodID methodID, va_list args) {                  \
+    return functions->Call##_jname##MethodV(this, obj, methodID, args); \
+  }
+#define CALL_TYPE_METHODA(_jtype, _jname)                               \
+  _jtype Call##_jname##MethodA(                                         \
+      jobject obj, jmethodID methodID, jvalue* args) {                  \
+    return functions->Call##_jname##MethodA(this, obj, methodID, args); \
+  }
+
+#define CALL_TYPE(_jtype, _jname)   \
+  CALL_TYPE_METHOD(_jtype, _jname)  \
+  CALL_TYPE_METHODV(_jtype, _jname) \
+  CALL_TYPE_METHODA(_jtype, _jname)
+
+  CALL_TYPE(jobject, Object)
+  CALL_TYPE(jboolean, Boolean)
+  CALL_TYPE(jbyte, Byte)
+  CALL_TYPE(jchar, Char)
+  CALL_TYPE(jshort, Short)
+  CALL_TYPE(jint, Int)
+  CALL_TYPE(jlong, Long)
+  CALL_TYPE(jfloat, Float)
+  CALL_TYPE(jdouble, Double)
+
+  void CallVoidMethod(jobject obj, jmethodID methodID, ...) {
+    va_list args;
+    va_start(args, methodID);
+    functions->CallVoidMethodV(this, obj, methodID, args);
+    va_end(args);
+  }
+  void CallVoidMethodV(jobject obj, jmethodID methodID, va_list args) {
+    functions->CallVoidMethodV(this, obj, methodID, args);
+  }
+  void CallVoidMethodA(jobject obj, jmethodID methodID, jvalue* args) {
+    functions->CallVoidMethodA(this, obj, methodID, args);
+  }
+
+#define CALL_NONVIRT_TYPE_METHOD(_jtype, _jname)            \
+  _jtype CallNonvirtual##_jname##Method(                    \
+      jobject obj, jclass clazz, jmethodID methodID, ...) { \
+    _jtype result;                                          \
+    va_list args;                                           \
+    va_start(args, methodID);                               \
+    result = functions->CallNonvirtual##_jname##MethodV(    \
+        this, obj, clazz, methodID, args);                  \
+    va_end(args);                                           \
+    return result;                                          \
+  }
+#define CALL_NONVIRT_TYPE_METHODV(_jtype, _jname)                    \
+  _jtype CallNonvirtual##_jname##MethodV(                            \
+      jobject obj, jclass clazz, jmethodID methodID, va_list args) { \
+    return functions->CallNonvirtual##_jname##MethodV(               \
+        this, obj, clazz, methodID, args);                           \
+  }
+#define CALL_NONVIRT_TYPE_METHODA(_jtype, _jname)                    \
+  _jtype CallNonvirtual##_jname##MethodA(                            \
+      jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { \
+    return functions->CallNonvirtual##_jname##MethodA(               \
+        this, obj, clazz, methodID, args);                           \
+  }
+
+#define CALL_NONVIRT_TYPE(_jtype, _jname)   \
+  CALL_NONVIRT_TYPE_METHOD(_jtype, _jname)  \
+  CALL_NONVIRT_TYPE_METHODV(_jtype, _jname) \
+  CALL_NONVIRT_TYPE_METHODA(_jtype, _jname)
+
+  CALL_NONVIRT_TYPE(jobject, Object)
+  CALL_NONVIRT_TYPE(jboolean, Boolean)
+  CALL_NONVIRT_TYPE(jbyte, Byte)
+  CALL_NONVIRT_TYPE(jchar, Char)
+  CALL_NONVIRT_TYPE(jshort, Short)
+  CALL_NONVIRT_TYPE(jint, Int)
+  CALL_NONVIRT_TYPE(jlong, Long)
+  CALL_NONVIRT_TYPE(jfloat, Float)
+  CALL_NONVIRT_TYPE(jdouble, Double)
+
+  void
+  CallNonvirtualVoidMethod(jobject obj, jclass clazz, jmethodID methodID, ...) {
+    va_list args;
+    va_start(args, methodID);
+    functions->CallNonvirtualVoidMethodV(this, obj, clazz, methodID, args);
+    va_end(args);
+  }
+  void CallNonvirtualVoidMethodV(
+      jobject obj,
+      jclass clazz,
+      jmethodID methodID,
+      va_list args) {
+    functions->CallNonvirtualVoidMethodV(this, obj, clazz, methodID, args);
+  }
+  void CallNonvirtualVoidMethodA(
+      jobject obj,
+      jclass clazz,
+      jmethodID methodID,
+      jvalue* args) {
+    functions->CallNonvirtualVoidMethodA(this, obj, clazz, methodID, args);
+  }
+
+  jfieldID GetFieldID(jclass clazz, const char* name, const char* sig) {
+    return functions->GetFieldID(this, clazz, name, sig);
+  }
+
+  jobject GetObjectField(jobject obj, jfieldID fieldID) {
+    return functions->GetObjectField(this, obj, fieldID);
+  }
+  jboolean GetBooleanField(jobject obj, jfieldID fieldID) {
+    return functions->GetBooleanField(this, obj, fieldID);
+  }
+  jbyte GetByteField(jobject obj, jfieldID fieldID) {
+    return functions->GetByteField(this, obj, fieldID);
+  }
+  jchar GetCharField(jobject obj, jfieldID fieldID) {
+    return functions->GetCharField(this, obj, fieldID);
+  }
+  jshort GetShortField(jobject obj, jfieldID fieldID) {
+    return functions->GetShortField(this, obj, fieldID);
+  }
+  jint GetIntField(jobject obj, jfieldID fieldID) {
+    return functions->GetIntField(this, obj, fieldID);
+  }
+  jlong GetLongField(jobject obj, jfieldID fieldID) {
+    return functions->GetLongField(this, obj, fieldID);
+  }
+  jfloat GetFloatField(jobject obj, jfieldID fieldID) {
+    return functions->GetFloatField(this, obj, fieldID);
+  }
+  jdouble GetDoubleField(jobject obj, jfieldID fieldID) {
+    return functions->GetDoubleField(this, obj, fieldID);
+  }
+
+  void SetObjectField(jobject obj, jfieldID fieldID, jobject value) {
+    functions->SetObjectField(this, obj, fieldID, value);
+  }
+  void SetBooleanField(jobject obj, jfieldID fieldID, jboolean value) {
+    functions->SetBooleanField(this, obj, fieldID, value);
+  }
+  void SetByteField(jobject obj, jfieldID fieldID, jbyte value) {
+    functions->SetByteField(this, obj, fieldID, value);
+  }
+  void SetCharField(jobject obj, jfieldID fieldID, jchar value) {
+    functions->SetCharField(this, obj, fieldID, value);
+  }
+  void SetShortField(jobject obj, jfieldID fieldID, jshort value) {
+    functions->SetShortField(this, obj, fieldID, value);
+  }
+  void SetIntField(jobject obj, jfieldID fieldID, jint value) {
+    functions->SetIntField(this, obj, fieldID, value);
+  }
+  void SetLongField(jobject obj, jfieldID fieldID, jlong value) {
+    functions->SetLongField(this, obj, fieldID, value);
+  }
+  void SetFloatField(jobject obj, jfieldID fieldID, jfloat value) {
+    functions->SetFloatField(this, obj, fieldID, value);
+  }
+  void SetDoubleField(jobject obj, jfieldID fieldID, jdouble value) {
+    functions->SetDoubleField(this, obj, fieldID, value);
+  }
+
+  jmethodID GetStaticMethodID(jclass clazz, const char* name, const char* sig) {
+    return functions->GetStaticMethodID(this, clazz, name, sig);
+  }
+
+#define CALL_STATIC_TYPE_METHOD(_jtype, _jname)                              \
+  _jtype CallStatic##_jname##Method(jclass clazz, jmethodID methodID, ...) { \
+    _jtype result;                                                           \
+    va_list args;                                                            \
+    va_start(args, methodID);                                                \
+    result =                                                                 \
+        functions->CallStatic##_jname##MethodV(this, clazz, methodID, args); \
+    va_end(args);                                                            \
+    return result;                                                           \
+  }
+#define CALL_STATIC_TYPE_METHODV(_jtype, _jname)        \
+  _jtype CallStatic##_jname##MethodV(                   \
+      jclass clazz, jmethodID methodID, va_list args) { \
+    return functions->CallStatic##_jname##MethodV(      \
+        this, clazz, methodID, args);                   \
+  }
+#define CALL_STATIC_TYPE_METHODA(_jtype, _jname)        \
+  _jtype CallStatic##_jname##MethodA(                   \
+      jclass clazz, jmethodID methodID, jvalue* args) { \
+    return functions->CallStatic##_jname##MethodA(      \
+        this, clazz, methodID, args);                   \
+  }
+
+#define CALL_STATIC_TYPE(_jtype, _jname)   \
+  CALL_STATIC_TYPE_METHOD(_jtype, _jname)  \
+  CALL_STATIC_TYPE_METHODV(_jtype, _jname) \
+  CALL_STATIC_TYPE_METHODA(_jtype, _jname)
+
+  CALL_STATIC_TYPE(jobject, Object)
+  CALL_STATIC_TYPE(jboolean, Boolean)
+  CALL_STATIC_TYPE(jbyte, Byte)
+  CALL_STATIC_TYPE(jchar, Char)
+  CALL_STATIC_TYPE(jshort, Short)
+  CALL_STATIC_TYPE(jint, Int)
+  CALL_STATIC_TYPE(jlong, Long)
+  CALL_STATIC_TYPE(jfloat, Float)
+  CALL_STATIC_TYPE(jdouble, Double)
+
+  void CallStaticVoidMethod(jclass clazz, jmethodID methodID, ...) {
+    va_list args;
+    va_start(args, methodID);
+    functions->CallStaticVoidMethodV(this, clazz, methodID, args);
+    va_end(args);
+  }
+  void CallStaticVoidMethodV(jclass clazz, jmethodID methodID, va_list args) {
+    functions->CallStaticVoidMethodV(this, clazz, methodID, args);
+  }
+  void CallStaticVoidMethodA(jclass clazz, jmethodID methodID, jvalue* args) {
+    functions->CallStaticVoidMethodA(this, clazz, methodID, args);
+  }
+
+  jfieldID GetStaticFieldID(jclass clazz, const char* name, const char* sig) {
+    return functions->GetStaticFieldID(this, clazz, name, sig);
+  }
+
+  jobject GetStaticObjectField(jclass clazz, jfieldID fieldID) {
+    return functions->GetStaticObjectField(this, clazz, fieldID);
+  }
+  jboolean GetStaticBooleanField(jclass clazz, jfieldID fieldID) {
+    return functions->GetStaticBooleanField(this, clazz, fieldID);
+  }
+  jbyte GetStaticByteField(jclass clazz, jfieldID fieldID) {
+    return functions->GetStaticByteField(this, clazz, fieldID);
+  }
+  jchar GetStaticCharField(jclass clazz, jfieldID fieldID) {
+    return functions->GetStaticCharField(this, clazz, fieldID);
+  }
+  jshort GetStaticShortField(jclass clazz, jfieldID fieldID) {
+    return functions->GetStaticShortField(this, clazz, fieldID);
+  }
+  jint GetStaticIntField(jclass clazz, jfieldID fieldID) {
+    return functions->GetStaticIntField(this, clazz, fieldID);
+  }
+  jlong GetStaticLongField(jclass clazz, jfieldID fieldID) {
+    return functions->GetStaticLongField(this, clazz, fieldID);
+  }
+  jfloat GetStaticFloatField(jclass clazz, jfieldID fieldID) {
+    return functions->GetStaticFloatField(this, clazz, fieldID);
+  }
+  jdouble GetStaticDoubleField(jclass clazz, jfieldID fieldID) {
+    return functions->GetStaticDoubleField(this, clazz, fieldID);
+  }
+
+  void SetStaticObjectField(jclass clazz, jfieldID fieldID, jobject value) {
+    functions->SetStaticObjectField(this, clazz, fieldID, value);
+  }
+  void SetStaticBooleanField(jclass clazz, jfieldID fieldID, jboolean value) {
+    functions->SetStaticBooleanField(this, clazz, fieldID, value);
+  }
+  void SetStaticByteField(jclass clazz, jfieldID fieldID, jbyte value) {
+    functions->SetStaticByteField(this, clazz, fieldID, value);
+  }
+  void SetStaticCharField(jclass clazz, jfieldID fieldID, jchar value) {
+    functions->SetStaticCharField(this, clazz, fieldID, value);
+  }
+  void SetStaticShortField(jclass clazz, jfieldID fieldID, jshort value) {
+    functions->SetStaticShortField(this, clazz, fieldID, value);
+  }
+  void SetStaticIntField(jclass clazz, jfieldID fieldID, jint value) {
+    functions->SetStaticIntField(this, clazz, fieldID, value);
+  }
+  void SetStaticLongField(jclass clazz, jfieldID fieldID, jlong value) {
+    functions->SetStaticLongField(this, clazz, fieldID, value);
+  }
+  void SetStaticFloatField(jclass clazz, jfieldID fieldID, jfloat value) {
+    functions->SetStaticFloatField(this, clazz, fieldID, value);
+  }
+  void SetStaticDoubleField(jclass clazz, jfieldID fieldID, jdouble value) {
+    functions->SetStaticDoubleField(this, clazz, fieldID, value);
+  }
+
+  jstring NewString(const jchar* unicodeChars, jsize len) {
+    return functions->NewString(this, unicodeChars, len);
+  }
+
+  jsize GetStringLength(jstring string) {
+    return functions->GetStringLength(this, string);
+  }
+
+  const jchar* GetStringChars(jstring string, jboolean* isCopy) {
+    return functions->GetStringChars(this, string, isCopy);
+  }
+
+  void ReleaseStringChars(jstring string, const jchar* chars) {
+    functions->ReleaseStringChars(this, string, chars);
+  }
+
+  jstring NewStringUTF(const char* bytes) {
+    return functions->NewStringUTF(this, bytes);
+  }
+
+  jsize GetStringUTFLength(jstring string) {
+    return functions->GetStringUTFLength(this, string);
+  }
+
+  const char* GetStringUTFChars(jstring string, jboolean* isCopy) {
+    return functions->GetStringUTFChars(this, string, isCopy);
+  }
+
+  void ReleaseStringUTFChars(jstring string, const char* utf) {
+    functions->ReleaseStringUTFChars(this, string, utf);
+  }
+
+  jsize GetArrayLength(jarray array) {
+    return functions->GetArrayLength(this, array);
+  }
+
+  jobjectArray
+  NewObjectArray(jsize length, jclass elementClass, jobject initialElement) {
+    return functions->NewObjectArray(
+        this, length, elementClass, initialElement);
+  }
+
+  jobject GetObjectArrayElement(jobjectArray array, jsize index) {
+    return functions->GetObjectArrayElement(this, array, index);
+  }
+
+  void SetObjectArrayElement(jobjectArray array, jsize index, jobject value) {
+    functions->SetObjectArrayElement(this, array, index, value);
+  }
+
+  jbooleanArray NewBooleanArray(jsize length) {
+    return functions->NewBooleanArray(this, length);
+  }
+  jbyteArray NewByteArray(jsize length) {
+    return functions->NewByteArray(this, length);
+  }
+  jcharArray NewCharArray(jsize length) {
+    return functions->NewCharArray(this, length);
+  }
+  jshortArray NewShortArray(jsize length) {
+    return functions->NewShortArray(this, length);
+  }
+  jintArray NewIntArray(jsize length) {
+    return functions->NewIntArray(this, length);
+  }
+  jlongArray NewLongArray(jsize length) {
+    return functions->NewLongArray(this, length);
+  }
+  jfloatArray NewFloatArray(jsize length) {
+    return functions->NewFloatArray(this, length);
+  }
+  jdoubleArray NewDoubleArray(jsize length) {
+    return functions->NewDoubleArray(this, length);
+  }
+
+  jboolean* GetBooleanArrayElements(jbooleanArray array, jboolean* isCopy) {
+    return functions->GetBooleanArrayElements(this, array, isCopy);
+  }
+  jbyte* GetByteArrayElements(jbyteArray array, jboolean* isCopy) {
+    return functions->GetByteArrayElements(this, array, isCopy);
+  }
+  jchar* GetCharArrayElements(jcharArray array, jboolean* isCopy) {
+    return functions->GetCharArrayElements(this, array, isCopy);
+  }
+  jshort* GetShortArrayElements(jshortArray array, jboolean* isCopy) {
+    return functions->GetShortArrayElements(this, array, isCopy);
+  }
+  jint* GetIntArrayElements(jintArray array, jboolean* isCopy) {
+    return functions->GetIntArrayElements(this, array, isCopy);
+  }
+  jlong* GetLongArrayElements(jlongArray array, jboolean* isCopy) {
+    return functions->GetLongArrayElements(this, array, isCopy);
+  }
+  jfloat* GetFloatArrayElements(jfloatArray array, jboolean* isCopy) {
+    return functions->GetFloatArrayElements(this, array, isCopy);
+  }
+  jdouble* GetDoubleArrayElements(jdoubleArray array, jboolean* isCopy) {
+    return functions->GetDoubleArrayElements(this, array, isCopy);
+  }
+
+  void
+  ReleaseBooleanArrayElements(jbooleanArray array, jboolean* elems, jint mode) {
+    functions->ReleaseBooleanArrayElements(this, array, elems, mode);
+  }
+  void ReleaseByteArrayElements(jbyteArray array, jbyte* elems, jint mode) {
+    functions->ReleaseByteArrayElements(this, array, elems, mode);
+  }
+  void ReleaseCharArrayElements(jcharArray array, jchar* elems, jint mode) {
+    functions->ReleaseCharArrayElements(this, array, elems, mode);
+  }
+  void ReleaseShortArrayElements(jshortArray array, jshort* elems, jint mode) {
+    functions->ReleaseShortArrayElements(this, array, elems, mode);
+  }
+  void ReleaseIntArrayElements(jintArray array, jint* elems, jint mode) {
+    functions->ReleaseIntArrayElements(this, array, elems, mode);
+  }
+  void ReleaseLongArrayElements(jlongArray array, jlong* elems, jint mode) {
+    functions->ReleaseLongArrayElements(this, array, elems, mode);
+  }
+  void ReleaseFloatArrayElements(jfloatArray array, jfloat* elems, jint mode) {
+    functions->ReleaseFloatArrayElements(this, array, elems, mode);
+  }
+  void
+  ReleaseDoubleArrayElements(jdoubleArray array, jdouble* elems, jint mode) {
+    functions->ReleaseDoubleArrayElements(this, array, elems, mode);
+  }
+
+  void GetBooleanArrayRegion(
+      jbooleanArray array,
+      jsize start,
+      jsize len,
+      jboolean* buf) {
+    functions->GetBooleanArrayRegion(this, array, start, len, buf);
+  }
+  void
+  GetByteArrayRegion(jbyteArray array, jsize start, jsize len, jbyte* buf) {
+    functions->GetByteArrayRegion(this, array, start, len, buf);
+  }
+  void
+  GetCharArrayRegion(jcharArray array, jsize start, jsize len, jchar* buf) {
+    functions->GetCharArrayRegion(this, array, start, len, buf);
+  }
+  void
+  GetShortArrayRegion(jshortArray array, jsize start, jsize len, jshort* buf) {
+    functions->GetShortArrayRegion(this, array, start, len, buf);
+  }
+  void GetIntArrayRegion(jintArray array, jsize start, jsize len, jint* buf) {
+    functions->GetIntArrayRegion(this, array, start, len, buf);
+  }
+  void
+  GetLongArrayRegion(jlongArray array, jsize start, jsize len, jlong* buf) {
+    functions->GetLongArrayRegion(this, array, start, len, buf);
+  }
+  void
+  GetFloatArrayRegion(jfloatArray array, jsize start, jsize len, jfloat* buf) {
+    functions->GetFloatArrayRegion(this, array, start, len, buf);
+  }
+  void GetDoubleArrayRegion(
+      jdoubleArray array,
+      jsize start,
+      jsize len,
+      jdouble* buf) {
+    functions->GetDoubleArrayRegion(this, array, start, len, buf);
+  }
+
+  void SetBooleanArrayRegion(
+      jbooleanArray array,
+      jsize start,
+      jsize len,
+      const jboolean* buf) {
+    functions->SetBooleanArrayRegion(this, array, start, len, buf);
+  }
+  void SetByteArrayRegion(
+      jbyteArray array,
+      jsize start,
+      jsize len,
+      const jbyte* buf) {
+    functions->SetByteArrayRegion(this, array, start, len, buf);
+  }
+  void SetCharArrayRegion(
+      jcharArray array,
+      jsize start,
+      jsize len,
+      const jchar* buf) {
+    functions->SetCharArrayRegion(this, array, start, len, buf);
+  }
+  void SetShortArrayRegion(
+      jshortArray array,
+      jsize start,
+      jsize len,
+      const jshort* buf) {
+    functions->SetShortArrayRegion(this, array, start, len, buf);
+  }
+  void
+  SetIntArrayRegion(jintArray array, jsize start, jsize len, const jint* buf) {
+    functions->SetIntArrayRegion(this, array, start, len, buf);
+  }
+  void SetLongArrayRegion(
+      jlongArray array,
+      jsize start,
+      jsize len,
+      const jlong* buf) {
+    functions->SetLongArrayRegion(this, array, start, len, buf);
+  }
+  void SetFloatArrayRegion(
+      jfloatArray array,
+      jsize start,
+      jsize len,
+      const jfloat* buf) {
+    functions->SetFloatArrayRegion(this, array, start, len, buf);
+  }
+  void SetDoubleArrayRegion(
+      jdoubleArray array,
+      jsize start,
+      jsize len,
+      const jdouble* buf) {
+    functions->SetDoubleArrayRegion(this, array, start, len, buf);
+  }
+
+  jint
+  RegisterNatives(jclass clazz, const JNINativeMethod* methods, jint nMethods) {
+    return functions->RegisterNatives(this, clazz, methods, nMethods);
+  }
+
+  jint UnregisterNatives(jclass clazz) {
+    return functions->UnregisterNatives(this, clazz);
+  }
+
+  jint MonitorEnter(jobject obj) {
+    return functions->MonitorEnter(this, obj);
+  }
+
+  jint MonitorExit(jobject obj) {
+    return functions->MonitorExit(this, obj);
+  }
+
+  jint GetJavaVM(JavaVM** vm) {
+    return functions->GetJavaVM(this, vm);
+  }
+
+  void GetStringRegion(jstring str, jsize start, jsize len, jchar* buf) {
+    functions->GetStringRegion(this, str, start, len, buf);
+  }
+
+  void GetStringUTFRegion(jstring str, jsize start, jsize len, char* buf) {
+    return functions->GetStringUTFRegion(this, str, start, len, buf);
+  }
+
+  void* GetPrimitiveArrayCritical(jarray array, jboolean* isCopy) {
+    return functions->GetPrimitiveArrayCritical(this, array, isCopy);
+  }
+
+  void ReleasePrimitiveArrayCritical(jarray array, void* carray, jint mode) {
+    functions->ReleasePrimitiveArrayCritical(this, array, carray, mode);
+  }
+
+  const jchar* GetStringCritical(jstring string, jboolean* isCopy) {
+    return functions->GetStringCritical(this, string, isCopy);
+  }
+
+  void ReleaseStringCritical(jstring string, const jchar* carray) {
+    functions->ReleaseStringCritical(this, string, carray);
+  }
+
+  jweak NewWeakGlobalRef(jobject obj) {
+    return functions->NewWeakGlobalRef(this, obj);
+  }
+
+  void DeleteWeakGlobalRef(jweak obj) {
+    functions->DeleteWeakGlobalRef(this, obj);
+  }
+
+  jboolean ExceptionCheck() {
+    return functions->ExceptionCheck(this);
+  }
+
+  jobject NewDirectByteBuffer(void* address, jlong capacity) {
+    return functions->NewDirectByteBuffer(this, address, capacity);
+  }
+
+  void* GetDirectBufferAddress(jobject buf) {
+    return functions->GetDirectBufferAddress(this, buf);
+  }
+
+  jlong GetDirectBufferCapacity(jobject buf) {
+    return functions->GetDirectBufferCapacity(this, buf);
+  }
+
+  /* added in JNI 1.6 */
+  jobjectRefType GetObjectRefType(jobject obj) {
+    return functions->GetObjectRefType(this, obj);
+  }
+#endif /*__cplusplus*/
+};
+
+/*
+ * JNI invocation interface.
+ */
+struct JNIInvokeInterface {
+  void* reserved0;
+  void* reserved1;
+  void* reserved2;
+
+  jint (*DestroyJavaVM)(JavaVM*);
+  jint (*AttachCurrentThread)(JavaVM*, JNIEnv**, void*);
+  jint (*DetachCurrentThread)(JavaVM*);
+  jint (*GetEnv)(JavaVM*, void**, jint);
+  jint (*AttachCurrentThreadAsDaemon)(JavaVM*, JNIEnv**, void*);
+};
+
+/*
+ * C++ version.
+ */
+struct _JavaVM {
+  const struct JNIInvokeInterface* functions;
+
+#if defined(__cplusplus)
+  jint DestroyJavaVM() {
+    return functions->DestroyJavaVM(this);
+  }
+  jint AttachCurrentThread(JNIEnv** p_env, void* thr_args) {
+    return functions->AttachCurrentThread(this, p_env, thr_args);
+  }
+  jint DetachCurrentThread() {
+    return functions->DetachCurrentThread(this);
+  }
+  jint GetEnv(void** env, jint version) {
+    return functions->GetEnv(this, env, version);
+  }
+  jint AttachCurrentThreadAsDaemon(JNIEnv** p_env, void* thr_args) {
+    return functions->AttachCurrentThreadAsDaemon(this, p_env, thr_args);
+  }
+#endif /*__cplusplus*/
+};
+
+struct JavaVMAttachArgs {
+  jint version; /* must be >= JNI_VERSION_1_2 */
+  const char* name; /* NULL or name of thread as modified UTF-8 str */
+  jobject group; /* global ref of a ThreadGroup object, or NULL */
+};
+typedef struct JavaVMAttachArgs JavaVMAttachArgs;
+
+/*
+ * JNI 1.2+ initialization.  (As of 1.6, the pre-1.2 structures are no
+ * longer supported.)
+ */
+typedef struct JavaVMOption {
+  const char* optionString;
+  void* extraInfo;
+} JavaVMOption;
+
+typedef struct JavaVMInitArgs {
+  jint version; /* use JNI_VERSION_1_2 or later */
+
+  jint nOptions;
+  JavaVMOption* options;
+  jboolean ignoreUnrecognized;
+} JavaVMInitArgs;
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*
+ * VM initialization functions.
+ *
+ * Note these are the only symbols exported for JNI by the VM.
+ */
+jint JNI_GetDefaultJavaVMInitArgs(void*);
+jint JNI_CreateJavaVM(JavaVM**, JNIEnv**, void*);
+jint JNI_GetCreatedJavaVMs(JavaVM**, jsize, jsize*);
+
+#define JNIIMPORT
+#define JNIEXPORT __attribute__((visibility("default")))
+#define JNICALL
+
+/*
+ * Prototypes for functions exported by loadable shared libs.  These are
+ * called by JNI, not provided by JNI.
+ */
+JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved);
+JNIEXPORT void JNI_OnUnload(JavaVM* vm, void* reserved);
+
+#ifdef __cplusplus
+}
+#endif
+
+/*
+ * Manifest constants.
+ */
+#define JNI_FALSE 0
+#define JNI_TRUE 1
+
+#define JNI_VERSION_1_1 0x00010001
+#define JNI_VERSION_1_2 0x00010002
+#define JNI_VERSION_1_4 0x00010004
+#define JNI_VERSION_1_6 0x00010006
+
+#define JNI_OK (0) /* no error */
+#define JNI_ERR (-1) /* generic error */
+#define JNI_EDETACHED (-2) /* thread detached from the VM */
+#define JNI_EVERSION (-3) /* JNI version error */
+
+#define JNI_COMMIT 1 /* copy content, do not free buffer */
+#define JNI_ABORT 2 /* free buffer w/o copying back */
+
+#endif /* JNI_H_ */
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/CMakeLists.txt
new file mode 100644
index 0000000..8f08a99
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/CMakeLists.txt
@@ -0,0 +1,20 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(
+        -fvisibility=hidden
+        -fexceptions
+        -frtti
+        -O3)
+
+file(GLOB yoga_SRC CONFIGURE_DEPENDS jni/*.cpp)
+add_library(yoga SHARED ${yoga_SRC})
+
+target_include_directories(yoga PUBLIC jni)
+
+target_link_libraries(yoga yogacore fb fbjni log android)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/LayoutContext.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/LayoutContext.cpp
new file mode 100644
index 0000000..970812f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/LayoutContext.cpp
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <stack>
+
+#include "LayoutContext.h"
+
+namespace facebook::yoga::vanillajni {
+
+namespace {
+std::stack<PtrJNodeMapVanilla*>& getContexts() {
+  static thread_local std::stack<PtrJNodeMapVanilla*> contexts;
+  return contexts;
+}
+
+} // namespace
+
+LayoutContext::Provider::Provider(PtrJNodeMapVanilla* data) {
+  getContexts().push(data);
+}
+
+LayoutContext::Provider::~Provider() {
+  getContexts().pop();
+}
+
+/*static*/ PtrJNodeMapVanilla* LayoutContext::getNodeMap() {
+  return getContexts().empty() ? nullptr : getContexts().top();
+}
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/LayoutContext.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/LayoutContext.h
new file mode 100644
index 0000000..70ee31a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/LayoutContext.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <yoga/Yoga.h>
+#include "YGJTypesVanilla.h"
+
+namespace facebook::yoga::vanillajni {
+
+// TODO: This should not be exported or used outside of the JNI bindings
+class YG_EXPORT LayoutContext {
+ public:
+  // Sets a context on the current thread for the duration of the Provider's
+  // lifetime. This context should be set during the layout process to allow
+  // layout callbacks to access context-data specific to the layout pass.
+  struct Provider {
+    explicit Provider(PtrJNodeMapVanilla* data);
+    ~Provider();
+  };
+
+  static PtrJNodeMapVanilla* getNodeMap();
+};
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/ScopedGlobalRef.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/ScopedGlobalRef.h
new file mode 100644
index 0000000..a8dcacb
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/ScopedGlobalRef.h
@@ -0,0 +1,140 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <jni.h>
+#include <cstddef>
+#include <type_traits>
+#include "corefunctions.h"
+
+namespace facebook::yoga::vanillajni {
+
+/**
+ * ScopedGlobalRef is a sort of smart reference that allows us to control the
+ * lifespan of a JNI global reference.
+ *
+ * This class is designed so that when a ScopedGlobalRef goes out of scoped, its
+ * destructor will delete -JNIEnv->DeleteGlobalRef()- the underlying JNI
+ * reference.
+ *
+ * This class should be used to wrap all the global references we create during
+ * normal JNI operations if we want reference to eventually go away (in JNI it
+ * is a common operation to cache some global references throughout the lifespan
+ * of a process, in which case using this class does not really make sense). The
+ * idea behind this is that in JNI we should be very explicit about the lifespan
+ * of global references. Global references can quickly get out of control if not
+ * freed properly, and the developer should always be very aware of the lifespan
+ * of each global reference that is created in JNI so that leaks are prevented.
+ *
+ * This class is very explicit in its behavior, and it does not allow to perform
+ * unexpected conversions or unexpected ownership transfer. In practice, this
+ * class acts as a unique pointer where the underlying JNI reference can have
+ * one and just one owner. Transferring ownership is allowed but it is an
+ * explicit operation (implemented via move semantics and also via explicitly
+ * API calls).
+ *
+ * Note that this class doesn't receive an explicit JNIEnv at construction time.
+ * At destruction time it uses vanillajni::getCurrentEnv() to retrieve the
+ * JNIEnv.
+ *
+ * It is OK to cache a ScopedGlobalRef between different JNI native
+ * method calls.
+ */
+template <typename T>
+class ScopedGlobalRef {
+  static_assert(
+      std::is_same<T, jclass>() || std::is_same<T, jobject>() ||
+          std::is_same<T, jstring>() || std::is_same<T, jthrowable>() ||
+          std::is_same<T, jbyteArray>() || std::is_same<T, jintArray>() ||
+          std::is_same<T, jshortArray>() || std::is_same<T, jcharArray>() ||
+          std::is_same<T, jlongArray>() || std::is_same<T, jfloatArray>() ||
+          std::is_same<T, jdoubleArray>() || std::is_same<T, jobjectArray>() ||
+          std::is_same<T, jbooleanArray>(),
+      "ScopedGlobalRef instantiated for invalid type");
+
+ public:
+  /**
+   * Constructs a ScopedGlobalRef with a JNI global reference.
+   *
+   * @param globalRef the global reference to wrap. Can be NULL.
+   */
+  explicit ScopedGlobalRef(T globalRef) : mGlobalRef(globalRef) {}
+
+  /**
+   * Equivalent to ScopedGlobalRef(NULL)
+   */
+  explicit ScopedGlobalRef() : mGlobalRef(NULL) {}
+
+  /**
+   * Move construction is allowed.
+   */
+  ScopedGlobalRef(ScopedGlobalRef&& s) noexcept : mGlobalRef(s.release()) {}
+
+  /**
+   * Move assignment is allowed.
+   */
+  ScopedGlobalRef& operator=(ScopedGlobalRef&& s) noexcept {
+    reset(s.release());
+    return *this;
+  }
+
+  ~ScopedGlobalRef() {
+    reset();
+  }
+
+  /**
+   * Deletes the currently held reference and reassigns a new one to the
+   * ScopedGlobalRef.
+   */
+  void reset(T ptr = NULL) {
+    if (ptr != mGlobalRef) {
+      if (mGlobalRef != NULL) {
+        vanillajni::getCurrentEnv()->DeleteGlobalRef(mGlobalRef);
+      }
+      mGlobalRef = ptr;
+    }
+  }
+
+  /**
+   * Makes this ScopedGlobalRef not own the underlying JNI global reference.
+   * After calling this method, the ScopedGlobalRef will not delete the JNI
+   * global reference when the ScopedGlobalRef goes out of scope.
+   */
+  T release() {
+    T globalRef = mGlobalRef;
+    mGlobalRef = NULL;
+    return globalRef;
+  }
+
+  /**
+   * Returns the underlying JNI global reference.
+   */
+  T get() const {
+    return mGlobalRef;
+  }
+
+  /**
+   * Returns true if the underlying JNI reference is not NULL.
+   */
+  operator bool() const {
+    return mGlobalRef != NULL;
+  }
+
+  ScopedGlobalRef(const ScopedGlobalRef& ref) = delete;
+  ScopedGlobalRef& operator=(const ScopedGlobalRef& other) = delete;
+
+ private:
+  T mGlobalRef;
+};
+
+template <typename T>
+ScopedGlobalRef<T> make_global_ref(T globalRef) {
+  return ScopedGlobalRef<T>(globalRef);
+}
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/ScopedLocalRef.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/ScopedLocalRef.h
new file mode 100644
index 0000000..75af267
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/ScopedLocalRef.h
@@ -0,0 +1,141 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+/**
+ * This is a modified version of Android's ScopedLocalRef class that can be
+ * found in the Android's JNI code.
+ */
+#pragma once
+
+#include <jni.h>
+#include <cstddef>
+#include <type_traits>
+
+namespace facebook::yoga::vanillajni {
+
+/**
+ * ScopedLocalRef is a sort of smart reference that allows us to control the
+ * lifespan of a JNI local reference.
+ *
+ * This class is designed so that when a ScopedLocalRef goes out of scope, its
+ * destructor will delete -JNIEnv->DeleteLocalRef()- the underlying JNI
+ * reference.
+ *
+ * This class should be used to wrap all the local references that JNI
+ * gives us other than those that are passed to native methods at
+ * invocation time. The idea behind this is that in JNI we should be very
+ * explicit about the lifespan of local references. Local references can quickly
+ * get out of control, and the developer should always be very aware of the
+ * lifespan of each local reference that is created in JNI so that leaks are
+ * prevented.
+ *
+ * This class is very explicit in its behavior, and it does not allow to perform
+ * unexpected conversions or unexpected ownership transfer. In practice, this
+ * class acts as a unique pointer where the underlying JNI reference can have
+ * one and just one owner. Transferring ownership is allowed but it is an
+ * explicit operation (implemented via move semantics and also via explicitly
+ * API calls).
+ *
+ * As with standard JNI local references it is not a valid operation to keep a
+ * reference around between different native method calls.
+ */
+template <typename T>
+class ScopedLocalRef {
+  static_assert(
+      std::is_same<T, jclass>() || std::is_same<T, jobject>() ||
+          std::is_same<T, jstring>() || std::is_same<T, jthrowable>() ||
+          std::is_same<T, jbyteArray>() || std::is_same<T, jintArray>() ||
+          std::is_same<T, jshortArray>() || std::is_same<T, jcharArray>() ||
+          std::is_same<T, jlongArray>() || std::is_same<T, jfloatArray>() ||
+          std::is_same<T, jdoubleArray>() || std::is_same<T, jobjectArray>() ||
+          std::is_same<T, jbooleanArray>(),
+      "ScopedLocalRef instantiated for invalid type");
+
+ public:
+  /**
+   * Constructs a ScopedLocalRef with a JNI local reference.
+   *
+   * @param localRef the local reference to wrap. Can be NULL.
+   */
+  ScopedLocalRef(JNIEnv* env, T localRef) : mEnv(env), mLocalRef(localRef) {}
+
+  /**
+   * Equivalent to ScopedLocalRef(env, NULL)
+   */
+  explicit ScopedLocalRef(JNIEnv* env) : mEnv(env), mLocalRef(NULL) {}
+
+  /**
+   * Move construction is allowed.
+   */
+  ScopedLocalRef(ScopedLocalRef&& s) noexcept
+      : mEnv(s.mEnv), mLocalRef(s.release()) {}
+
+  /**
+   * Move assignment is allowed.
+   */
+  ScopedLocalRef& operator=(ScopedLocalRef&& s) noexcept {
+    reset(s.release());
+    mEnv = s.mEnv;
+    return *this;
+  }
+
+  ~ScopedLocalRef() {
+    reset();
+  }
+
+  /**
+   * Deletes the currently held reference and reassigns a new one to the
+   * ScopedLocalRef.
+   */
+  void reset(T ptr = NULL) {
+    if (ptr != mLocalRef) {
+      if (mLocalRef != NULL) {
+        mEnv->DeleteLocalRef(mLocalRef);
+      }
+      mLocalRef = ptr;
+    }
+  }
+
+  /**
+   * Makes this ScopedLocalRef not own the underlying JNI local reference. After
+   * calling this method, the ScopedLocalRef will not delete the JNI local
+   * reference when the ScopedLocalRef goes out of scope.
+   */
+  T release() {
+    T localRef = mLocalRef;
+    mLocalRef = NULL;
+    return localRef;
+  }
+
+  /**
+   * Returns the underlying JNI local reference.
+   */
+  T get() const {
+    return mLocalRef;
+  }
+
+  /**
+   * Returns true if the underlying JNI reference is not NULL.
+   */
+  operator bool() const {
+    return mLocalRef != NULL;
+  }
+
+  ScopedLocalRef(const ScopedLocalRef& ref) = delete;
+  ScopedLocalRef& operator=(const ScopedLocalRef& other) = delete;
+
+ private:
+  JNIEnv* mEnv;
+  T mLocalRef;
+};
+
+template <typename T>
+ScopedLocalRef<T> make_local_ref(JNIEnv* env, T localRef) {
+  return ScopedLocalRef<T>(env, localRef);
+}
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJNI.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJNI.h
new file mode 100644
index 0000000..9b26097
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJNI.h
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <yoga/Yoga.h>
+
+const short int LAYOUT_EDGE_SET_FLAG_INDEX = 0;
+const short int LAYOUT_WIDTH_INDEX = 1;
+const short int LAYOUT_HEIGHT_INDEX = 2;
+const short int LAYOUT_LEFT_INDEX = 3;
+const short int LAYOUT_TOP_INDEX = 4;
+const short int LAYOUT_DIRECTION_INDEX = 5;
+const short int LAYOUT_MARGIN_START_INDEX = 6;
+const short int LAYOUT_PADDING_START_INDEX = 10;
+const short int LAYOUT_BORDER_START_INDEX = 14;
+
+namespace {
+
+const int HAS_NEW_LAYOUT = 16;
+
+union YGNodeContext {
+  int32_t edgesSet = 0;
+  void* asVoidPtr;
+};
+
+class YGNodeEdges {
+  int32_t edges_;
+
+ public:
+  enum Edge {
+    MARGIN = 1,
+    PADDING = 2,
+    BORDER = 4,
+  };
+
+  explicit YGNodeEdges(YGNodeRef node) {
+    auto context = YGNodeContext{};
+    context.asVoidPtr = YGNodeGetContext(node);
+    edges_ = context.edgesSet;
+  }
+
+  void setOn(YGNodeRef node) {
+    auto context = YGNodeContext{};
+    context.edgesSet = edges_;
+    YGNodeSetContext(node, context.asVoidPtr);
+  }
+
+  bool has(Edge edge) {
+    return (edges_ & edge) == edge;
+  }
+
+  YGNodeEdges& add(Edge edge) {
+    edges_ |= edge;
+    return *this;
+  }
+
+  int get() {
+    return edges_;
+  }
+};
+
+struct YogaValue {
+  static constexpr jint NAN_BYTES = 0x7fc00000;
+
+  static jlong asJavaLong(const YGValue& value) {
+    uint32_t valueBytes = 0;
+    memcpy(&valueBytes, &value.value, sizeof valueBytes);
+    return ((jlong)value.unit) << 32 | valueBytes;
+  }
+  constexpr static jlong undefinedAsJavaLong() {
+    return ((jlong)YGUnitUndefined) << 32 | NAN_BYTES;
+  }
+};
+} // namespace
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJNIVanilla.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJNIVanilla.cpp
new file mode 100644
index 0000000..4d01703
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJNIVanilla.cpp
@@ -0,0 +1,977 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "YGJNIVanilla.h"
+#include <bit>
+#include <cstring>
+#include <iostream>
+#include <memory>
+#include "LayoutContext.h"
+#include "YGJNI.h"
+#include "YGJTypesVanilla.h"
+#include "YogaJniException.h"
+#include "common.h"
+#include "jni.h"
+
+using namespace facebook;
+using namespace facebook::yoga;
+using namespace facebook::yoga::vanillajni;
+
+static inline ScopedLocalRef<jobject> YGNodeJobject(YGNodeConstRef node) {
+  return LayoutContext::getNodeMap()->ref(node);
+}
+
+static inline YGNodeRef _jlong2YGNodeRef(jlong addr) {
+  return reinterpret_cast<YGNodeRef>(static_cast<intptr_t>(addr));
+}
+
+static inline YGConfigRef _jlong2YGConfigRef(jlong addr) {
+  return reinterpret_cast<YGConfigRef>(static_cast<intptr_t>(addr));
+}
+
+static jlong jni_YGConfigNewJNI(JNIEnv* /*env*/, jobject /*obj*/) {
+  return reinterpret_cast<jlong>(YGConfigNew());
+}
+
+static void
+jni_YGConfigFreeJNI(JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer) {
+  const YGConfigRef config = _jlong2YGConfigRef(nativePointer);
+  // unique_ptr will destruct the underlying global_ref, if present.
+  auto context = std::unique_ptr<ScopedGlobalRef<jobject>>{
+      static_cast<ScopedGlobalRef<jobject>*>(YGConfigGetContext(config))};
+  YGConfigFree(config);
+}
+
+static void jni_YGConfigSetExperimentalFeatureEnabledJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint feature,
+    jboolean enabled) {
+  const YGConfigRef config = _jlong2YGConfigRef(nativePointer);
+  YGConfigSetExperimentalFeatureEnabled(
+      config,
+      static_cast<YGExperimentalFeature>(feature),
+      static_cast<bool>(enabled));
+}
+
+static void jni_YGConfigSetUseWebDefaultsJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jboolean useWebDefaults) {
+  const YGConfigRef config = _jlong2YGConfigRef(nativePointer);
+  YGConfigSetUseWebDefaults(config, static_cast<bool>(useWebDefaults));
+}
+
+static void jni_YGConfigSetPointScaleFactorJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jfloat pixelsInPoint) {
+  const YGConfigRef config = _jlong2YGConfigRef(nativePointer);
+  YGConfigSetPointScaleFactor(config, pixelsInPoint);
+}
+
+static void jni_YGConfigSetErrataJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint errata) {
+  const YGConfigRef config = _jlong2YGConfigRef(nativePointer);
+  YGConfigSetErrata(config, static_cast<YGErrata>(errata));
+}
+
+static jint jni_YGConfigGetErrataJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer) {
+  const YGConfigRef config = _jlong2YGConfigRef(nativePointer);
+  return static_cast<jint>(YGConfigGetErrata(config));
+}
+
+static jlong jni_YGNodeNewJNI(JNIEnv* /*env*/, jobject /*obj*/) {
+  const YGNodeRef node = YGNodeNew();
+  YGNodeSetContext(node, YGNodeContext{}.asVoidPtr);
+  return reinterpret_cast<jlong>(node);
+}
+
+static jlong jni_YGNodeNewWithConfigJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong configPointer) {
+  const YGNodeRef node = YGNodeNewWithConfig(_jlong2YGConfigRef(configPointer));
+  YGNodeSetContext(node, YGNodeContext{}.asVoidPtr);
+  return reinterpret_cast<jlong>(node);
+}
+
+static int YGJNILogFunc(
+    const YGConfigConstRef config,
+    const YGNodeConstRef /*node*/,
+    YGLogLevel level,
+    const char* format,
+    va_list args) {
+  va_list argsCopy;
+  va_copy(argsCopy, args);
+  int result = vsnprintf(nullptr, 0, format, argsCopy);
+  std::vector<char> buffer(1 + static_cast<size_t>(result));
+  vsnprintf(buffer.data(), buffer.size(), format, args);
+
+  auto jloggerPtr =
+      static_cast<ScopedGlobalRef<jobject>*>(YGConfigGetContext(config));
+  if (jloggerPtr != nullptr) {
+    if (*jloggerPtr) {
+      JNIEnv* env = getCurrentEnv();
+
+      jclass cl = env->FindClass("com/facebook/yoga/YogaLogLevel");
+      static const jmethodID smethodId =
+          facebook::yoga::vanillajni::getStaticMethodId(
+              env, cl, "fromInt", "(I)Lcom/facebook/yoga/YogaLogLevel;");
+      ScopedLocalRef<jobject> logLevel =
+          facebook::yoga::vanillajni::callStaticObjectMethod(
+              env, cl, smethodId, level);
+
+      auto objectClass = facebook::yoga::vanillajni::make_local_ref(
+          env, env->GetObjectClass((*jloggerPtr).get()));
+      static const jmethodID methodId = facebook::yoga::vanillajni::getMethodId(
+          env,
+          objectClass.get(),
+          "log",
+          "(Lcom/facebook/yoga/YogaLogLevel;Ljava/lang/String;)V");
+      facebook::yoga::vanillajni::callVoidMethod(
+          env,
+          (*jloggerPtr).get(),
+          methodId,
+          logLevel.get(),
+          env->NewStringUTF(buffer.data()));
+    }
+  }
+
+  return result;
+}
+
+static void jni_YGConfigSetLoggerJNI(
+    JNIEnv* env,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jobject logger) {
+  const YGConfigRef config = _jlong2YGConfigRef(nativePointer);
+  auto context =
+      reinterpret_cast<ScopedGlobalRef<jobject>*>(YGConfigGetContext(config));
+
+  if (logger != nullptr) {
+    if (context == nullptr) {
+      context = new ScopedGlobalRef<jobject>();
+      YGConfigSetContext(config, context);
+    }
+
+    *context = newGlobalRef(env, logger);
+    YGConfigSetLogger(config, YGJNILogFunc);
+  } else {
+    if (context != nullptr) {
+      delete context;
+      YGConfigSetContext(config, nullptr);
+    }
+    YGConfigSetLogger(config, nullptr);
+  }
+}
+
+static void
+jni_YGNodeFinalizeJNI(JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer) {
+  if (nativePointer == 0) {
+    return;
+  }
+  const YGNodeRef node = _jlong2YGNodeRef(nativePointer);
+  YGNodeFinalize(node);
+}
+
+static void
+jni_YGNodeResetJNI(JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer) {
+  const YGNodeRef node = _jlong2YGNodeRef(nativePointer);
+  void* context = YGNodeGetContext(node);
+  YGNodeReset(node);
+  YGNodeSetContext(node, context);
+}
+
+static void jni_YGNodeInsertChildJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jlong childPointer,
+    jint index) {
+  YGNodeInsertChild(
+      _jlong2YGNodeRef(nativePointer),
+      _jlong2YGNodeRef(childPointer),
+      static_cast<uint32_t>(index));
+}
+
+static void jni_YGNodeSwapChildJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jlong childPointer,
+    jint index) {
+  YGNodeSwapChild(
+      _jlong2YGNodeRef(nativePointer),
+      _jlong2YGNodeRef(childPointer),
+      static_cast<uint32_t>(index));
+}
+
+static void jni_YGNodeSetIsReferenceBaselineJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jboolean isReferenceBaseline) {
+  YGNodeSetIsReferenceBaseline(
+      _jlong2YGNodeRef(nativePointer), static_cast<bool>(isReferenceBaseline));
+}
+
+static jboolean jni_YGNodeIsReferenceBaselineJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer) {
+  return static_cast<jboolean>(
+      YGNodeIsReferenceBaseline(_jlong2YGNodeRef(nativePointer)));
+}
+
+static void jni_YGNodeRemoveAllChildrenJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer) {
+  const YGNodeRef node = _jlong2YGNodeRef(nativePointer);
+  YGNodeRemoveAllChildren(node);
+}
+
+static void jni_YGNodeRemoveChildJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jlong childPointer) {
+  YGNodeRemoveChild(
+      _jlong2YGNodeRef(nativePointer), _jlong2YGNodeRef(childPointer));
+}
+
+static void
+YGTransferLayoutOutputsRecursive(JNIEnv* env, jobject thiz, YGNodeRef root) {
+  if (!YGNodeGetHasNewLayout(root)) {
+    return;
+  }
+  auto obj = YGNodeJobject(root);
+  if (!obj) {
+    return;
+  }
+
+  auto edgesSet = YGNodeEdges{root};
+
+  bool marginFieldSet = edgesSet.has(YGNodeEdges::MARGIN);
+  bool paddingFieldSet = edgesSet.has(YGNodeEdges::PADDING);
+  bool borderFieldSet = edgesSet.has(YGNodeEdges::BORDER);
+
+  int fieldFlags = edgesSet.get();
+  fieldFlags |= HAS_NEW_LAYOUT;
+
+  const int arrSize = 6 + (marginFieldSet ? 4 : 0) + (paddingFieldSet ? 4 : 0) +
+      (borderFieldSet ? 4 : 0);
+  float arr[18];
+  arr[LAYOUT_EDGE_SET_FLAG_INDEX] = static_cast<float>(fieldFlags);
+  arr[LAYOUT_WIDTH_INDEX] = YGNodeLayoutGetWidth(root);
+  arr[LAYOUT_HEIGHT_INDEX] = YGNodeLayoutGetHeight(root);
+  arr[LAYOUT_LEFT_INDEX] = YGNodeLayoutGetLeft(root);
+  arr[LAYOUT_TOP_INDEX] = YGNodeLayoutGetTop(root);
+  arr[LAYOUT_DIRECTION_INDEX] =
+      static_cast<float>(YGNodeLayoutGetDirection(root));
+  if (marginFieldSet) {
+    arr[LAYOUT_MARGIN_START_INDEX] = YGNodeLayoutGetMargin(root, YGEdgeLeft);
+    arr[LAYOUT_MARGIN_START_INDEX + 1] = YGNodeLayoutGetMargin(root, YGEdgeTop);
+    arr[LAYOUT_MARGIN_START_INDEX + 2] =
+        YGNodeLayoutGetMargin(root, YGEdgeRight);
+    arr[LAYOUT_MARGIN_START_INDEX + 3] =
+        YGNodeLayoutGetMargin(root, YGEdgeBottom);
+  }
+  if (paddingFieldSet) {
+    int paddingStartIndex =
+        LAYOUT_PADDING_START_INDEX - (marginFieldSet ? 0 : 4);
+    arr[paddingStartIndex] = YGNodeLayoutGetPadding(root, YGEdgeLeft);
+    arr[paddingStartIndex + 1] = YGNodeLayoutGetPadding(root, YGEdgeTop);
+    arr[paddingStartIndex + 2] = YGNodeLayoutGetPadding(root, YGEdgeRight);
+    arr[paddingStartIndex + 3] = YGNodeLayoutGetPadding(root, YGEdgeBottom);
+  }
+
+  if (borderFieldSet) {
+    int borderStartIndex = LAYOUT_BORDER_START_INDEX -
+        (marginFieldSet ? 0 : 4) - (paddingFieldSet ? 0 : 4);
+    arr[borderStartIndex] = YGNodeLayoutGetBorder(root, YGEdgeLeft);
+    arr[borderStartIndex + 1] = YGNodeLayoutGetBorder(root, YGEdgeTop);
+    arr[borderStartIndex + 2] = YGNodeLayoutGetBorder(root, YGEdgeRight);
+    arr[borderStartIndex + 3] = YGNodeLayoutGetBorder(root, YGEdgeBottom);
+  }
+
+  // Create scope to make sure to release any local refs created here
+  {
+    // Don't change this field name without changing the name of the field in
+    // Database.java
+    auto objectClass = facebook::yoga::vanillajni::make_local_ref(
+        env, env->GetObjectClass(obj.get()));
+    static const jfieldID arrField = facebook::yoga::vanillajni::getFieldId(
+        env, objectClass.get(), "arr", "[F");
+
+    ScopedLocalRef<jfloatArray> arrFinal =
+        make_local_ref(env, env->NewFloatArray(arrSize));
+    env->SetFloatArrayRegion(arrFinal.get(), 0, arrSize, arr);
+    env->SetObjectField(obj.get(), arrField, arrFinal.get());
+  }
+
+  YGNodeSetHasNewLayout(root, false);
+
+  for (size_t i = 0; i < YGNodeGetChildCount(root); i++) {
+    YGTransferLayoutOutputsRecursive(env, thiz, YGNodeGetChild(root, i));
+  }
+}
+
+static void jni_YGNodeCalculateLayoutJNI(
+    JNIEnv* env,
+    jobject obj,
+    jlong nativePointer,
+    jfloat width,
+    jfloat height,
+    jlongArray nativePointers,
+    jobjectArray javaNodes) {
+  try {
+    PtrJNodeMapVanilla* layoutContext = nullptr;
+    auto map = PtrJNodeMapVanilla{};
+    if (nativePointers != nullptr) {
+      map = PtrJNodeMapVanilla{nativePointers, javaNodes};
+      layoutContext = &map;
+    }
+
+    LayoutContext::Provider contextProvider(layoutContext);
+
+    const YGNodeRef root = _jlong2YGNodeRef(nativePointer);
+    YGNodeCalculateLayout(
+        root,
+        static_cast<float>(width),
+        static_cast<float>(height),
+        YGNodeStyleGetDirection(_jlong2YGNodeRef(nativePointer)));
+    YGTransferLayoutOutputsRecursive(env, obj, root);
+  } catch (const YogaJniException& jniException) {
+    ScopedLocalRef<jthrowable> throwable = jniException.getThrowable();
+    if (throwable.get() != nullptr) {
+      env->Throw(throwable.get());
+    }
+  } catch (const std::logic_error& ex) {
+    env->ExceptionClear();
+    jclass cl = env->FindClass("java/lang/IllegalStateException");
+    static const jmethodID methodId = facebook::yoga::vanillajni::getMethodId(
+        env, cl, "<init>", "(Ljava/lang/String;)V");
+    auto throwable = env->NewObject(cl, methodId, env->NewStringUTF(ex.what()));
+    env->Throw(static_cast<jthrowable>(throwable));
+  }
+}
+
+static void
+jni_YGNodeMarkDirtyJNI(JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer) {
+  YGNodeMarkDirty(_jlong2YGNodeRef(nativePointer));
+}
+
+static jboolean
+jni_YGNodeIsDirtyJNI(JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer) {
+  return (jboolean)YGNodeIsDirty(_jlong2YGNodeRef(nativePointer));
+}
+
+static void jni_YGNodeCopyStyleJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong dstNativePointer,
+    jlong srcNativePointer) {
+  YGNodeCopyStyle(
+      _jlong2YGNodeRef(dstNativePointer), _jlong2YGNodeRef(srcNativePointer));
+}
+
+#define YG_NODE_JNI_STYLE_PROP(javatype, type, name)                           \
+  static javatype jni_YGNodeStyleGet##name##JNI(                               \
+      JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer) {                 \
+    return (javatype)YGNodeStyleGet##name(_jlong2YGNodeRef(nativePointer));    \
+  }                                                                            \
+                                                                               \
+  static void jni_YGNodeStyleSet##name##JNI(                                   \
+      JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer, javatype value) { \
+    YGNodeStyleSet##name(                                                      \
+        _jlong2YGNodeRef(nativePointer), static_cast<type>(value));            \
+  }
+
+#define YG_NODE_JNI_STYLE_UNIT_PROP(name)                                    \
+  static jlong jni_YGNodeStyleGet##name##JNI(                                \
+      JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer) {               \
+    return YogaValue::asJavaLong(                                            \
+        YGNodeStyleGet##name(_jlong2YGNodeRef(nativePointer)));              \
+  }                                                                          \
+                                                                             \
+  static void jni_YGNodeStyleSet##name##JNI(                                 \
+      JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer, jfloat value) { \
+    YGNodeStyleSet##name(                                                    \
+        _jlong2YGNodeRef(nativePointer), static_cast<float>(value));         \
+  }                                                                          \
+                                                                             \
+  static void jni_YGNodeStyleSet##name##PercentJNI(                          \
+      JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer, jfloat value) { \
+    YGNodeStyleSet##name##Percent(                                           \
+        _jlong2YGNodeRef(nativePointer), static_cast<float>(value));         \
+  }
+
+#define YG_NODE_JNI_STYLE_UNIT_PROP_AUTO(name)                   \
+  YG_NODE_JNI_STYLE_UNIT_PROP(name)                              \
+  static void jni_YGNodeStyleSet##name##AutoJNI(                 \
+      JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer) {   \
+    YGNodeStyleSet##name##Auto(_jlong2YGNodeRef(nativePointer)); \
+  }
+
+#define YG_NODE_JNI_STYLE_EDGE_UNIT_PROP(name)                            \
+  static jlong jni_YGNodeStyleGet##name##JNI(                             \
+      JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer, jint edge) { \
+    return YogaValue::asJavaLong(YGNodeStyleGet##name(                    \
+        _jlong2YGNodeRef(nativePointer), static_cast<YGEdge>(edge)));     \
+  }                                                                       \
+                                                                          \
+  static void jni_YGNodeStyleSet##name##JNI(                              \
+      JNIEnv* /*env*/,                                                    \
+      jobject /*obj*/,                                                    \
+      jlong nativePointer,                                                \
+      jint edge,                                                          \
+      jfloat value) {                                                     \
+    YGNodeStyleSet##name(                                                 \
+        _jlong2YGNodeRef(nativePointer),                                  \
+        static_cast<YGEdge>(edge),                                        \
+        static_cast<float>(value));                                       \
+  }                                                                       \
+                                                                          \
+  static void jni_YGNodeStyleSet##name##PercentJNI(                       \
+      JNIEnv* /*env*/,                                                    \
+      jobject /*obj*/,                                                    \
+      jlong nativePointer,                                                \
+      jint edge,                                                          \
+      jfloat value) {                                                     \
+    YGNodeStyleSet##name##Percent(                                        \
+        _jlong2YGNodeRef(nativePointer),                                  \
+        static_cast<YGEdge>(edge),                                        \
+        static_cast<float>(value));                                       \
+  }
+
+YG_NODE_JNI_STYLE_PROP(jint, YGDirection, Direction);
+YG_NODE_JNI_STYLE_PROP(jint, YGFlexDirection, FlexDirection);
+YG_NODE_JNI_STYLE_PROP(jint, YGJustify, JustifyContent);
+YG_NODE_JNI_STYLE_PROP(jint, YGAlign, AlignItems);
+YG_NODE_JNI_STYLE_PROP(jint, YGAlign, AlignSelf);
+YG_NODE_JNI_STYLE_PROP(jint, YGAlign, AlignContent);
+YG_NODE_JNI_STYLE_PROP(jint, YGPositionType, PositionType);
+YG_NODE_JNI_STYLE_PROP(jint, YGWrap, FlexWrap);
+YG_NODE_JNI_STYLE_PROP(jint, YGOverflow, Overflow);
+YG_NODE_JNI_STYLE_PROP(jint, YGDisplay, Display);
+YG_NODE_JNI_STYLE_PROP(jfloat, float, Flex);
+YG_NODE_JNI_STYLE_PROP(jfloat, float, FlexGrow);
+YG_NODE_JNI_STYLE_PROP(jfloat, float, FlexShrink);
+
+YG_NODE_JNI_STYLE_UNIT_PROP_AUTO(FlexBasis);
+YG_NODE_JNI_STYLE_UNIT_PROP_AUTO(Width);
+YG_NODE_JNI_STYLE_UNIT_PROP(MinWidth);
+YG_NODE_JNI_STYLE_UNIT_PROP(MaxWidth);
+YG_NODE_JNI_STYLE_UNIT_PROP_AUTO(Height);
+YG_NODE_JNI_STYLE_UNIT_PROP(MinHeight);
+YG_NODE_JNI_STYLE_UNIT_PROP(MaxHeight);
+
+YG_NODE_JNI_STYLE_EDGE_UNIT_PROP(Position);
+
+static jlong jni_YGNodeStyleGetMarginJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint edge) {
+  YGNodeRef yogaNodeRef = _jlong2YGNodeRef(nativePointer);
+  if (!YGNodeEdges{yogaNodeRef}.has(YGNodeEdges::MARGIN)) {
+    return YogaValue::undefinedAsJavaLong();
+  }
+  return YogaValue::asJavaLong(
+      YGNodeStyleGetMargin(yogaNodeRef, static_cast<YGEdge>(edge)));
+}
+
+static void jni_YGNodeStyleSetMarginJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint edge,
+    jfloat margin) {
+  YGNodeRef yogaNodeRef = _jlong2YGNodeRef(nativePointer);
+  YGNodeEdges{yogaNodeRef}.add(YGNodeEdges::MARGIN).setOn(yogaNodeRef);
+  YGNodeStyleSetMargin(
+      yogaNodeRef, static_cast<YGEdge>(edge), static_cast<float>(margin));
+}
+
+static void jni_YGNodeStyleSetMarginPercentJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint edge,
+    jfloat percent) {
+  YGNodeRef yogaNodeRef = _jlong2YGNodeRef(nativePointer);
+  YGNodeEdges{yogaNodeRef}.add(YGNodeEdges::MARGIN).setOn(yogaNodeRef);
+  YGNodeStyleSetMarginPercent(
+      yogaNodeRef, static_cast<YGEdge>(edge), static_cast<float>(percent));
+}
+
+static void jni_YGNodeStyleSetMarginAutoJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint edge) {
+  YGNodeRef yogaNodeRef = _jlong2YGNodeRef(nativePointer);
+  YGNodeEdges{yogaNodeRef}.add(YGNodeEdges::MARGIN).setOn(yogaNodeRef);
+  YGNodeStyleSetMarginAuto(yogaNodeRef, static_cast<YGEdge>(edge));
+}
+
+static jlong jni_YGNodeStyleGetPaddingJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint edge) {
+  YGNodeRef yogaNodeRef = _jlong2YGNodeRef(nativePointer);
+  if (!YGNodeEdges{yogaNodeRef}.has(YGNodeEdges::PADDING)) {
+    return YogaValue::undefinedAsJavaLong();
+  }
+  return YogaValue::asJavaLong(
+      YGNodeStyleGetPadding(yogaNodeRef, static_cast<YGEdge>(edge)));
+}
+
+static void jni_YGNodeStyleSetPaddingJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint edge,
+    jfloat padding) {
+  YGNodeRef yogaNodeRef = _jlong2YGNodeRef(nativePointer);
+  YGNodeEdges{yogaNodeRef}.add(YGNodeEdges::PADDING).setOn(yogaNodeRef);
+  YGNodeStyleSetPadding(
+      yogaNodeRef, static_cast<YGEdge>(edge), static_cast<float>(padding));
+}
+
+static void jni_YGNodeStyleSetPaddingPercentJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint edge,
+    jfloat percent) {
+  YGNodeRef yogaNodeRef = _jlong2YGNodeRef(nativePointer);
+  YGNodeEdges{yogaNodeRef}.add(YGNodeEdges::PADDING).setOn(yogaNodeRef);
+  YGNodeStyleSetPaddingPercent(
+      yogaNodeRef, static_cast<YGEdge>(edge), static_cast<float>(percent));
+}
+
+static jfloat jni_YGNodeStyleGetBorderJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint edge) {
+  YGNodeRef yogaNodeRef = _jlong2YGNodeRef(nativePointer);
+  if (!YGNodeEdges{yogaNodeRef}.has(YGNodeEdges::BORDER)) {
+    return (jfloat)YGUndefined;
+  }
+  return (jfloat)YGNodeStyleGetBorder(yogaNodeRef, static_cast<YGEdge>(edge));
+}
+
+static void jni_YGNodeStyleSetBorderJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint edge,
+    jfloat border) {
+  YGNodeRef yogaNodeRef = _jlong2YGNodeRef(nativePointer);
+  YGNodeEdges{yogaNodeRef}.add(YGNodeEdges::BORDER).setOn(yogaNodeRef);
+  YGNodeStyleSetBorder(
+      yogaNodeRef, static_cast<YGEdge>(edge), static_cast<float>(border));
+}
+
+static void YGTransferLayoutDirection(YGNodeConstRef node, jobject javaNode) {
+  // Don't change this field name without changing the name of the field in
+  // Database.java
+  JNIEnv* env = getCurrentEnv();
+  auto objectClass = facebook::yoga::vanillajni::make_local_ref(
+      env, env->GetObjectClass(javaNode));
+  static const jfieldID layoutDirectionField =
+      facebook::yoga::vanillajni::getFieldId(
+          env, objectClass.get(), "mLayoutDirection", "I");
+  env->SetIntField(
+      javaNode,
+      layoutDirectionField,
+      static_cast<jint>(YGNodeLayoutGetDirection(node)));
+}
+
+static YGSize YGJNIMeasureFunc(
+    YGNodeConstRef node,
+    float width,
+    YGMeasureMode widthMode,
+    float height,
+    YGMeasureMode heightMode) {
+  if (auto obj = YGNodeJobject(node)) {
+    YGTransferLayoutDirection(node, obj.get());
+    JNIEnv* env = getCurrentEnv();
+    auto objectClass = facebook::yoga::vanillajni::make_local_ref(
+        env, env->GetObjectClass(obj.get()));
+    static const jmethodID methodId = facebook::yoga::vanillajni::getMethodId(
+        env, objectClass.get(), "measure", "(FIFI)J");
+    const auto measureResult = facebook::yoga::vanillajni::callLongMethod(
+        env, obj.get(), methodId, width, widthMode, height, heightMode);
+
+    static_assert(
+        sizeof(measureResult) == 8,
+        "Expected measureResult to be 8 bytes, or two 32 bit ints");
+
+    uint32_t wBits = 0xFFFFFFFF & (measureResult >> 32);
+    uint32_t hBits = 0xFFFFFFFF & measureResult;
+    auto measuredWidth = std::bit_cast<float>(wBits);
+    auto measuredHeight = std::bit_cast<float>(hBits);
+
+    return YGSize{measuredWidth, measuredHeight};
+  } else {
+    return YGSize{
+        widthMode == YGMeasureModeUndefined ? 0 : width,
+        heightMode == YGMeasureModeUndefined ? 0 : height,
+    };
+  }
+}
+
+static void jni_YGNodeSetHasMeasureFuncJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jboolean hasMeasureFunc) {
+  YGNodeSetMeasureFunc(
+      _jlong2YGNodeRef(nativePointer),
+      static_cast<bool>(hasMeasureFunc) ? YGJNIMeasureFunc : nullptr);
+}
+
+static float YGJNIBaselineFunc(YGNodeConstRef node, float width, float height) {
+  if (auto obj = YGNodeJobject(node)) {
+    JNIEnv* env = getCurrentEnv();
+    auto objectClass = facebook::yoga::vanillajni::make_local_ref(
+        env, env->GetObjectClass(obj.get()));
+    static const jmethodID methodId = facebook::yoga::vanillajni::getMethodId(
+        env, objectClass.get(), "baseline", "(FF)F");
+    return facebook::yoga::vanillajni::callFloatMethod(
+        env, obj.get(), methodId, width, height);
+  } else {
+    return height;
+  }
+}
+
+static void jni_YGNodeSetHasBaselineFuncJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jboolean hasBaselineFunc) {
+  YGNodeSetBaselineFunc(
+      _jlong2YGNodeRef(nativePointer),
+      static_cast<bool>(hasBaselineFunc) ? YGJNIBaselineFunc : nullptr);
+}
+
+static void jni_YGNodeSetAlwaysFormsContainingBlockJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jboolean alwaysFormsContainingBlock) {
+  YGNodeSetAlwaysFormsContainingBlock(
+      _jlong2YGNodeRef(nativePointer),
+      static_cast<bool>(alwaysFormsContainingBlock));
+}
+
+static jlong
+jni_YGNodeCloneJNI(JNIEnv* /*env*/, jobject /*obj*/, jlong nativePointer) {
+  auto node = _jlong2YGNodeRef(nativePointer);
+  const YGNodeRef clonedYogaNode = YGNodeClone(node);
+  YGNodeSetContext(clonedYogaNode, YGNodeGetContext(node));
+
+  return reinterpret_cast<jlong>(clonedYogaNode);
+}
+
+static jfloat jni_YGNodeStyleGetGapJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint gutter) {
+  return (jfloat)YGNodeStyleGetGap(
+      _jlong2YGNodeRef(nativePointer), static_cast<YGGutter>(gutter));
+}
+
+static void jni_YGNodeStyleSetGapJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint gutter,
+    jfloat gapLength) {
+  YGNodeStyleSetGap(
+      _jlong2YGNodeRef(nativePointer),
+      static_cast<YGGutter>(gutter),
+      static_cast<float>(gapLength));
+}
+
+static void jni_YGNodeStyleSetGapPercentJNI(
+    JNIEnv* /*env*/,
+    jobject /*obj*/,
+    jlong nativePointer,
+    jint gutter,
+    jfloat gapLength) {
+  YGNodeStyleSetGapPercent(
+      _jlong2YGNodeRef(nativePointer),
+      static_cast<YGGutter>(gutter),
+      static_cast<float>(gapLength));
+}
+
+// Yoga specific properties, not compatible with flexbox specification
+YG_NODE_JNI_STYLE_PROP(jfloat, float, AspectRatio);
+
+static JNINativeMethod methods[] = {
+    {"jni_YGConfigNewJNI", "()J", (void*)jni_YGConfigNewJNI},
+    {"jni_YGConfigFreeJNI", "(J)V", (void*)jni_YGConfigFreeJNI},
+    {"jni_YGConfigSetExperimentalFeatureEnabledJNI",
+     "(JIZ)V",
+     (void*)jni_YGConfigSetExperimentalFeatureEnabledJNI},
+    {"jni_YGConfigSetUseWebDefaultsJNI",
+     "(JZ)V",
+     (void*)jni_YGConfigSetUseWebDefaultsJNI},
+    {"jni_YGConfigSetPointScaleFactorJNI",
+     "(JF)V",
+     (void*)jni_YGConfigSetPointScaleFactorJNI},
+    {"jni_YGConfigSetErrataJNI", "(JI)V", (void*)jni_YGConfigSetErrataJNI},
+    {"jni_YGConfigGetErrataJNI", "(J)I", (void*)jni_YGConfigGetErrataJNI},
+    {"jni_YGConfigSetLoggerJNI",
+     "(JLcom/facebook/yoga/YogaLogger;)V",
+     (void*)jni_YGConfigSetLoggerJNI},
+    {"jni_YGNodeNewJNI", "()J", (void*)jni_YGNodeNewJNI},
+    {"jni_YGNodeNewWithConfigJNI", "(J)J", (void*)jni_YGNodeNewWithConfigJNI},
+    {"jni_YGNodeFinalizeJNI", "(J)V", (void*)jni_YGNodeFinalizeJNI},
+    {"jni_YGNodeResetJNI", "(J)V", (void*)jni_YGNodeResetJNI},
+    {"jni_YGNodeInsertChildJNI", "(JJI)V", (void*)jni_YGNodeInsertChildJNI},
+    {"jni_YGNodeSwapChildJNI", "(JJI)V", (void*)jni_YGNodeSwapChildJNI},
+    {"jni_YGNodeSetIsReferenceBaselineJNI",
+     "(JZ)V",
+     (void*)jni_YGNodeSetIsReferenceBaselineJNI},
+    {"jni_YGNodeIsReferenceBaselineJNI",
+     "(J)Z",
+     (void*)jni_YGNodeIsReferenceBaselineJNI},
+    {"jni_YGNodeRemoveAllChildrenJNI",
+     "(J)V",
+     (void*)jni_YGNodeRemoveAllChildrenJNI},
+    {"jni_YGNodeRemoveChildJNI", "(JJ)V", (void*)jni_YGNodeRemoveChildJNI},
+    {"jni_YGNodeCalculateLayoutJNI",
+     "(JFF[J[Lcom/facebook/yoga/YogaNodeJNIBase;)V",
+     (void*)jni_YGNodeCalculateLayoutJNI},
+    {"jni_YGNodeMarkDirtyJNI", "(J)V", (void*)jni_YGNodeMarkDirtyJNI},
+    {"jni_YGNodeIsDirtyJNI", "(J)Z", (void*)jni_YGNodeIsDirtyJNI},
+    {"jni_YGNodeCopyStyleJNI", "(JJ)V", (void*)jni_YGNodeCopyStyleJNI},
+    {"jni_YGNodeStyleGetDirectionJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetDirectionJNI},
+    {"jni_YGNodeStyleSetDirectionJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetDirectionJNI},
+    {"jni_YGNodeStyleGetFlexDirectionJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetFlexDirectionJNI},
+    {"jni_YGNodeStyleSetFlexDirectionJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetFlexDirectionJNI},
+    {"jni_YGNodeStyleGetJustifyContentJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetJustifyContentJNI},
+    {"jni_YGNodeStyleSetJustifyContentJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetJustifyContentJNI},
+    {"jni_YGNodeStyleGetAlignItemsJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetAlignItemsJNI},
+    {"jni_YGNodeStyleSetAlignItemsJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetAlignItemsJNI},
+    {"jni_YGNodeStyleGetAlignSelfJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetAlignSelfJNI},
+    {"jni_YGNodeStyleSetAlignSelfJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetAlignSelfJNI},
+    {"jni_YGNodeStyleGetAlignContentJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetAlignContentJNI},
+    {"jni_YGNodeStyleSetAlignContentJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetAlignContentJNI},
+    {"jni_YGNodeStyleGetPositionTypeJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetPositionTypeJNI},
+    {"jni_YGNodeStyleSetPositionTypeJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetPositionTypeJNI},
+    {"jni_YGNodeStyleGetFlexWrapJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetFlexWrapJNI},
+    {"jni_YGNodeStyleSetFlexWrapJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetFlexWrapJNI},
+    {"jni_YGNodeStyleGetOverflowJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetOverflowJNI},
+    {"jni_YGNodeStyleSetOverflowJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetOverflowJNI},
+    {"jni_YGNodeStyleGetDisplayJNI",
+     "(J)I",
+     (void*)jni_YGNodeStyleGetDisplayJNI},
+    {"jni_YGNodeStyleSetDisplayJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetDisplayJNI},
+    {"jni_YGNodeStyleGetFlexJNI", "(J)F", (void*)jni_YGNodeStyleGetFlexJNI},
+    {"jni_YGNodeStyleSetFlexJNI", "(JF)V", (void*)jni_YGNodeStyleSetFlexJNI},
+    {"jni_YGNodeStyleGetFlexGrowJNI",
+     "(J)F",
+     (void*)jni_YGNodeStyleGetFlexGrowJNI},
+    {"jni_YGNodeStyleSetFlexGrowJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetFlexGrowJNI},
+    {"jni_YGNodeStyleGetFlexShrinkJNI",
+     "(J)F",
+     (void*)jni_YGNodeStyleGetFlexShrinkJNI},
+    {"jni_YGNodeStyleSetFlexShrinkJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetFlexShrinkJNI},
+    {"jni_YGNodeStyleGetFlexBasisJNI",
+     "(J)J",
+     (void*)jni_YGNodeStyleGetFlexBasisJNI},
+    {"jni_YGNodeStyleSetFlexBasisJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetFlexBasisJNI},
+    {"jni_YGNodeStyleSetFlexBasisPercentJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetFlexBasisPercentJNI},
+    {"jni_YGNodeStyleSetFlexBasisAutoJNI",
+     "(J)V",
+     (void*)jni_YGNodeStyleSetFlexBasisAutoJNI},
+    {"jni_YGNodeStyleGetMarginJNI",
+     "(JI)J",
+     (void*)jni_YGNodeStyleGetMarginJNI},
+    {"jni_YGNodeStyleSetMarginJNI",
+     "(JIF)V",
+     (void*)jni_YGNodeStyleSetMarginJNI},
+    {"jni_YGNodeStyleSetMarginPercentJNI",
+     "(JIF)V",
+     (void*)jni_YGNodeStyleSetMarginPercentJNI},
+    {"jni_YGNodeStyleSetMarginAutoJNI",
+     "(JI)V",
+     (void*)jni_YGNodeStyleSetMarginAutoJNI},
+    {"jni_YGNodeStyleGetPaddingJNI",
+     "(JI)J",
+     (void*)jni_YGNodeStyleGetPaddingJNI},
+    {"jni_YGNodeStyleSetPaddingJNI",
+     "(JIF)V",
+     (void*)jni_YGNodeStyleSetPaddingJNI},
+    {"jni_YGNodeStyleSetPaddingPercentJNI",
+     "(JIF)V",
+     (void*)jni_YGNodeStyleSetPaddingPercentJNI},
+    {"jni_YGNodeStyleGetBorderJNI",
+     "(JI)F",
+     (void*)jni_YGNodeStyleGetBorderJNI},
+    {"jni_YGNodeStyleSetBorderJNI",
+     "(JIF)V",
+     (void*)jni_YGNodeStyleSetBorderJNI},
+    {"jni_YGNodeStyleGetPositionJNI",
+     "(JI)J",
+     (void*)jni_YGNodeStyleGetPositionJNI},
+    {"jni_YGNodeStyleSetPositionJNI",
+     "(JIF)V",
+     (void*)jni_YGNodeStyleSetPositionJNI},
+    {"jni_YGNodeStyleSetPositionPercentJNI",
+     "(JIF)V",
+     (void*)jni_YGNodeStyleSetPositionPercentJNI},
+    {"jni_YGNodeStyleGetWidthJNI", "(J)J", (void*)jni_YGNodeStyleGetWidthJNI},
+    {"jni_YGNodeStyleSetWidthJNI", "(JF)V", (void*)jni_YGNodeStyleSetWidthJNI},
+    {"jni_YGNodeStyleSetWidthPercentJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetWidthPercentJNI},
+    {"jni_YGNodeStyleSetWidthAutoJNI",
+     "(J)V",
+     (void*)jni_YGNodeStyleSetWidthAutoJNI},
+    {"jni_YGNodeStyleGetHeightJNI", "(J)J", (void*)jni_YGNodeStyleGetHeightJNI},
+    {"jni_YGNodeStyleSetHeightJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetHeightJNI},
+    {"jni_YGNodeStyleSetHeightPercentJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetHeightPercentJNI},
+    {"jni_YGNodeStyleSetHeightAutoJNI",
+     "(J)V",
+     (void*)jni_YGNodeStyleSetHeightAutoJNI},
+    {"jni_YGNodeStyleGetMinWidthJNI",
+     "(J)J",
+     (void*)jni_YGNodeStyleGetMinWidthJNI},
+    {"jni_YGNodeStyleSetMinWidthJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetMinWidthJNI},
+    {"jni_YGNodeStyleSetMinWidthPercentJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetMinWidthPercentJNI},
+    {"jni_YGNodeStyleGetMinHeightJNI",
+     "(J)J",
+     (void*)jni_YGNodeStyleGetMinHeightJNI},
+    {"jni_YGNodeStyleSetMinHeightJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetMinHeightJNI},
+    {"jni_YGNodeStyleSetMinHeightPercentJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetMinHeightPercentJNI},
+    {"jni_YGNodeStyleGetMaxWidthJNI",
+     "(J)J",
+     (void*)jni_YGNodeStyleGetMaxWidthJNI},
+    {"jni_YGNodeStyleSetMaxWidthJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetMaxWidthJNI},
+    {"jni_YGNodeStyleSetMaxWidthPercentJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetMaxWidthPercentJNI},
+    {"jni_YGNodeStyleGetMaxHeightJNI",
+     "(J)J",
+     (void*)jni_YGNodeStyleGetMaxHeightJNI},
+    {"jni_YGNodeStyleSetMaxHeightJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetMaxHeightJNI},
+    {"jni_YGNodeStyleSetMaxHeightPercentJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetMaxHeightPercentJNI},
+    {"jni_YGNodeStyleGetAspectRatioJNI",
+     "(J)F",
+     (void*)jni_YGNodeStyleGetAspectRatioJNI},
+    {"jni_YGNodeStyleSetAspectRatioJNI",
+     "(JF)V",
+     (void*)jni_YGNodeStyleSetAspectRatioJNI},
+    {"jni_YGNodeSetHasMeasureFuncJNI",
+     "(JZ)V",
+     (void*)jni_YGNodeSetHasMeasureFuncJNI},
+    {"jni_YGNodeStyleGetGapJNI", "(JI)F", (void*)jni_YGNodeStyleGetGapJNI},
+    {"jni_YGNodeStyleSetGapJNI", "(JIF)V", (void*)jni_YGNodeStyleSetGapJNI},
+    {"jni_YGNodeStyleSetGapPercentJNI",
+     "(JIF)V",
+     (void*)jni_YGNodeStyleSetGapPercentJNI},
+    {"jni_YGNodeSetHasBaselineFuncJNI",
+     "(JZ)V",
+     (void*)jni_YGNodeSetHasBaselineFuncJNI},
+    {"jni_YGNodeSetAlwaysFormsContainingBlockJNI",
+     "(JZ)V",
+     (void*)jni_YGNodeSetAlwaysFormsContainingBlockJNI},
+    {"jni_YGNodeCloneJNI", "(J)J", (void*)jni_YGNodeCloneJNI},
+};
+
+void YGJNIVanilla::registerNatives(JNIEnv* env) {
+  facebook::yoga::vanillajni::registerNatives(
+      env,
+      "com/facebook/yoga/YogaNative",
+      methods,
+      sizeof(methods) / sizeof(JNINativeMethod));
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJNIVanilla.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJNIVanilla.h
new file mode 100644
index 0000000..77b8b11
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJNIVanilla.h
@@ -0,0 +1,12 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "jni.h"
+
+namespace YGJNIVanilla {
+void registerNatives(JNIEnv* env);
+};
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJTypesVanilla.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJTypesVanilla.h
new file mode 100644
index 0000000..5d21871
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YGJTypesVanilla.h
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <map>
+#include <vector>
+
+#include <yoga/Yoga.h>
+
+#include "common.h"
+#include "jni.h"
+
+class PtrJNodeMapVanilla {
+  std::map<YGNodeConstRef, jsize> ptrsToIdxs_{};
+  jobjectArray javaNodes_{};
+
+ public:
+  PtrJNodeMapVanilla() = default;
+
+  PtrJNodeMapVanilla(jlongArray javaNativePointers, jobjectArray javaNodes)
+      : javaNodes_{javaNodes} {
+    using namespace facebook::yoga::vanillajni;
+
+    JNIEnv* env = getCurrentEnv();
+    jsize nativePointersSize = env->GetArrayLength(javaNativePointers);
+    std::vector<jlong> nativePointers(static_cast<size_t>(nativePointersSize));
+    env->GetLongArrayRegion(
+        javaNativePointers, 0, nativePointersSize, nativePointers.data());
+
+    for (jsize i = 0; i < nativePointersSize; ++i) {
+      ptrsToIdxs_[(YGNodeConstRef)nativePointers[static_cast<size_t>(i)]] = i;
+    }
+  }
+
+  facebook::yoga::vanillajni::ScopedLocalRef<jobject> ref(YGNodeConstRef node) {
+    using namespace facebook::yoga::vanillajni;
+
+    JNIEnv* env = getCurrentEnv();
+    auto idx = ptrsToIdxs_.find(node);
+    if (idx == ptrsToIdxs_.end()) {
+      return ScopedLocalRef<jobject>(env);
+    } else {
+      return make_local_ref(
+          env, env->GetObjectArrayElement(javaNodes_, idx->second));
+    }
+  }
+};
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YogaJniException.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YogaJniException.cpp
new file mode 100644
index 0000000..e8c6ca9
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YogaJniException.cpp
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "YogaJniException.h"
+#include <stdexcept>
+#include <string>
+#include "common.h"
+
+namespace facebook::yoga::vanillajni {
+
+YogaJniException::YogaJniException() {
+  jclass cl = getCurrentEnv()->FindClass("java/lang/RuntimeException");
+  static const jmethodID methodId = facebook::yoga::vanillajni::getMethodId(
+      getCurrentEnv(), cl, "<init>", "()V");
+  auto throwable = getCurrentEnv()->NewObject(cl, methodId);
+  throwable_ =
+      newGlobalRef(getCurrentEnv(), static_cast<jthrowable>(throwable));
+}
+
+YogaJniException::YogaJniException(jthrowable throwable) {
+  throwable_ = newGlobalRef(getCurrentEnv(), throwable);
+}
+
+YogaJniException::YogaJniException(YogaJniException&& rhs) noexcept
+    : throwable_(std::move(rhs.throwable_)) {}
+
+YogaJniException::YogaJniException(const YogaJniException& rhs) {
+  throwable_ = newGlobalRef(getCurrentEnv(), rhs.throwable_.get());
+}
+
+YogaJniException::~YogaJniException() {
+  try {
+    throwable_.reset();
+  } catch (...) {
+    std::terminate();
+  }
+}
+
+ScopedLocalRef<jthrowable> YogaJniException::getThrowable() const noexcept {
+  return make_local_ref(
+      getCurrentEnv(),
+      static_cast<jthrowable>(getCurrentEnv()->NewLocalRef(throwable_.get())));
+}
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YogaJniException.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YogaJniException.h
new file mode 100644
index 0000000..8c53d41
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/YogaJniException.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <stdexcept>
+#include <string>
+#include "common.h"
+
+namespace facebook::yoga::vanillajni {
+/**
+ * This class wraps a Java exception (jthrowable) into a C++ exception; A global
+ * reference to Java exception (jthrowable) is made so that the exception object
+ * does not gets cleared before jni call completion
+ */
+class YogaJniException : public std::exception {
+ public:
+  YogaJniException();
+  ~YogaJniException() override;
+
+  explicit YogaJniException(jthrowable throwable);
+
+  YogaJniException(YogaJniException&& rhs) noexcept;
+
+  YogaJniException(const YogaJniException& rhs);
+
+  ScopedLocalRef<jthrowable> getThrowable() const noexcept;
+
+ private:
+  ScopedGlobalRef<jthrowable> throwable_;
+};
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/common.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/common.cpp
new file mode 100644
index 0000000..d634b0a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/common.cpp
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "common.h"
+
+namespace facebook::yoga::vanillajni {
+
+void registerNatives(
+    JNIEnv* env,
+    const char* className,
+    const JNINativeMethod methods[],
+    size_t numMethods) {
+  jclass clazz = env->FindClass(className);
+
+  assertNoPendingJniExceptionIf(env, clazz == nullptr);
+
+  auto result =
+      env->RegisterNatives(clazz, methods, static_cast<int32_t>(numMethods));
+
+  assertNoPendingJniExceptionIf(env, result != JNI_OK);
+}
+
+jmethodID getStaticMethodId(
+    JNIEnv* env,
+    jclass clazz,
+    const char* methodName,
+    const char* methodDescriptor) {
+  jmethodID methodId =
+      env->GetStaticMethodID(clazz, methodName, methodDescriptor);
+  assertNoPendingJniExceptionIf(env, methodId == nullptr);
+  return methodId;
+}
+
+jmethodID getMethodId(
+    JNIEnv* env,
+    jclass clazz,
+    const char* methodName,
+    const char* methodDescriptor) {
+  jmethodID methodId = env->GetMethodID(clazz, methodName, methodDescriptor);
+  assertNoPendingJniExceptionIf(env, methodId == nullptr);
+  return methodId;
+}
+
+jfieldID getFieldId(
+    JNIEnv* env,
+    jclass clazz,
+    const char* fieldName,
+    const char* fieldSignature) {
+  jfieldID fieldId = env->GetFieldID(clazz, fieldName, fieldSignature);
+  assertNoPendingJniExceptionIf(env, fieldId == nullptr);
+  return fieldId;
+}
+
+#define DEFINE_CALL_METHOD_FOR_PRIMITIVE_IMPLEMENTATION(jnitype, readableType) \
+  DEFINE_CALL_METHOD_FOR_PRIMITIVE_INTERFACE(jnitype, readableType) {          \
+    va_list args;                                                              \
+    va_start(args, methodId);                                                  \
+    jnitype result = env->Call##readableType##MethodV(obj, methodId, args);    \
+    va_end(args);                                                              \
+    assertNoPendingJniException(env);                                          \
+    return result;                                                             \
+  }
+
+DEFINE_CALL_METHOD_FOR_PRIMITIVE_IMPLEMENTATION(jlong, Long);
+DEFINE_CALL_METHOD_FOR_PRIMITIVE_IMPLEMENTATION(jfloat, Float);
+
+DEFINE_CALL_METHOD_FOR_PRIMITIVE_INTERFACE(void, Void) {
+  va_list args;
+  va_start(args, methodId);
+  env->CallVoidMethodV(obj, methodId, args);
+  va_end(args);
+  assertNoPendingJniException(env);
+}
+
+ScopedLocalRef<jobject>
+callStaticObjectMethod(JNIEnv* env, jclass clazz, jmethodID methodId, ...) {
+  va_list args;
+  va_start(args, methodId);
+  jobject result = env->CallStaticObjectMethodV(clazz, methodId, args);
+  va_end(args);
+  assertNoPendingJniExceptionIf(env, result == nullptr);
+  return make_local_ref(env, result);
+}
+
+ScopedGlobalRef<jobject> newGlobalRef(JNIEnv* env, jobject obj) {
+  jobject result = env->NewGlobalRef(obj);
+
+  if (result == nullptr) {
+    logErrorMessageAndDie("Could not obtain global reference from object");
+  }
+
+  return make_global_ref(result);
+}
+
+ScopedGlobalRef<jthrowable> newGlobalRef(JNIEnv* env, jthrowable obj) {
+  auto result = static_cast<jthrowable>(env->NewGlobalRef(obj));
+
+  if (result == nullptr) {
+    logErrorMessageAndDie("Could not obtain global reference from object");
+  }
+
+  return make_global_ref(result);
+}
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/common.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/common.h
new file mode 100644
index 0000000..eb63554
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/common.h
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+#include "ScopedGlobalRef.h"
+#include "ScopedLocalRef.h"
+
+namespace facebook::yoga::vanillajni {
+
+/**
+ * Registers a set of methods for a JNI class. Aborts if registration fails.
+ */
+void registerNatives(
+    JNIEnv* env,
+    const char* className,
+    const JNINativeMethod methods[],
+    size_t numMethods);
+
+/**
+ * Returns a jmethodID for a class static method. Aborts if any error happens.
+ */
+jmethodID getStaticMethodId(
+    JNIEnv* env,
+    jclass clazz,
+    const char* methodName,
+    const char* methodDescriptor);
+
+/**
+ * Returns a jmethodID for a class non-static method. Aborts if any error
+ * happens.
+ */
+jmethodID getMethodId(
+    JNIEnv* env,
+    jclass clazz,
+    const char* methodName,
+    const char* methodDescriptor);
+
+/**
+ * Returns a class non-static field ID. Aborts if any error happens.
+ */
+jfieldID getFieldId(
+    JNIEnv* env,
+    jclass clazz,
+    const char* fieldName,
+    const char* fieldSignature);
+
+// Helper methods to call a non-static method on an object depending on the
+// return type. Each method will abort the execution if an error
+// (such as a Java pending exception) is detected after invoking the
+// Java method.
+#define DEFINE_CALL_METHOD_FOR_PRIMITIVE_INTERFACE(jnitype, readableType) \
+  jnitype call##readableType##Method(                                     \
+      JNIEnv* env, jobject obj, jmethodID methodId, ...)
+DEFINE_CALL_METHOD_FOR_PRIMITIVE_INTERFACE(void, Void);
+DEFINE_CALL_METHOD_FOR_PRIMITIVE_INTERFACE(jlong, Long);
+DEFINE_CALL_METHOD_FOR_PRIMITIVE_INTERFACE(jfloat, Float);
+
+ScopedLocalRef<jobject>
+callStaticObjectMethod(JNIEnv* env, jclass clazz, jmethodID methodId, ...);
+
+/**
+ * Given a local or a global reference, this method creates a new global
+ * reference out of it. If any error happens, aborts the process.
+ */
+ScopedGlobalRef<jobject> newGlobalRef(JNIEnv* env, jobject obj);
+
+ScopedGlobalRef<jthrowable> newGlobalRef(JNIEnv* env, jthrowable obj);
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/corefunctions.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/corefunctions.cpp
new file mode 100644
index 0000000..6fcbf78
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/corefunctions.cpp
@@ -0,0 +1,91 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "corefunctions.h"
+#include "YogaJniException.h"
+#include "macros.h"
+
+namespace facebook::yoga::vanillajni {
+
+namespace {
+JavaVM* globalVm = nullptr;
+struct JavaVMInitializer {
+  explicit JavaVMInitializer(JavaVM* vm) {
+    if (!vm) {
+      logErrorMessageAndDie(
+          "You cannot pass a NULL JavaVM to ensureInitialized");
+    }
+    globalVm = vm;
+  }
+};
+} // namespace
+
+jint ensureInitialized(JNIEnv** env, JavaVM* vm) {
+  static JavaVMInitializer init(vm);
+
+  if (env == nullptr) {
+    logErrorMessageAndDie(
+        "Need to pass a valid JNIEnv pointer to vanillajni initialization "
+        "routine");
+  }
+
+  if (vm->GetEnv(reinterpret_cast<void**>(env), JNI_VERSION_1_6) != JNI_OK) {
+    logErrorMessageAndDie(
+        "Error retrieving JNIEnv during initialization of vanillajni");
+  }
+
+  return JNI_VERSION_1_6;
+}
+
+// TODO why we need JNIEXPORT for getCurrentEnv ?
+JNIEXPORT JNIEnv* getCurrentEnv() {
+  JNIEnv* env = nullptr;
+  jint ret = globalVm->GetEnv((void**)&env, JNI_VERSION_1_6);
+  if (ret != JNI_OK) {
+    logErrorMessageAndDie(
+        "There was an error retrieving the current JNIEnv. Make sure the "
+        "current thread is attached");
+  }
+  return env;
+}
+
+void logErrorMessageAndDie(const char* message) {
+  (void)message;
+  VANILLAJNI_LOG_ERROR(
+      "VanillaJni",
+      "Aborting due to error detected in native code: %s",
+      message);
+  VANILLAJNI_DIE();
+}
+
+void assertNoPendingJniException(JNIEnv* env) {
+  if (env->ExceptionCheck() == JNI_FALSE) {
+    return;
+  }
+
+  auto throwable = env->ExceptionOccurred();
+  if (throwable == nullptr) {
+    logErrorMessageAndDie("Unable to get pending JNI exception.");
+  }
+  env->ExceptionClear();
+  throw YogaJniException(throwable);
+}
+
+void assertNoPendingJniExceptionIf(JNIEnv* env, bool condition) {
+  if (!condition) {
+    return;
+  }
+
+  if (env->ExceptionCheck() == JNI_TRUE) {
+    assertNoPendingJniException(env);
+    return;
+  }
+
+  throw YogaJniException();
+}
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/corefunctions.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/corefunctions.h
new file mode 100644
index 0000000..ced9480
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/corefunctions.h
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <jni.h>
+#include <cstddef>
+
+namespace facebook::yoga::vanillajni {
+
+/**
+ * This method has to be called before using the vanillajni library. This method
+ * is typically called when doing initialization in the "on load" JNI hook of a
+ * particular library.
+ *
+ * This method is thread safe, and after the first time it's called it has no
+ * initialization effect.
+ *
+ * @param  env use this output parameter to get a JNIEnv to use for things such
+ * as registering native methods and such.
+ * @param  vm  the VM instance passed by JNI. This is usually the VM instance
+ * that is passed to the "on load" JNI hook.
+ * @return an integer value to return from the "on load" hook.
+ */
+jint ensureInitialized(JNIEnv** env, JavaVM* vm);
+
+/**
+ * Returns a JNIEnv* suitable for the current thread. If the current thread is
+ * not attached to the Java VM, this method aborts execution.
+ */
+JNIEnv* getCurrentEnv();
+
+/**
+ * Logs an error message and aborts the current process.
+ */
+void logErrorMessageAndDie(const char* message);
+
+/**
+ * Checks whether there is a pending JNI exception. If so, it logs an error
+ * message and aborts the current process. Otherwise it does nothing.
+ */
+void assertNoPendingJniException(JNIEnv* env);
+
+void assertNoPendingJniExceptionIf(JNIEnv* env, bool condition);
+
+} // namespace facebook::yoga::vanillajni
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/macros.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/macros.h
new file mode 100644
index 0000000..2e2632d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/macros.h
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <cstdlib>
+
+#ifdef __ANDROID__
+#include <android/log.h>
+#endif
+
+#ifdef __ANDROID__
+#define VANILLAJNI_LOG_ERROR(tag, format, ...) \
+  __android_log_print(ANDROID_LOG_ERROR, tag, format, ##__VA_ARGS__)
+#else
+#define VANILLAJNI_LOG_ERROR(tag, format, ...)
+#endif
+
+#define VANILLAJNI_DIE() std::abort()
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/yogajni.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/yogajni.cpp
new file mode 100644
index 0000000..5bc9943
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/first-party/yogajni/jni/yogajni.cpp
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "YGJNIVanilla.h"
+#include "common.h"
+
+using namespace facebook::yoga;
+
+jint JNI_OnLoad(JavaVM* vm, void* /*unused*/) {
+  JNIEnv* env = nullptr;
+  jint ret = vanillajni::ensureInitialized(&env, vm);
+  YGJNIVanilla::registerNatives(env);
+  return ret;
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/prebuilt/lib/DUMMY b/node_modules/react-native/ReactAndroid/bin/src/main/jni/prebuilt/lib/DUMMY
new file mode 100644
index 0000000..dc29e4d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/prebuilt/lib/DUMMY
@@ -0,0 +1 @@
+# just a dummy temporarily to make BUCK happy about folder not present before Gradle built it
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/AsyncEventBeat.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/AsyncEventBeat.cpp
new file mode 100644
index 0000000..4160e35
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/AsyncEventBeat.cpp
@@ -0,0 +1,69 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <jsi/jsi.h>
+#include <react/renderer/core/EventBeat.h>
+#include <react/renderer/uimanager/primitives.h>
+
+#include "AsyncEventBeat.h"
+
+namespace facebook::react {
+
+AsyncEventBeat::AsyncEventBeat(
+    const EventBeat::SharedOwnerBox& ownerBox,
+    EventBeatManager* eventBeatManager,
+    RuntimeExecutor runtimeExecutor,
+    jni::global_ref<jobject> javaUIManager)
+    : EventBeat(ownerBox),
+      eventBeatManager_(eventBeatManager),
+      runtimeExecutor_(std::move(runtimeExecutor)),
+      javaUIManager_(std::move(javaUIManager)) {
+  eventBeatManager->addObserver(*this);
+}
+
+AsyncEventBeat::~AsyncEventBeat() {
+  eventBeatManager_->removeObserver(*this);
+}
+
+void AsyncEventBeat::tick() const {
+  if (!isRequested_ || isBeatCallbackScheduled_) {
+    return;
+  }
+
+  isRequested_ = false;
+  isBeatCallbackScheduled_ = true;
+
+  runtimeExecutor_([this, ownerBox = ownerBox_](jsi::Runtime& runtime) {
+    auto owner = ownerBox->owner.lock();
+    if (!owner) {
+      return;
+    }
+
+    isBeatCallbackScheduled_ = false;
+    if (beatCallback_) {
+      beatCallback_(runtime);
+    }
+  });
+}
+
+void AsyncEventBeat::induce() const {
+  tick();
+}
+
+void AsyncEventBeat::request() const {
+  bool alreadyRequested = isRequested_;
+  EventBeat::request();
+  if (!alreadyRequested) {
+    // Notifies java side that an event will be dispatched (e.g. LayoutEvent)
+    static auto onRequestEventBeat =
+        jni::findClassStatic("com/facebook/react/fabric/FabricUIManager")
+            ->getMethod<void()>("onRequestEventBeat");
+    onRequestEventBeat(javaUIManager_);
+  }
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/AsyncEventBeat.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/AsyncEventBeat.h
new file mode 100644
index 0000000..a45567a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/AsyncEventBeat.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <react/renderer/core/EventBeat.h>
+
+#include "EventBeatManager.h"
+
+namespace facebook::react {
+
+class AsyncEventBeat final : public EventBeat, public EventBeatManagerObserver {
+ public:
+  AsyncEventBeat(
+      const EventBeat::SharedOwnerBox& ownerBox,
+      EventBeatManager* eventBeatManager,
+      RuntimeExecutor runtimeExecutor,
+      jni::global_ref<jobject> javaUIManager);
+
+  ~AsyncEventBeat() override;
+
+  void tick() const override;
+
+  void induce() const override;
+
+  void request() const override;
+
+ private:
+  EventBeatManager* eventBeatManager_;
+  RuntimeExecutor runtimeExecutor_;
+  jni::global_ref<jobject> javaUIManager_;
+  mutable std::atomic<bool> isBeatCallbackScheduled_{false};
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/Binding.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/Binding.cpp
new file mode 100644
index 0000000..280ae46
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/Binding.cpp
@@ -0,0 +1,595 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "Binding.h"
+
+#include "AsyncEventBeat.h"
+#include "ComponentFactory.h"
+#include "EventBeatManager.h"
+#include "EventEmitterWrapper.h"
+#include "FabricMountingManager.h"
+#include "JBackgroundExecutor.h"
+#include "ReactNativeConfigHolder.h"
+#include "SurfaceHandlerBinding.h"
+
+#include <cxxreact/SystraceSection.h>
+#include <fbjni/fbjni.h>
+#include <glog/logging.h>
+#include <jsi/JSIDynamic.h>
+#include <jsi/jsi.h>
+#include <react/featureflags/ReactNativeFeatureFlags.h>
+#include <react/renderer/animations/LayoutAnimationDriver.h>
+#include <react/renderer/componentregistry/ComponentDescriptorFactory.h>
+#include <react/renderer/core/EventBeat.h>
+#include <react/renderer/core/EventEmitter.h>
+#include <react/renderer/core/conversions.h>
+#include <react/renderer/scheduler/Scheduler.h>
+#include <react/renderer/scheduler/SchedulerDelegate.h>
+#include <react/renderer/scheduler/SchedulerToolbox.h>
+#include <react/renderer/uimanager/primitives.h>
+#include <react/utils/ContextContainer.h>
+#include <react/utils/CoreFeatures.h>
+
+namespace facebook::react {
+
+jni::local_ref<Binding::jhybriddata> Binding::initHybrid(
+    jni::alias_ref<jclass>) {
+  return makeCxxInstance();
+}
+
+// Thread-safe getter
+std::shared_ptr<Scheduler> Binding::getScheduler() {
+  std::shared_lock lock(installMutex_);
+  // Need to return a copy of the shared_ptr to make sure this is safe if called
+  // concurrently with uninstallFabricUIManager
+  return scheduler_;
+}
+
+jni::local_ref<ReadableNativeMap::jhybridobject>
+Binding::getInspectorDataForInstance(
+    jni::alias_ref<EventEmitterWrapper::javaobject> eventEmitterWrapper) {
+  auto scheduler = getScheduler();
+  if (!scheduler) {
+    LOG(ERROR) << "Binding::startSurface: scheduler disappeared";
+    return ReadableNativeMap::newObjectCxxArgs(folly::dynamic::object());
+  }
+
+  EventEmitterWrapper* cEventEmitter = cthis(eventEmitterWrapper);
+  InspectorData data =
+      scheduler->getInspectorDataForInstance(*cEventEmitter->eventEmitter);
+
+  folly::dynamic result = folly::dynamic::object;
+  result["fileName"] = data.fileName;
+  result["lineNumber"] = data.lineNumber;
+  result["columnNumber"] = data.columnNumber;
+  result["selectedIndex"] = data.selectedIndex;
+  result["props"] = data.props;
+  auto hierarchy = folly::dynamic::array();
+  for (const auto& hierarchyItem : data.hierarchy) {
+    hierarchy.push_back(hierarchyItem);
+  }
+  result["hierarchy"] = hierarchy;
+  return ReadableNativeMap::newObjectCxxArgs(result);
+}
+
+constexpr static auto kReactFeatureFlagsJavaDescriptor =
+    "com/facebook/react/config/ReactFeatureFlags";
+
+static bool getFeatureFlagValue(const char* name) {
+  static const auto reactFeatureFlagsClass =
+      jni::findClassStatic(kReactFeatureFlagsJavaDescriptor);
+  const auto field = reactFeatureFlagsClass->getStaticField<jboolean>(name);
+  return reactFeatureFlagsClass->getStaticFieldValue(field);
+}
+
+void Binding::setPixelDensity(float pointScaleFactor) {
+  pointScaleFactor_ = pointScaleFactor;
+}
+
+void Binding::driveCxxAnimations() {
+  getScheduler()->animationTick();
+}
+
+void Binding::reportMount(SurfaceId surfaceId) {
+  auto scheduler = getScheduler();
+  if (!scheduler) {
+    LOG(ERROR) << "Binding::reportMount: scheduler disappeared";
+    return;
+  }
+  scheduler->reportMount(surfaceId);
+}
+
+#pragma mark - Surface management
+
+void Binding::startSurface(
+    jint surfaceId,
+    jni::alias_ref<jstring> moduleName,
+    NativeMap* initialProps) {
+  SystraceSection s("FabricUIManagerBinding::startSurface");
+
+  auto scheduler = getScheduler();
+  if (!scheduler) {
+    LOG(ERROR) << "Binding::startSurface: scheduler disappeared";
+    return;
+  }
+
+  auto layoutContext = LayoutContext{};
+  layoutContext.pointScaleFactor = pointScaleFactor_;
+
+  auto surfaceHandler = SurfaceHandler{moduleName->toStdString(), surfaceId};
+  surfaceHandler.setContextContainer(scheduler->getContextContainer());
+  surfaceHandler.setProps(initialProps->consume());
+  surfaceHandler.constraintLayout({}, layoutContext);
+
+  scheduler->registerSurface(surfaceHandler);
+
+  surfaceHandler.start();
+
+  surfaceHandler.getMountingCoordinator()->setMountingOverrideDelegate(
+      animationDriver_);
+
+  {
+    SystraceSection s2("FabricUIManagerBinding::startSurface::surfaceId::lock");
+    std::unique_lock lock(surfaceHandlerRegistryMutex_);
+    SystraceSection s3("FabricUIManagerBinding::startSurface::surfaceId");
+    surfaceHandlerRegistry_.emplace(surfaceId, std::move(surfaceHandler));
+  }
+
+  auto mountingManager = getMountingManager("startSurface");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->onSurfaceStart(surfaceId);
+}
+
+void Binding::startSurfaceWithConstraints(
+    jint surfaceId,
+    jni::alias_ref<jstring> moduleName,
+    NativeMap* initialProps,
+    jfloat minWidth,
+    jfloat maxWidth,
+    jfloat minHeight,
+    jfloat maxHeight,
+    jfloat offsetX,
+    jfloat offsetY,
+    jboolean isRTL,
+    jboolean doLeftAndRightSwapInRTL) {
+  SystraceSection s("FabricUIManagerBinding::startSurfaceWithConstraints");
+
+  if (enableFabricLogs_) {
+    LOG(WARNING)
+        << "Binding::startSurfaceWithConstraints() was called (address: "
+        << this << ", surfaceId: " << surfaceId << ").";
+  }
+
+  auto scheduler = getScheduler();
+  if (!scheduler) {
+    LOG(ERROR) << "Binding::startSurfaceWithConstraints: scheduler disappeared";
+    return;
+  }
+
+  auto minimumSize =
+      Size{minWidth / pointScaleFactor_, minHeight / pointScaleFactor_};
+  auto maximumSize =
+      Size{maxWidth / pointScaleFactor_, maxHeight / pointScaleFactor_};
+
+  LayoutContext context;
+  context.viewportOffset =
+      Point{offsetX / pointScaleFactor_, offsetY / pointScaleFactor_};
+  context.pointScaleFactor = {pointScaleFactor_};
+  context.swapLeftAndRightInRTL = doLeftAndRightSwapInRTL;
+  LayoutConstraints constraints = {};
+  constraints.minimumSize = minimumSize;
+  constraints.maximumSize = maximumSize;
+  constraints.layoutDirection =
+      isRTL ? LayoutDirection::RightToLeft : LayoutDirection::LeftToRight;
+
+  auto surfaceHandler = SurfaceHandler{moduleName->toStdString(), surfaceId};
+  surfaceHandler.setContextContainer(scheduler->getContextContainer());
+  surfaceHandler.setProps(initialProps->consume());
+  surfaceHandler.constraintLayout(constraints, context);
+
+  scheduler->registerSurface(surfaceHandler);
+
+  surfaceHandler.start();
+
+  surfaceHandler.getMountingCoordinator()->setMountingOverrideDelegate(
+      animationDriver_);
+
+  {
+    SystraceSection s2(
+        "FabricUIManagerBinding::startSurfaceWithConstraints::surfaceId::lock");
+    std::unique_lock lock(surfaceHandlerRegistryMutex_);
+    SystraceSection s3(
+        "FabricUIManagerBinding::startSurfaceWithConstraints::surfaceId");
+    surfaceHandlerRegistry_.emplace(surfaceId, std::move(surfaceHandler));
+  }
+
+  auto mountingManager = getMountingManager("startSurfaceWithConstraints");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->onSurfaceStart(surfaceId);
+}
+
+void Binding::stopSurface(jint surfaceId) {
+  SystraceSection s("FabricUIManagerBinding::stopSurface");
+
+  if (enableFabricLogs_) {
+    LOG(WARNING) << "Binding::stopSurface() was called (address: " << this
+                 << ", surfaceId: " << surfaceId << ").";
+  }
+
+  auto scheduler = getScheduler();
+  if (!scheduler) {
+    LOG(ERROR) << "Binding::stopSurface: scheduler disappeared";
+    return;
+  }
+
+  {
+    std::unique_lock lock(surfaceHandlerRegistryMutex_);
+
+    auto iterator = surfaceHandlerRegistry_.find(surfaceId);
+
+    if (iterator == surfaceHandlerRegistry_.end()) {
+      LOG(ERROR) << "Binding::stopSurface: Surface with given id is not found";
+      return;
+    }
+
+    auto surfaceHandler = std::move(iterator->second);
+    surfaceHandlerRegistry_.erase(iterator);
+    surfaceHandler.stop();
+    scheduler->unregisterSurface(surfaceHandler);
+  }
+
+  auto mountingManager = getMountingManager("stopSurface");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->onSurfaceStop(surfaceId);
+}
+
+void Binding::registerSurface(SurfaceHandlerBinding* surfaceHandlerBinding) {
+  const auto& surfaceHandler = surfaceHandlerBinding->getSurfaceHandler();
+  auto scheduler = getScheduler();
+  if (!scheduler) {
+    LOG(ERROR) << "Binding::registerSurface: scheduler disappeared";
+    return;
+  }
+  scheduler->registerSurface(surfaceHandler);
+
+  auto mountingManager = getMountingManager("registerSurface");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->onSurfaceStart(surfaceHandler.getSurfaceId());
+}
+
+void Binding::unregisterSurface(SurfaceHandlerBinding* surfaceHandlerBinding) {
+  const auto& surfaceHandler = surfaceHandlerBinding->getSurfaceHandler();
+  auto scheduler = getScheduler();
+  if (!scheduler) {
+    LOG(ERROR) << "Binding::unregisterSurface: scheduler disappeared";
+    return;
+  }
+  scheduler->unregisterSurface(surfaceHandler);
+
+  auto mountingManager = getMountingManager("unregisterSurface");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->onSurfaceStop(surfaceHandler.getSurfaceId());
+}
+
+void Binding::setConstraints(
+    jint surfaceId,
+    jfloat minWidth,
+    jfloat maxWidth,
+    jfloat minHeight,
+    jfloat maxHeight,
+    jfloat offsetX,
+    jfloat offsetY,
+    jboolean isRTL,
+    jboolean doLeftAndRightSwapInRTL) {
+  SystraceSection s("FabricUIManagerBinding::setConstraints");
+
+  auto scheduler = getScheduler();
+  if (!scheduler) {
+    LOG(ERROR) << "Binding::setConstraints: scheduler disappeared";
+    return;
+  }
+
+  auto minimumSize =
+      Size{minWidth / pointScaleFactor_, minHeight / pointScaleFactor_};
+  auto maximumSize =
+      Size{maxWidth / pointScaleFactor_, maxHeight / pointScaleFactor_};
+
+  LayoutContext context;
+  context.viewportOffset =
+      Point{offsetX / pointScaleFactor_, offsetY / pointScaleFactor_};
+  context.pointScaleFactor = {pointScaleFactor_};
+  context.swapLeftAndRightInRTL = doLeftAndRightSwapInRTL;
+  LayoutConstraints constraints = {};
+  constraints.minimumSize = minimumSize;
+  constraints.maximumSize = maximumSize;
+  constraints.layoutDirection =
+      isRTL ? LayoutDirection::RightToLeft : LayoutDirection::LeftToRight;
+
+  {
+    std::shared_lock lock(surfaceHandlerRegistryMutex_);
+
+    auto iterator = surfaceHandlerRegistry_.find(surfaceId);
+
+    if (iterator == surfaceHandlerRegistry_.end()) {
+      LOG(ERROR)
+          << "Binding::setConstraints: Surface with given id is not found";
+      return;
+    }
+
+    auto& surfaceHandler = iterator->second;
+    surfaceHandler.constraintLayout(constraints, context);
+  }
+}
+
+#pragma mark - Install/uninstall java binding
+
+void Binding::installFabricUIManager(
+    jni::alias_ref<JRuntimeExecutor::javaobject> runtimeExecutorHolder,
+    jni::alias_ref<JRuntimeScheduler::javaobject> runtimeSchedulerHolder,
+    jni::alias_ref<JFabricUIManager::javaobject> javaUIManager,
+    EventBeatManager* eventBeatManager,
+    ComponentFactory* componentsRegistry,
+    jni::alias_ref<jobject> reactNativeConfig) {
+  SystraceSection s("FabricUIManagerBinding::installFabricUIManager");
+
+  std::shared_ptr<const ReactNativeConfig> config =
+      std::make_shared<const ReactNativeConfigHolder>(reactNativeConfig);
+
+  enableFabricLogs_ =
+      config->getBool("react_fabric:enabled_android_fabric_logs");
+
+  if (enableFabricLogs_) {
+    LOG(WARNING) << "Binding::installFabricUIManager() was called (address: "
+                 << this << ").";
+  }
+
+  std::unique_lock lock(installMutex_);
+
+  auto globalJavaUiManager = make_global(javaUIManager);
+  mountingManager_ =
+      std::make_shared<FabricMountingManager>(config, globalJavaUiManager);
+
+  ContextContainer::Shared contextContainer =
+      std::make_shared<ContextContainer>();
+
+  auto runtimeExecutor = runtimeExecutorHolder->cthis()->get();
+
+  if (runtimeSchedulerHolder) {
+    auto runtimeScheduler = runtimeSchedulerHolder->cthis()->get().lock();
+    if (runtimeScheduler) {
+      runtimeExecutor =
+          [runtimeScheduler](
+              std::function<void(jsi::Runtime & runtime)>&& callback) {
+            runtimeScheduler->scheduleWork(std::move(callback));
+          };
+      contextContainer->insert(
+          "RuntimeScheduler",
+          std::weak_ptr<RuntimeScheduler>(runtimeScheduler));
+    }
+  }
+
+  EventBeat::Factory asynchronousBeatFactory =
+      [eventBeatManager, runtimeExecutor, globalJavaUiManager](
+          const EventBeat::SharedOwnerBox& ownerBox)
+      -> std::unique_ptr<EventBeat> {
+    return std::make_unique<AsyncEventBeat>(
+        ownerBox, eventBeatManager, runtimeExecutor, globalJavaUiManager);
+  };
+
+  contextContainer->insert("ReactNativeConfig", config);
+  contextContainer->insert("FabricUIManager", globalJavaUiManager);
+
+  // Keep reference to config object and cache some feature flags here
+  reactNativeConfig_ = config;
+
+  CoreFeatures::enablePropIteratorSetter =
+      getFeatureFlagValue("enableCppPropsIteratorSetter");
+  CoreFeatures::excludeYogaFromRawProps =
+      getFeatureFlagValue("excludeYogaFromRawProps");
+
+  // RemoveDelete mega-op
+  ShadowViewMutation::PlatformSupportsRemoveDeleteTreeInstruction =
+      getFeatureFlagValue("enableRemoveDeleteTreeInstruction");
+
+  auto toolbox = SchedulerToolbox{};
+  toolbox.contextContainer = contextContainer;
+  toolbox.componentRegistryFactory = componentsRegistry->buildRegistryFunction;
+
+  // TODO: (T132338609) runtimeExecutor should execute lambdas after
+  // main bundle eval, and bindingsInstallExecutor should execute before.
+  toolbox.bridgelessBindingsExecutor = std::nullopt;
+  toolbox.runtimeExecutor = runtimeExecutor;
+
+  toolbox.asynchronousEventBeatFactory = asynchronousBeatFactory;
+
+  if (ReactNativeFeatureFlags::enableBackgroundExecutor()) {
+    backgroundExecutor_ = JBackgroundExecutor::create("fabric_bg");
+    toolbox.backgroundExecutor = backgroundExecutor_;
+  }
+
+  animationDriver_ = std::make_shared<LayoutAnimationDriver>(
+      runtimeExecutor, contextContainer, this);
+  scheduler_ =
+      std::make_shared<Scheduler>(toolbox, animationDriver_.get(), this);
+}
+
+void Binding::uninstallFabricUIManager() {
+  if (enableFabricLogs_) {
+    LOG(WARNING) << "Binding::uninstallFabricUIManager() was called (address: "
+                 << this << ").";
+  }
+
+  std::unique_lock lock(installMutex_);
+  animationDriver_ = nullptr;
+  scheduler_ = nullptr;
+  mountingManager_ = nullptr;
+  reactNativeConfig_ = nullptr;
+}
+
+std::shared_ptr<FabricMountingManager> Binding::getMountingManager(
+    const char* locationHint) {
+  std::shared_lock lock(installMutex_);
+  if (!mountingManager_) {
+    LOG(ERROR) << "FabricMountingManager::" << locationHint
+               << " mounting manager disappeared";
+  }
+  // Need to return a copy of the shared_ptr to make sure this is safe if called
+  // concurrently with uninstallFabricUIManager
+  return mountingManager_;
+}
+
+void Binding::schedulerDidFinishTransaction(
+    const MountingCoordinator::Shared& mountingCoordinator) {
+  auto mountingTransaction = mountingCoordinator->pullTransaction();
+  if (!mountingTransaction.has_value()) {
+    return;
+  }
+
+  std::unique_lock<std::mutex> lock(pendingTransactionsMutex_);
+  auto pendingTransaction = std::find_if(
+      pendingTransactions_.begin(),
+      pendingTransactions_.end(),
+      [&](const auto& transaction) {
+        return transaction.getSurfaceId() ==
+            mountingTransaction->getSurfaceId();
+      });
+
+  if (pendingTransaction != pendingTransactions_.end()) {
+    pendingTransaction->mergeWith(std::move(*mountingTransaction));
+  } else {
+    pendingTransactions_.push_back(std::move(*mountingTransaction));
+  }
+}
+
+void Binding::schedulerShouldRenderTransactions(
+    const MountingCoordinator::Shared& mountingCoordinator) {
+  auto mountingManager =
+      getMountingManager("schedulerShouldRenderTransactions");
+  if (!mountingManager) {
+    return;
+  }
+
+  if (ReactNativeFeatureFlags::
+          allowRecursiveCommitsWithSynchronousMountOnAndroid()) {
+    std::vector<MountingTransaction> pendingTransactions;
+
+    {
+      // Retain the lock to access the pending transactions but not to execute
+      // the mount operations because that method can call into this method
+      // again.
+      std::unique_lock<std::mutex> lock(pendingTransactionsMutex_);
+      pendingTransactions_.swap(pendingTransactions);
+    }
+
+    for (auto& transaction : pendingTransactions) {
+      mountingManager->executeMount(transaction);
+    }
+  } else {
+    std::unique_lock<std::mutex> lock(pendingTransactionsMutex_);
+    for (auto& transaction : pendingTransactions_) {
+      mountingManager->executeMount(transaction);
+    }
+    pendingTransactions_.clear();
+  }
+}
+
+void Binding::schedulerDidRequestPreliminaryViewAllocation(
+    const ShadowNode& shadowNode) {
+  if (!shadowNode.getTraits().check(ShadowNodeTraits::Trait::FormsView)) {
+    return;
+  }
+
+  auto mountingManager = getMountingManager("preallocateView");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->preallocateShadowView(shadowNode);
+}
+
+void Binding::schedulerDidDispatchCommand(
+    const ShadowView& shadowView,
+    const std::string& commandName,
+    const folly::dynamic& args) {
+  auto mountingManager = getMountingManager("schedulerDidDispatchCommand");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->dispatchCommand(shadowView, commandName, args);
+}
+
+void Binding::schedulerDidSendAccessibilityEvent(
+    const ShadowView& shadowView,
+    const std::string& eventType) {
+  auto mountingManager =
+      getMountingManager("schedulerDidSendAccessibilityEvent");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->sendAccessibilityEvent(shadowView, eventType);
+}
+
+void Binding::schedulerDidSetIsJSResponder(
+    const ShadowView& shadowView,
+    bool isJSResponder,
+    bool blockNativeResponder) {
+  auto mountingManager = getMountingManager("schedulerDidSetIsJSResponder");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->setIsJSResponder(
+      shadowView, isJSResponder, blockNativeResponder);
+}
+
+void Binding::onAnimationStarted() {
+  auto mountingManager = getMountingManager("onAnimationStarted");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->onAnimationStarted();
+}
+
+void Binding::onAllAnimationsComplete() {
+  auto mountingManager = getMountingManager("onAnimationComplete");
+  if (!mountingManager) {
+    return;
+  }
+  mountingManager->onAllAnimationsComplete();
+}
+
+void Binding::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", Binding::initHybrid),
+      makeNativeMethod(
+          "installFabricUIManager", Binding::installFabricUIManager),
+      makeNativeMethod("startSurface", Binding::startSurface),
+      makeNativeMethod(
+          "getInspectorDataForInstance", Binding::getInspectorDataForInstance),
+      makeNativeMethod(
+          "startSurfaceWithConstraints", Binding::startSurfaceWithConstraints),
+      makeNativeMethod("stopSurface", Binding::stopSurface),
+      makeNativeMethod("setConstraints", Binding::setConstraints),
+      makeNativeMethod("setPixelDensity", Binding::setPixelDensity),
+      makeNativeMethod("driveCxxAnimations", Binding::driveCxxAnimations),
+      makeNativeMethod("reportMount", Binding::reportMount),
+      makeNativeMethod(
+          "uninstallFabricUIManager", Binding::uninstallFabricUIManager),
+      makeNativeMethod("registerSurface", Binding::registerSurface),
+      makeNativeMethod("unregisterSurface", Binding::unregisterSurface),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/Binding.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/Binding.h
new file mode 100644
index 0000000..fd3bb8a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/Binding.h
@@ -0,0 +1,162 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <memory>
+#include <mutex>
+#include <shared_mutex>
+#include <unordered_map>
+
+#include <fbjni/fbjni.h>
+#include <react/jni/JRuntimeExecutor.h>
+#include <react/jni/JRuntimeScheduler.h>
+#include <react/jni/ReadableNativeMap.h>
+#include <react/renderer/scheduler/SchedulerDelegate.h>
+#include <react/renderer/scheduler/SurfaceHandler.h>
+#include <react/renderer/uimanager/LayoutAnimationStatusDelegate.h>
+#include <react/renderer/uimanager/primitives.h>
+
+#include "EventEmitterWrapper.h"
+#include "JFabricUIManager.h"
+
+namespace facebook::react {
+
+class ComponentFactory;
+class EventBeatManager;
+class FabricMountingManager;
+class Instance;
+class LayoutAnimationDriver;
+class ReactNativeConfig;
+class Scheduler;
+class SurfaceHandlerBinding;
+
+struct JBinding : public jni::JavaClass<JBinding> {
+  constexpr static auto kJavaDescriptor = "Lcom/facebook/react/fabric/Binding;";
+};
+
+class Binding : public jni::HybridClass<Binding, JBinding>,
+                public SchedulerDelegate,
+                public LayoutAnimationStatusDelegate {
+ public:
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/fabric/BindingImpl;";
+
+  static void registerNatives();
+
+  std::shared_ptr<Scheduler> getScheduler();
+
+ private:
+  void setConstraints(
+      jint surfaceId,
+      jfloat minWidth,
+      jfloat maxWidth,
+      jfloat minHeight,
+      jfloat maxHeight,
+      jfloat offsetX,
+      jfloat offsetY,
+      jboolean isRTL,
+      jboolean doLeftAndRightSwapInRTL);
+
+  jni::local_ref<ReadableNativeMap::jhybridobject> getInspectorDataForInstance(
+      jni::alias_ref<EventEmitterWrapper::javaobject> eventEmitterWrapper);
+
+  static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jclass>);
+
+  void installFabricUIManager(
+      jni::alias_ref<JRuntimeExecutor::javaobject> runtimeExecutorHolder,
+      jni::alias_ref<JRuntimeScheduler::javaobject> runtimeSchedulerHolder,
+      jni::alias_ref<JFabricUIManager::javaobject> javaUIManager,
+      EventBeatManager* eventBeatManager,
+      ComponentFactory* componentsRegistry,
+      jni::alias_ref<jobject> reactNativeConfig);
+
+  void startSurface(
+      jint surfaceId,
+      jni::alias_ref<jstring> moduleName,
+      NativeMap* initialProps);
+
+  void startSurfaceWithConstraints(
+      jint surfaceId,
+      jni::alias_ref<jstring> moduleName,
+      NativeMap* initialProps,
+      jfloat minWidth,
+      jfloat maxWidth,
+      jfloat minHeight,
+      jfloat maxHeight,
+      jfloat offsetX,
+      jfloat offsetY,
+      jboolean isRTL,
+      jboolean doLeftAndRightSwapInRTL);
+
+  void stopSurface(jint surfaceId);
+
+  void registerSurface(SurfaceHandlerBinding* surfaceHandler);
+
+  void unregisterSurface(SurfaceHandlerBinding* surfaceHandler);
+
+  void schedulerDidFinishTransaction(
+      const MountingCoordinator::Shared& mountingCoordinator) override;
+
+  void schedulerShouldRenderTransactions(
+      const MountingCoordinator::Shared& mountingCoordinator) override;
+
+  void schedulerDidRequestPreliminaryViewAllocation(
+      const ShadowNode& shadowNode) override;
+
+  void schedulerDidDispatchCommand(
+      const ShadowView& shadowView,
+      const std::string& commandName,
+      const folly::dynamic& args) override;
+
+  void schedulerDidSendAccessibilityEvent(
+      const ShadowView& shadowView,
+      const std::string& eventType) override;
+
+  void schedulerDidSetIsJSResponder(
+      const ShadowView& shadowView,
+      bool isJSResponder,
+      bool blockNativeResponder) override;
+
+  void setPixelDensity(float pointScaleFactor);
+
+  void driveCxxAnimations();
+  void reportMount(SurfaceId surfaceId);
+
+  void uninstallFabricUIManager();
+
+  // Private member variables
+  std::shared_mutex installMutex_;
+  std::shared_ptr<FabricMountingManager> mountingManager_;
+  std::shared_ptr<Scheduler> scheduler_;
+
+  std::shared_ptr<FabricMountingManager> getMountingManager(
+      const char* locationHint);
+
+  // LayoutAnimations
+  void onAnimationStarted() override;
+  void onAllAnimationsComplete() override;
+
+  std::shared_ptr<LayoutAnimationDriver> animationDriver_;
+
+  BackgroundExecutor backgroundExecutor_;
+
+  std::unordered_map<SurfaceId, SurfaceHandler> surfaceHandlerRegistry_{};
+  std::shared_mutex
+      surfaceHandlerRegistryMutex_; // Protects `surfaceHandlerRegistry_`.
+
+  // Track pending transactions, one per surfaceId
+  std::mutex pendingTransactionsMutex_;
+  std::vector<MountingTransaction> pendingTransactions_;
+
+  float pointScaleFactor_ = 1;
+
+  std::shared_ptr<const ReactNativeConfig> reactNativeConfig_{nullptr};
+  bool enableFabricLogs_{false};
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/CMakeLists.txt
new file mode 100644
index 0000000..38dfe03
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/CMakeLists.txt
@@ -0,0 +1,68 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+
+file(GLOB fabricjni_SRCS CONFIGURE_DEPENDS *.cpp)
+
+add_library(
+        fabricjni
+        SHARED
+        ${fabricjni_SRCS}
+)
+
+target_include_directories(fabricjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
+
+target_link_libraries(
+        fabricjni
+        fb
+        fbjni
+        folly_runtime
+        glog
+        glog_init
+        jsi
+        mapbufferjni
+        react_codegen_rncore
+        react_debug
+        react_featureflags
+        react_render_animations
+        react_render_attributedstring
+        react_render_componentregistry
+        react_render_core
+        react_render_debug
+        react_render_graphics
+        react_render_imagemanager
+        react_render_mapbuffer
+        react_render_mounting
+        react_render_runtimescheduler
+        react_render_scheduler
+        react_render_telemetry
+        react_render_textlayoutmanager
+        react_render_uimanager
+        react_utils
+        react_config
+        reactnativejni
+        rrc_image
+        rrc_modal
+        rrc_progressbar
+        rrc_root
+        rrc_scrollview
+        rrc_switch
+        rrc_text
+        rrc_textinput
+        rrc_unimplementedview
+        rrc_view
+        yoga
+)
+
+target_compile_options(
+        fabricjni
+        PRIVATE
+        -DLOG_TAG=\"Fabric\"
+        -fexceptions
+        -frtti
+        -std=c++20
+        -Wall
+)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ComponentFactory.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ComponentFactory.cpp
new file mode 100644
index 0000000..e7ecc79
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ComponentFactory.cpp
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "ComponentFactory.h"
+#include <android/log.h>
+#include <fbjni/fbjni.h>
+#include <jsi/jsi.h>
+#include <react/renderer/componentregistry/ComponentDescriptorRegistry.h>
+
+using namespace facebook::jsi;
+
+namespace facebook::react {
+
+jni::local_ref<ComponentFactory::jhybriddata> ComponentFactory::initHybrid(
+    jni::alias_ref<jclass>) {
+  return makeCxxInstance();
+}
+
+void ComponentFactory::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", ComponentFactory::initHybrid),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ComponentFactory.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ComponentFactory.h
new file mode 100644
index 0000000..5aa76a1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ComponentFactory.h
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/renderer/componentregistry/ComponentDescriptorFactory.h>
+#include <react/renderer/componentregistry/ComponentDescriptorRegistry.h>
+
+namespace facebook::react {
+
+class Instance;
+
+class ComponentFactory : public jni::HybridClass<ComponentFactory> {
+ public:
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/fabric/ComponentFactory;";
+
+  static void registerNatives();
+
+  ComponentRegistryFactory buildRegistryFunction;
+
+ private:
+  static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jclass>);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/CoreComponentsRegistry.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/CoreComponentsRegistry.cpp
new file mode 100644
index 0000000..fd8e579
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/CoreComponentsRegistry.cpp
@@ -0,0 +1,112 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "CoreComponentsRegistry.h"
+
+#include <android/log.h>
+
+#include <fbjni/fbjni.h>
+
+#include <react/renderer/componentregistry/ComponentDescriptorRegistry.h>
+#include <react/renderer/components/androidswitch/AndroidSwitchComponentDescriptor.h>
+#include <react/renderer/components/androidtextinput/AndroidTextInputComponentDescriptor.h>
+#include <react/renderer/components/image/ImageComponentDescriptor.h>
+#include <react/renderer/components/modal/ModalHostViewComponentDescriptor.h>
+#include <react/renderer/components/progressbar/AndroidProgressBarComponentDescriptor.h>
+#include <react/renderer/components/rncore/ComponentDescriptors.h>
+#include <react/renderer/components/scrollview/ScrollViewComponentDescriptor.h>
+#include <react/renderer/components/text/ParagraphComponentDescriptor.h>
+#include <react/renderer/components/text/RawTextComponentDescriptor.h>
+#include <react/renderer/components/text/TextComponentDescriptor.h>
+#include <react/renderer/components/view/ViewComponentDescriptor.h>
+
+namespace facebook::react {
+
+CoreComponentsRegistry::CoreComponentsRegistry(ComponentFactory* delegate)
+    : delegate_(delegate) {}
+
+std::shared_ptr<const ComponentDescriptorProviderRegistry>
+CoreComponentsRegistry::sharedProviderRegistry() {
+  static auto providerRegistry =
+      []() -> std::shared_ptr<ComponentDescriptorProviderRegistry> {
+    auto providerRegistry =
+        std::make_shared<ComponentDescriptorProviderRegistry>();
+
+    providerRegistry->add(concreteComponentDescriptorProvider<
+                          AndroidProgressBarComponentDescriptor>());
+    providerRegistry->add(concreteComponentDescriptorProvider<
+                          AndroidSwipeRefreshLayoutComponentDescriptor>());
+    providerRegistry->add(concreteComponentDescriptorProvider<
+                          ActivityIndicatorViewComponentDescriptor>());
+    providerRegistry->add(concreteComponentDescriptorProvider<
+                          AndroidTextInputComponentDescriptor>());
+    providerRegistry->add(
+        concreteComponentDescriptorProvider<ViewComponentDescriptor>());
+    providerRegistry->add(
+        concreteComponentDescriptorProvider<ImageComponentDescriptor>());
+    providerRegistry->add(concreteComponentDescriptorProvider<
+                          ModalHostViewComponentDescriptor>());
+    providerRegistry->add(concreteComponentDescriptorProvider<
+                          AndroidSwitchComponentDescriptor>());
+    providerRegistry->add(
+        concreteComponentDescriptorProvider<TextComponentDescriptor>());
+    providerRegistry->add(
+        concreteComponentDescriptorProvider<RawTextComponentDescriptor>());
+    providerRegistry->add(
+        concreteComponentDescriptorProvider<ScrollViewComponentDescriptor>());
+    providerRegistry->add(
+        concreteComponentDescriptorProvider<
+            AndroidHorizontalScrollContentViewComponentDescriptor>());
+    providerRegistry->add(
+        concreteComponentDescriptorProvider<ParagraphComponentDescriptor>());
+    providerRegistry->add(concreteComponentDescriptorProvider<
+                          AndroidDrawerLayoutComponentDescriptor>());
+    providerRegistry->add(concreteComponentDescriptorProvider<
+                          DebuggingOverlayComponentDescriptor>());
+
+    return providerRegistry;
+  }();
+
+  return providerRegistry;
+}
+
+jni::local_ref<CoreComponentsRegistry::jhybriddata>
+CoreComponentsRegistry::initHybrid(
+    jni::alias_ref<jclass>,
+    ComponentFactory* delegate) {
+  auto instance = makeCxxInstance(delegate);
+
+  // TODO T69453179: Codegen this file
+  auto buildRegistryFunction =
+      [](const EventDispatcher::Weak& eventDispatcher,
+         const ContextContainer::Shared& contextContainer)
+      -> ComponentDescriptorRegistry::Shared {
+    ComponentDescriptorParameters params{
+        .eventDispatcher = eventDispatcher,
+        .contextContainer = contextContainer,
+        .flavor = nullptr};
+
+    auto registry = CoreComponentsRegistry::sharedProviderRegistry()
+                        ->createComponentDescriptorRegistry(params);
+    auto& mutableRegistry = const_cast<ComponentDescriptorRegistry&>(*registry);
+    mutableRegistry.setFallbackComponentDescriptor(
+        std::make_shared<UnimplementedNativeViewComponentDescriptor>(params));
+
+    return registry;
+  };
+
+  delegate->buildRegistryFunction = buildRegistryFunction;
+  return instance;
+}
+
+void CoreComponentsRegistry::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", CoreComponentsRegistry::initHybrid),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/CoreComponentsRegistry.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/CoreComponentsRegistry.h
new file mode 100644
index 0000000..1f6b147
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/CoreComponentsRegistry.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+#include <react/renderer/componentregistry/ComponentDescriptorRegistry.h>
+#include "ComponentFactory.h"
+
+namespace facebook::react {
+
+class CoreComponentsRegistry
+    : public facebook::jni::HybridClass<CoreComponentsRegistry> {
+ public:
+  constexpr static auto kJavaDescriptor =
+      "Lcom/facebook/react/fabric/CoreComponentsRegistry;";
+
+  static void registerNatives();
+
+  explicit CoreComponentsRegistry(ComponentFactory* delegate);
+
+  static std::shared_ptr<const ComponentDescriptorProviderRegistry>
+  sharedProviderRegistry();
+
+ private:
+  friend HybridBase;
+
+  const ComponentFactory* delegate_;
+
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jclass>,
+      ComponentFactory* delegate);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventBeatManager.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventBeatManager.cpp
new file mode 100644
index 0000000..04deb94
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventBeatManager.cpp
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "EventBeatManager.h"
+#include <fbjni/fbjni.h>
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+EventBeatManager::EventBeatManager(
+    jni::alias_ref<EventBeatManager::jhybriddata> jhybridobject)
+    : jhybridobject_(jhybridobject) {}
+
+jni::local_ref<EventBeatManager::jhybriddata> EventBeatManager::initHybrid(
+    jni::alias_ref<EventBeatManager::jhybriddata> jhybridobject) {
+  return makeCxxInstance(jhybridobject);
+}
+
+void EventBeatManager::addObserver(
+    const EventBeatManagerObserver& observer) const {
+  std::scoped_lock lock(mutex_);
+  observers_.insert(&observer);
+}
+
+void EventBeatManager::removeObserver(
+    const EventBeatManagerObserver& observer) const {
+  std::scoped_lock lock(mutex_);
+  observers_.erase(&observer);
+}
+
+void EventBeatManager::tick() {
+  std::scoped_lock lock(mutex_);
+
+  for (auto observer : observers_) {
+    observer->tick();
+  }
+}
+
+void EventBeatManager::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", EventBeatManager::initHybrid),
+      makeNativeMethod("tick", EventBeatManager::tick),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventBeatManager.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventBeatManager.h
new file mode 100644
index 0000000..6abb69f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventBeatManager.h
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <mutex>
+#include <unordered_set>
+
+#include <ReactCommon/RuntimeExecutor.h>
+#include <fbjni/fbjni.h>
+#include <react/renderer/core/EventBeat.h>
+
+namespace facebook::react {
+
+class EventBeatManagerObserver {
+ public:
+  /*
+   * Called by `EventBeatManager` on the main thread signaling that this is a
+   * good time to flush an event queue.
+   */
+  virtual void tick() const = 0;
+
+  virtual ~EventBeatManagerObserver() noexcept = default;
+};
+
+class EventBeatManager : public jni::HybridClass<EventBeatManager> {
+ public:
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/fabric/events/EventBeatManager;";
+
+  static void registerNatives();
+
+  explicit EventBeatManager(
+      jni::alias_ref<EventBeatManager::jhybriddata> jhybridobject);
+
+  /*
+   * Adds (or removes) observers.
+   * `EventBeatManager` does not own/retain observers; observers must overlive
+   * the manager or be properly removed before deallocation.
+   */
+  void addObserver(const EventBeatManagerObserver& observer) const;
+  void removeObserver(const EventBeatManagerObserver& observer) const;
+
+ private:
+  /*
+   * Called by Java counterpart at the end of every run loop tick.
+   */
+  void tick();
+
+  jni::alias_ref<EventBeatManager::jhybriddata> jhybridobject_;
+
+  mutable std::unordered_set<const EventBeatManagerObserver*>
+      observers_{}; // Protected by `mutex_`
+
+  mutable std::mutex mutex_;
+
+  static jni::local_ref<EventBeatManager::jhybriddata> initHybrid(
+      jni::alias_ref<EventBeatManager::jhybriddata> jhybridobject);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventEmitterWrapper.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventEmitterWrapper.cpp
new file mode 100644
index 0000000..3fc99cd
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventEmitterWrapper.cpp
@@ -0,0 +1,69 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "EventEmitterWrapper.h"
+#include <fbjni/fbjni.h>
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+void EventEmitterWrapper::dispatchEvent(
+    std::string eventName,
+    NativeMap* payload,
+    int category) {
+  // It is marginal, but possible for this to be constructed without a valid
+  // EventEmitter. In those cases, make sure we noop/blackhole events instead of
+  // crashing.
+  if (eventEmitter != nullptr) {
+    eventEmitter->dispatchEvent(
+        eventName,
+        payload ? payload->consume() : folly::dynamic::object(),
+        static_cast<RawEvent::Category>(category));
+  }
+}
+
+void EventEmitterWrapper::dispatchEventSynchronously(
+    std::string eventName,
+    NativeMap* params) {
+  // It is marginal, but possible for this to be constructed without a valid
+  // EventEmitter. In those cases, make sure we noop/blackhole events instead of
+  // crashing.
+  if (eventEmitter != nullptr) {
+    eventEmitter->experimental_flushSync([&]() {
+      eventEmitter->dispatchEvent(
+          std::move(eventName),
+          (params != nullptr) ? params->consume() : folly::dynamic::object(),
+          RawEvent::Category::Discrete);
+    });
+  }
+}
+
+void EventEmitterWrapper::dispatchUniqueEvent(
+    std::string eventName,
+    NativeMap* payload) {
+  // It is marginal, but possible for this to be constructed without a valid
+  // EventEmitter. In those cases, make sure we noop/blackhole events instead of
+  // crashing.
+  if (eventEmitter != nullptr) {
+    eventEmitter->dispatchUniqueEvent(
+        eventName, payload ? payload->consume() : folly::dynamic::object());
+  }
+}
+
+void EventEmitterWrapper::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("dispatchEvent", EventEmitterWrapper::dispatchEvent),
+      makeNativeMethod(
+          "dispatchUniqueEvent", EventEmitterWrapper::dispatchUniqueEvent),
+      makeNativeMethod(
+          "dispatchEventSynchronously",
+          EventEmitterWrapper::dispatchEventSynchronously),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventEmitterWrapper.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventEmitterWrapper.h
new file mode 100644
index 0000000..2bc6cc4
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/EventEmitterWrapper.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/jni/ReadableNativeMap.h>
+#include <react/renderer/core/EventEmitter.h>
+
+namespace facebook::react {
+
+class Instance;
+
+class EventEmitterWrapper : public jni::HybridClass<EventEmitterWrapper> {
+ public:
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/fabric/events/EventEmitterWrapper;";
+
+  static void registerNatives();
+
+  EventEmitterWrapper(SharedEventEmitter eventEmitter)
+      : eventEmitter(std::move(eventEmitter)){};
+
+  SharedEventEmitter eventEmitter;
+
+  void dispatchEvent(std::string eventName, NativeMap* params, int category);
+  void dispatchEventSynchronously(std::string eventName, NativeMap* params);
+  void dispatchUniqueEvent(std::string eventName, NativeMap* params);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/FabricMountingManager.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/FabricMountingManager.cpp
new file mode 100644
index 0000000..ca19376
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/FabricMountingManager.cpp
@@ -0,0 +1,916 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "FabricMountingManager.h"
+
+#include "EventEmitterWrapper.h"
+#include "MountItem.h"
+#include "StateWrapperImpl.h"
+
+#include <cxxreact/SystraceSection.h>
+#include <react/featureflags/ReactNativeFeatureFlags.h>
+#include <react/jni/ReadableNativeMap.h>
+#include <react/renderer/components/scrollview/ScrollViewProps.h>
+#include <react/renderer/core/conversions.h>
+#include <react/renderer/mounting/MountingTransaction.h>
+#include <react/renderer/mounting/ShadowView.h>
+#include <react/renderer/mounting/ShadowViewMutation.h>
+#include <react/utils/CoreFeatures.h>
+
+#include <fbjni/fbjni.h>
+#include <glog/logging.h>
+
+#include <cfenv>
+#include <cmath>
+#include <unordered_set>
+#include <vector>
+
+namespace facebook::react {
+
+FabricMountingManager::FabricMountingManager(
+    std::shared_ptr<const ReactNativeConfig>& config,
+    jni::global_ref<JFabricUIManager::javaobject>& javaUIManager)
+    : javaUIManager_(javaUIManager) {}
+
+void FabricMountingManager::onSurfaceStart(SurfaceId surfaceId) {
+  std::lock_guard lock(allocatedViewsMutex_);
+  allocatedViewRegistry_.emplace(surfaceId, std::unordered_set<Tag>{});
+}
+
+void FabricMountingManager::onSurfaceStop(SurfaceId surfaceId) {
+  std::lock_guard lock(allocatedViewsMutex_);
+  allocatedViewRegistry_.erase(surfaceId);
+}
+
+static inline int getIntBufferSizeForType(CppMountItem::Type mountItemType) {
+  switch (mountItemType) {
+    case CppMountItem::Type::Create:
+      return 2; // tag, isLayoutable
+    case CppMountItem::Type::Insert:
+    case CppMountItem::Type::Remove:
+      return 3; // tag, parentTag, index
+    case CppMountItem::Type::RemoveDeleteTree:
+      return 3; // tag, parentTag, index
+    case CppMountItem::Type::Delete:
+    case CppMountItem::Type::UpdateProps:
+    case CppMountItem::Type::UpdateState:
+    case CppMountItem::Type::UpdateEventEmitter:
+      return 1; // tag
+    case CppMountItem::Type::UpdatePadding:
+      return 5; // tag, top, left, bottom, right
+    case CppMountItem::Type::UpdateLayout:
+      return ReactNativeFeatureFlags::setAndroidLayoutDirection()
+          ? 8 // tag, parentTag, x, y, w, h, DisplayType, LayoutDirection
+          : 7; // tag, parentTag, x, y, w, h, DisplayType
+    case CppMountItem::Type::UpdateOverflowInset:
+      return 5; // tag, left, top, right, bottom
+    case CppMountItem::Undefined:
+    case CppMountItem::Multiple:
+      return -1;
+  }
+}
+
+static inline void updateBufferSizes(
+    CppMountItem::Type mountItemType,
+    size_t numInstructions,
+    int& batchMountItemIntsSize,
+    int& batchMountItemObjectsSize) {
+  if (numInstructions == 0) {
+    return;
+  }
+
+  batchMountItemIntsSize +=
+      numInstructions == 1 ? 1 : 2; // instructionType[, numInstructions]
+  batchMountItemIntsSize +=
+      numInstructions * getIntBufferSizeForType(mountItemType);
+
+  if (mountItemType == CppMountItem::Type::UpdateProps) {
+    batchMountItemObjectsSize +=
+        numInstructions; // props object * numInstructions
+  } else if (mountItemType == CppMountItem::Type::UpdateState) {
+    batchMountItemObjectsSize +=
+        numInstructions; // state object * numInstructions
+  } else if (mountItemType == CppMountItem::Type::UpdateEventEmitter) {
+    batchMountItemObjectsSize +=
+        numInstructions; // EventEmitter object * numInstructions
+  }
+}
+
+static inline void computeBufferSizes(
+    int& batchMountItemIntsSize,
+    int& batchMountItemObjectsSize,
+    std::vector<CppMountItem>& cppCommonMountItems,
+    std::vector<CppMountItem>& cppDeleteMountItems,
+    std::vector<CppMountItem>& cppUpdatePropsMountItems,
+    std::vector<CppMountItem>& cppUpdateStateMountItems,
+    std::vector<CppMountItem>& cppUpdatePaddingMountItems,
+    std::vector<CppMountItem>& cppUpdateLayoutMountItems,
+    std::vector<CppMountItem>& cppUpdateOverflowInsetMountItems,
+    std::vector<CppMountItem>& cppUpdateEventEmitterMountItems) {
+  CppMountItem::Type lastType = CppMountItem::Type::Undefined;
+  int numSameType = 0;
+  for (const auto& mountItem : cppCommonMountItems) {
+    const auto& mountItemType = mountItem.type;
+
+    if (lastType == mountItemType) {
+      numSameType++;
+      if (numSameType == 2) {
+        batchMountItemIntsSize += 1; // numInstructions
+      }
+    } else {
+      numSameType = 1;
+      lastType = mountItemType;
+      batchMountItemIntsSize += 1; // instructionType
+    }
+
+    batchMountItemIntsSize += getIntBufferSizeForType(mountItemType);
+    if (mountItemType == CppMountItem::Type::Create) {
+      batchMountItemObjectsSize +=
+          4; // component name, props, state, event emitter
+    }
+  }
+
+  updateBufferSizes(
+      CppMountItem::Type::UpdateProps,
+      cppUpdatePropsMountItems.size(),
+      batchMountItemIntsSize,
+      batchMountItemObjectsSize);
+  updateBufferSizes(
+      CppMountItem::Type::UpdateState,
+      cppUpdateStateMountItems.size(),
+      batchMountItemIntsSize,
+      batchMountItemObjectsSize);
+  updateBufferSizes(
+      CppMountItem::Type::UpdatePadding,
+      cppUpdatePaddingMountItems.size(),
+      batchMountItemIntsSize,
+      batchMountItemObjectsSize);
+  updateBufferSizes(
+      CppMountItem::Type::UpdateLayout,
+      cppUpdateLayoutMountItems.size(),
+      batchMountItemIntsSize,
+      batchMountItemObjectsSize);
+  updateBufferSizes(
+      CppMountItem::Type::UpdateOverflowInset,
+      cppUpdateOverflowInsetMountItems.size(),
+      batchMountItemIntsSize,
+      batchMountItemObjectsSize);
+  updateBufferSizes(
+      CppMountItem::Type::UpdateEventEmitter,
+      cppUpdateEventEmitterMountItems.size(),
+      batchMountItemIntsSize,
+      batchMountItemObjectsSize);
+  updateBufferSizes(
+      CppMountItem::Type::Delete,
+      cppDeleteMountItems.size(),
+      batchMountItemIntsSize,
+      batchMountItemObjectsSize);
+}
+
+static inline void writeIntBufferTypePreamble(
+    int mountItemType,
+    size_t numItems,
+    _JNIEnv* env,
+    jintArray& intBufferArray,
+    int& intBufferPosition) {
+  jint temp[2];
+  if (numItems == 1) {
+    temp[0] = mountItemType;
+    env->SetIntArrayRegion(intBufferArray, intBufferPosition, 1, temp);
+    intBufferPosition += 1;
+  } else {
+    temp[0] = mountItemType | CppMountItem::Type::Multiple;
+    temp[1] = static_cast<jint>(numItems);
+    env->SetIntArrayRegion(intBufferArray, intBufferPosition, 2, temp);
+    intBufferPosition += 2;
+  }
+}
+
+// TODO: this method will be removed when binding for components are code-gen
+jni::local_ref<jstring> getPlatformComponentName(const ShadowView& shadowView) {
+  static std::string scrollViewComponentName = std::string("ScrollView");
+  if (scrollViewComponentName == shadowView.componentName) {
+    const auto& newViewProps =
+        static_cast<const ScrollViewProps&>(*shadowView.props);
+    if (newViewProps.getProbablyMoreHorizontalThanVertical_DEPRECATED()) {
+      return jni::make_jstring("AndroidHorizontalScrollView");
+    }
+  }
+  return jni::make_jstring(shadowView.componentName);
+}
+
+static inline float scale(Float value, Float pointScaleFactor) {
+  std::feclearexcept(FE_ALL_EXCEPT);
+  float result = value * pointScaleFactor;
+  if (std::fetestexcept(FE_OVERFLOW)) {
+    LOG(ERROR) << "Binding::scale - FE_OVERFLOW - value: " << value
+               << " pointScaleFactor: " << pointScaleFactor
+               << " result: " << result;
+  }
+  if (std::fetestexcept(FE_UNDERFLOW)) {
+    LOG(ERROR) << "Binding::scale - FE_UNDERFLOW - value: " << value
+               << " pointScaleFactor: " << pointScaleFactor
+               << " result: " << result;
+  }
+  return result;
+}
+
+jni::local_ref<jobject> FabricMountingManager::getProps(
+    const ShadowView& oldShadowView,
+    const ShadowView& newShadowView) {
+  return ReadableNativeMap::newObjectCxxArgs(newShadowView.props->rawProps);
+}
+
+void FabricMountingManager::executeMount(
+    const MountingTransaction& transaction) {
+  SystraceSection section("FabricMountingManager::executeMount");
+
+  std::scoped_lock lock(commitMutex_);
+  auto finishTransactionStartTime = telemetryTimePointNow();
+
+  auto env = jni::Environment::current();
+
+  auto telemetry = transaction.getTelemetry();
+  auto surfaceId = transaction.getSurfaceId();
+  auto& mutations = transaction.getMutations();
+
+  auto revisionNumber = telemetry.getRevisionNumber();
+
+  std::vector<CppMountItem> cppCommonMountItems;
+  std::vector<CppMountItem> cppDeleteMountItems;
+  std::vector<CppMountItem> cppUpdatePropsMountItems;
+  std::vector<CppMountItem> cppUpdateStateMountItems;
+  std::vector<CppMountItem> cppUpdatePaddingMountItems;
+  std::vector<CppMountItem> cppUpdateLayoutMountItems;
+  std::vector<CppMountItem> cppUpdateOverflowInsetMountItems;
+  std::vector<CppMountItem> cppUpdateEventEmitterMountItems;
+
+  {
+    std::lock_guard allocatedViewsLock(allocatedViewsMutex_);
+
+    auto allocatedViewsIterator = allocatedViewRegistry_.find(surfaceId);
+    auto defaultAllocatedViews = std::unordered_set<Tag>{};
+    // Do not remove `defaultAllocatedViews` or initialize
+    // `std::unordered_set<Tag>{}` inline in below ternary expression - if falsy
+    // operand is a value type, the compiler will decide the expression to be a
+    // value type, an unnecessary (sometimes expensive) copy will happen as a
+    // result.
+    const auto& allocatedViewTags =
+        allocatedViewsIterator != allocatedViewRegistry_.end()
+        ? allocatedViewsIterator->second
+        : defaultAllocatedViews;
+    if (allocatedViewsIterator == allocatedViewRegistry_.end()) {
+      LOG(ERROR) << "Executing commit after surface was stopped!";
+    }
+
+    for (const auto& mutation : mutations) {
+      const auto& parentShadowView = mutation.parentShadowView;
+      const auto& oldChildShadowView = mutation.oldChildShadowView;
+      const auto& newChildShadowView = mutation.newChildShadowView;
+      auto& mutationType = mutation.type;
+      auto& index = mutation.index;
+
+      bool isVirtual = mutation.mutatedViewIsVirtual();
+      switch (mutationType) {
+        case ShadowViewMutation::Create: {
+          bool shouldCreateView =
+              !allocatedViewTags.contains(newChildShadowView.tag);
+
+          if (shouldCreateView) {
+            cppCommonMountItems.push_back(
+                CppMountItem::CreateMountItem(newChildShadowView));
+          }
+          break;
+        }
+        case ShadowViewMutation::Remove: {
+          if (!isVirtual && !mutation.isRedundantOperation) {
+            cppCommonMountItems.push_back(CppMountItem::RemoveMountItem(
+                parentShadowView, oldChildShadowView, index));
+          }
+          break;
+        }
+        case ShadowViewMutation::RemoveDeleteTree: {
+          if (!isVirtual) {
+            cppCommonMountItems.push_back(
+                CppMountItem::RemoveDeleteTreeMountItem(
+                    parentShadowView, oldChildShadowView, index));
+          }
+          break;
+        }
+        case ShadowViewMutation::Delete: {
+          if (!mutation.isRedundantOperation) {
+            cppDeleteMountItems.push_back(
+                CppMountItem::DeleteMountItem(oldChildShadowView));
+          }
+          break;
+        }
+        case ShadowViewMutation::Update: {
+          if (!isVirtual) {
+            if (oldChildShadowView.props != newChildShadowView.props) {
+              cppUpdatePropsMountItems.push_back(
+                  CppMountItem::UpdatePropsMountItem(
+                      oldChildShadowView, newChildShadowView));
+            }
+            if (oldChildShadowView.state != newChildShadowView.state) {
+              cppUpdateStateMountItems.push_back(
+                  CppMountItem::UpdateStateMountItem(newChildShadowView));
+            }
+
+            // Padding: padding mountItems must be executed before layout props
+            // are updated in the view. This is necessary to ensure that events
+            // (resulting from layout changes) are dispatched with the correct
+            // padding information.
+            if (oldChildShadowView.layoutMetrics.contentInsets !=
+                newChildShadowView.layoutMetrics.contentInsets) {
+              cppUpdatePaddingMountItems.push_back(
+                  CppMountItem::UpdatePaddingMountItem(newChildShadowView));
+            }
+
+            if (oldChildShadowView.layoutMetrics !=
+                newChildShadowView.layoutMetrics) {
+              cppUpdateLayoutMountItems.push_back(
+                  CppMountItem::UpdateLayoutMountItem(
+                      mutation.newChildShadowView, parentShadowView));
+            }
+
+            // OverflowInset: This is the values indicating boundaries including
+            // children of the current view. The layout of current view may not
+            // change, and we separate this part from layout mount items to not
+            // pack too much data there.
+            if ((oldChildShadowView.layoutMetrics.overflowInset !=
+                 newChildShadowView.layoutMetrics.overflowInset)) {
+              cppUpdateOverflowInsetMountItems.push_back(
+                  CppMountItem::UpdateOverflowInsetMountItem(
+                      newChildShadowView));
+            }
+          }
+
+          if (oldChildShadowView.eventEmitter !=
+              newChildShadowView.eventEmitter) {
+            cppUpdateEventEmitterMountItems.push_back(
+                CppMountItem::UpdateEventEmitterMountItem(
+                    mutation.newChildShadowView));
+          }
+          break;
+        }
+        case ShadowViewMutation::Insert: {
+          if (!isVirtual) {
+            // Insert item
+            cppCommonMountItems.push_back(CppMountItem::InsertMountItem(
+                parentShadowView, newChildShadowView, index));
+
+            bool allocationCheck =
+                allocatedViewTags.find(newChildShadowView.tag) ==
+                allocatedViewTags.end();
+            bool shouldCreateView = allocationCheck;
+            if (shouldCreateView) {
+              cppUpdatePropsMountItems.push_back(
+                  CppMountItem::UpdatePropsMountItem({}, newChildShadowView));
+            }
+
+            // State
+            if (newChildShadowView.state) {
+              cppUpdateStateMountItems.push_back(
+                  CppMountItem::UpdateStateMountItem(newChildShadowView));
+            }
+
+            // Padding: padding mountItems must be executed before layout props
+            // are updated in the view. This is necessary to ensure that events
+            // (resulting from layout changes) are dispatched with the correct
+            // padding information.
+            if (newChildShadowView.layoutMetrics.contentInsets !=
+                EdgeInsets::ZERO) {
+              cppUpdatePaddingMountItems.push_back(
+                  CppMountItem::UpdatePaddingMountItem(newChildShadowView));
+            }
+
+            // Layout
+            cppUpdateLayoutMountItems.push_back(
+                CppMountItem::UpdateLayoutMountItem(
+                    newChildShadowView, parentShadowView));
+
+            // OverflowInset: This is the values indicating boundaries including
+            // children of the current view. The layout of current view may not
+            // change, and we separate this part from layout mount items to not
+            // pack too much data there.
+            if (newChildShadowView.layoutMetrics.overflowInset !=
+                EdgeInsets::ZERO) {
+              cppUpdateOverflowInsetMountItems.push_back(
+                  CppMountItem::UpdateOverflowInsetMountItem(
+                      newChildShadowView));
+            }
+          }
+
+          // EventEmitter
+          cppUpdateEventEmitterMountItems.push_back(
+              CppMountItem::UpdateEventEmitterMountItem(
+                  mutation.newChildShadowView));
+
+          break;
+        }
+        default: {
+          break;
+        }
+      }
+    }
+
+    if (allocatedViewsIterator != allocatedViewRegistry_.end()) {
+      auto& views = allocatedViewsIterator->second;
+      for (const auto& mutation : mutations) {
+        switch (mutation.type) {
+          case ShadowViewMutation::Create:
+            views.insert(mutation.newChildShadowView.tag);
+            break;
+          case ShadowViewMutation::Delete:
+            views.erase(mutation.oldChildShadowView.tag);
+            break;
+          default:
+            break;
+        }
+      }
+    }
+  }
+
+  // We now have all the information we need, including ordering of mount items,
+  // to know exactly how much space must be allocated
+  int batchMountItemIntsSize = 0;
+  int batchMountItemObjectsSize = 0;
+  computeBufferSizes(
+      batchMountItemIntsSize,
+      batchMountItemObjectsSize,
+      cppCommonMountItems,
+      cppDeleteMountItems,
+      cppUpdatePropsMountItems,
+      cppUpdateStateMountItems,
+      cppUpdatePaddingMountItems,
+      cppUpdateLayoutMountItems,
+      cppUpdateOverflowInsetMountItems,
+      cppUpdateEventEmitterMountItems);
+
+  static auto createMountItemsIntBufferBatchContainer =
+      JFabricUIManager::javaClassStatic()
+          ->getMethod<jni::alias_ref<JMountItem>(
+              jint, jintArray, jni::jtypeArray<jobject>, jint)>(
+              "createIntBufferBatchMountItem");
+
+  static auto scheduleMountItem = JFabricUIManager::javaClassStatic()
+                                      ->getMethod<void(
+                                          JMountItem::javaobject,
+                                          jint,
+                                          jlong,
+                                          jlong,
+                                          jlong,
+                                          jlong,
+                                          jlong,
+                                          jlong,
+                                          jlong,
+                                          jint)>("scheduleMountItem");
+
+  if (batchMountItemIntsSize == 0) {
+    auto finishTransactionEndTime = telemetryTimePointNow();
+
+    scheduleMountItem(
+        javaUIManager_,
+        nullptr,
+        telemetry.getRevisionNumber(),
+        telemetryTimePointToMilliseconds(telemetry.getCommitStartTime()),
+        telemetryTimePointToMilliseconds(telemetry.getDiffStartTime()),
+        telemetryTimePointToMilliseconds(telemetry.getDiffEndTime()),
+        telemetryTimePointToMilliseconds(telemetry.getLayoutStartTime()),
+        telemetryTimePointToMilliseconds(telemetry.getLayoutEndTime()),
+        telemetryTimePointToMilliseconds(finishTransactionStartTime),
+        telemetryTimePointToMilliseconds(finishTransactionEndTime),
+        telemetry.getAffectedLayoutNodesCount());
+    return;
+  }
+
+  // Allocate the intBuffer and object array, now that we know exact sizes
+  // necessary
+  jintArray intBufferArray = env->NewIntArray(batchMountItemIntsSize);
+  auto objBufferArray =
+      jni::JArrayClass<jobject>::newArray(batchMountItemObjectsSize);
+
+  // Fill in arrays
+  int intBufferPosition = 0;
+  int objBufferPosition = 0;
+  int prevMountItemType = -1;
+  jint temp[8];
+  for (int i = 0; i < cppCommonMountItems.size(); i++) {
+    const auto& mountItem = cppCommonMountItems[i];
+    const auto& mountItemType = mountItem.type;
+
+    // Get type here, and count forward how many items of this type are in a
+    // row. Write preamble to any common type here.
+    if (prevMountItemType != mountItemType) {
+      int numSameItemTypes = 1;
+      for (int j = i + 1; j < cppCommonMountItems.size() &&
+           cppCommonMountItems[j].type == mountItemType;
+           j++) {
+        numSameItemTypes++;
+      }
+
+      writeIntBufferTypePreamble(
+          mountItemType,
+          numSameItemTypes,
+          env,
+          intBufferArray,
+          intBufferPosition);
+    }
+    prevMountItemType = mountItemType;
+
+    // TODO: multi-create, multi-insert, etc
+    if (mountItemType == CppMountItem::Type::Create) {
+      auto componentName =
+          getPlatformComponentName(mountItem.newChildShadowView);
+
+      int isLayoutable =
+          mountItem.newChildShadowView.layoutMetrics != EmptyLayoutMetrics ? 1
+                                                                           : 0;
+      jni::local_ref<jobject> props =
+          getProps(mountItem.oldChildShadowView, mountItem.newChildShadowView);
+
+      // Do not hold onto Java object from C
+      // We DO want to hold onto C object from Java, since we don't know the
+      // lifetime of the Java object
+      jni::local_ref<StateWrapperImpl::JavaPart> javaStateWrapper = nullptr;
+      if (mountItem.newChildShadowView.state != nullptr) {
+        javaStateWrapper = StateWrapperImpl::newObjectJavaArgs();
+        StateWrapperImpl* cStateWrapper = cthis(javaStateWrapper);
+        cStateWrapper->state_ = mountItem.newChildShadowView.state;
+      }
+
+      // Do not hold a reference to javaEventEmitter from the C++ side.
+      auto javaEventEmitter = EventEmitterWrapper::newObjectCxxArgs(
+          mountItem.newChildShadowView.eventEmitter);
+      temp[0] = mountItem.newChildShadowView.tag;
+      temp[1] = isLayoutable;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 2, temp);
+      intBufferPosition += 2;
+
+      (*objBufferArray)[objBufferPosition++] = componentName.get();
+      (*objBufferArray)[objBufferPosition++] = props.get();
+      (*objBufferArray)[objBufferPosition++] =
+          javaStateWrapper != nullptr ? javaStateWrapper.get() : nullptr;
+      (*objBufferArray)[objBufferPosition++] = javaEventEmitter.get();
+    } else if (mountItemType == CppMountItem::Type::Insert) {
+      temp[0] = mountItem.newChildShadowView.tag;
+      temp[1] = mountItem.parentShadowView.tag;
+      temp[2] = mountItem.index;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 3, temp);
+      intBufferPosition += 3;
+    } else if (mountItemType == CppMountItem::Remove) {
+      temp[0] = mountItem.oldChildShadowView.tag;
+      temp[1] = mountItem.parentShadowView.tag;
+      temp[2] = mountItem.index;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 3, temp);
+      intBufferPosition += 3;
+    } else if (mountItemType == CppMountItem::RemoveDeleteTree) {
+      temp[0] = mountItem.oldChildShadowView.tag;
+      temp[1] = mountItem.parentShadowView.tag;
+      temp[2] = mountItem.index;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 3, temp);
+      intBufferPosition += 3;
+    } else {
+      LOG(ERROR) << "Unexpected CppMountItem type";
+    }
+  }
+  if (!cppUpdatePropsMountItems.empty()) {
+    writeIntBufferTypePreamble(
+        CppMountItem::Type::UpdateProps,
+        cppUpdatePropsMountItems.size(),
+        env,
+        intBufferArray,
+        intBufferPosition);
+
+    for (const auto& mountItem : cppUpdatePropsMountItems) {
+      temp[0] = mountItem.newChildShadowView.tag;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 1, temp);
+      intBufferPosition += 1;
+      (*objBufferArray)[objBufferPosition++] =
+          getProps(mountItem.oldChildShadowView, mountItem.newChildShadowView);
+    }
+  }
+  if (!cppUpdateStateMountItems.empty()) {
+    writeIntBufferTypePreamble(
+        CppMountItem::Type::UpdateState,
+        cppUpdateStateMountItems.size(),
+        env,
+        intBufferArray,
+        intBufferPosition);
+
+    for (const auto& mountItem : cppUpdateStateMountItems) {
+      temp[0] = mountItem.newChildShadowView.tag;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 1, temp);
+      intBufferPosition += 1;
+
+      auto state = mountItem.newChildShadowView.state;
+      // Do not hold onto Java object from C
+      // We DO want to hold onto C object from Java, since we don't know the
+      // lifetime of the Java object
+      jni::local_ref<StateWrapperImpl::JavaPart> javaStateWrapper = nullptr;
+      if (state != nullptr) {
+        javaStateWrapper = StateWrapperImpl::newObjectJavaArgs();
+        StateWrapperImpl* cStateWrapper = cthis(javaStateWrapper);
+        cStateWrapper->state_ = state;
+      }
+
+      (*objBufferArray)[objBufferPosition++] =
+          (javaStateWrapper != nullptr ? javaStateWrapper.get() : nullptr);
+    }
+  }
+  if (!cppUpdatePaddingMountItems.empty()) {
+    writeIntBufferTypePreamble(
+        CppMountItem::Type::UpdatePadding,
+        cppUpdatePaddingMountItems.size(),
+        env,
+        intBufferArray,
+        intBufferPosition);
+
+    for (const auto& mountItem : cppUpdatePaddingMountItems) {
+      auto layoutMetrics = mountItem.newChildShadowView.layoutMetrics;
+      auto pointScaleFactor = layoutMetrics.pointScaleFactor;
+      auto contentInsets = layoutMetrics.contentInsets;
+
+      int left = floor(scale(contentInsets.left, pointScaleFactor));
+      int top = floor(scale(contentInsets.top, pointScaleFactor));
+      int right = floor(scale(contentInsets.right, pointScaleFactor));
+      int bottom = floor(scale(contentInsets.bottom, pointScaleFactor));
+
+      temp[0] = mountItem.newChildShadowView.tag;
+      temp[1] = left;
+      temp[2] = top;
+      temp[3] = right;
+      temp[4] = bottom;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 5, temp);
+      intBufferPosition += 5;
+    }
+  }
+  if (!cppUpdateLayoutMountItems.empty()) {
+    writeIntBufferTypePreamble(
+        CppMountItem::Type::UpdateLayout,
+        cppUpdateLayoutMountItems.size(),
+        env,
+        intBufferArray,
+        intBufferPosition);
+
+    for (const auto& mountItem : cppUpdateLayoutMountItems) {
+      const auto& layoutMetrics = mountItem.newChildShadowView.layoutMetrics;
+      auto pointScaleFactor = layoutMetrics.pointScaleFactor;
+      auto frame = layoutMetrics.frame;
+
+      int x = round(scale(frame.origin.x, pointScaleFactor));
+      int y = round(scale(frame.origin.y, pointScaleFactor));
+      int w = round(scale(frame.size.width, pointScaleFactor));
+      int h = round(scale(frame.size.height, pointScaleFactor));
+      int displayType = toInt(layoutMetrics.displayType);
+      int layoutDirection = toInt(layoutMetrics.layoutDirection);
+
+      temp[0] = mountItem.newChildShadowView.tag;
+      temp[1] = mountItem.parentShadowView.tag;
+      temp[2] = x;
+      temp[3] = y;
+      temp[4] = w;
+      temp[5] = h;
+      temp[6] = displayType;
+
+      if (ReactNativeFeatureFlags::setAndroidLayoutDirection()) {
+        temp[7] = layoutDirection;
+        env->SetIntArrayRegion(intBufferArray, intBufferPosition, 8, temp);
+        intBufferPosition += 8;
+      } else {
+        env->SetIntArrayRegion(intBufferArray, intBufferPosition, 7, temp);
+        intBufferPosition += 7;
+      }
+    }
+  }
+  if (!cppUpdateOverflowInsetMountItems.empty()) {
+    writeIntBufferTypePreamble(
+        CppMountItem::Type::UpdateOverflowInset,
+        cppUpdateOverflowInsetMountItems.size(),
+        env,
+        intBufferArray,
+        intBufferPosition);
+
+    for (const auto& mountItem : cppUpdateOverflowInsetMountItems) {
+      auto layoutMetrics = mountItem.newChildShadowView.layoutMetrics;
+      auto pointScaleFactor = layoutMetrics.pointScaleFactor;
+      auto overflowInset = layoutMetrics.overflowInset;
+
+      int overflowInsetLeft =
+          round(scale(overflowInset.left, pointScaleFactor));
+      int overflowInsetTop = round(scale(overflowInset.top, pointScaleFactor));
+      int overflowInsetRight =
+          round(scale(overflowInset.right, pointScaleFactor));
+      int overflowInsetBottom =
+          round(scale(overflowInset.bottom, pointScaleFactor));
+
+      temp[0] = mountItem.newChildShadowView.tag;
+      temp[1] = overflowInsetLeft;
+      temp[2] = overflowInsetTop;
+      temp[3] = overflowInsetRight;
+      temp[4] = overflowInsetBottom;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 5, temp);
+      intBufferPosition += 5;
+    }
+  }
+  if (!cppUpdateEventEmitterMountItems.empty()) {
+    writeIntBufferTypePreamble(
+        CppMountItem::Type::UpdateEventEmitter,
+        cppUpdateEventEmitterMountItems.size(),
+        env,
+        intBufferArray,
+        intBufferPosition);
+
+    for (const auto& mountItem : cppUpdateEventEmitterMountItems) {
+      temp[0] = mountItem.newChildShadowView.tag;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 1, temp);
+      intBufferPosition += 1;
+
+      // Do not hold a reference to javaEventEmitter from the C++ side.
+      auto javaEventEmitter = EventEmitterWrapper::newObjectCxxArgs(
+          mountItem.newChildShadowView.eventEmitter);
+      (*objBufferArray)[objBufferPosition++] = javaEventEmitter.get();
+    }
+  }
+
+  // Write deletes last - so that all prop updates, etc, for the tag in the same
+  // batch don't fail. Without additional machinery, moving deletes here
+  // requires that the differ never produces "DELETE...CREATE" in that order for
+  // the same tag. It's nice to be able to batch all similar operations together
+  // for space efficiency.
+  if (!cppDeleteMountItems.empty()) {
+    writeIntBufferTypePreamble(
+        CppMountItem::Type::Delete,
+        cppDeleteMountItems.size(),
+        env,
+        intBufferArray,
+        intBufferPosition);
+
+    for (const auto& mountItem : cppDeleteMountItems) {
+      temp[0] = mountItem.oldChildShadowView.tag;
+      env->SetIntArrayRegion(intBufferArray, intBufferPosition, 1, temp);
+      intBufferPosition += 1;
+    }
+  }
+
+  // If there are no items, we pass a nullptr instead of passing the object
+  // through the JNI
+  auto batch = createMountItemsIntBufferBatchContainer(
+      javaUIManager_,
+      surfaceId,
+      batchMountItemIntsSize == 0 ? nullptr : intBufferArray,
+      batchMountItemObjectsSize == 0 ? nullptr : objBufferArray.get(),
+      revisionNumber);
+
+  auto finishTransactionEndTime = telemetryTimePointNow();
+
+  scheduleMountItem(
+      javaUIManager_,
+      batch.get(),
+      telemetry.getRevisionNumber(),
+      telemetryTimePointToMilliseconds(telemetry.getCommitStartTime()),
+      telemetryTimePointToMilliseconds(telemetry.getDiffStartTime()),
+      telemetryTimePointToMilliseconds(telemetry.getDiffEndTime()),
+      telemetryTimePointToMilliseconds(telemetry.getLayoutStartTime()),
+      telemetryTimePointToMilliseconds(telemetry.getLayoutEndTime()),
+      telemetryTimePointToMilliseconds(finishTransactionStartTime),
+      telemetryTimePointToMilliseconds(finishTransactionEndTime),
+      telemetry.getAffectedLayoutNodesCount());
+
+  env->DeleteLocalRef(intBufferArray);
+}
+
+void FabricMountingManager::preallocateShadowView(
+    const ShadowNode& shadowNode) {
+  {
+    std::lock_guard lock(allocatedViewsMutex_);
+    auto allocatedViewsIterator =
+        allocatedViewRegistry_.find(shadowNode.getSurfaceId());
+    if (allocatedViewsIterator == allocatedViewRegistry_.end()) {
+      return;
+    }
+    auto& allocatedViews = allocatedViewsIterator->second;
+    if (allocatedViews.find(shadowNode.getTag()) != allocatedViews.end()) {
+      return;
+    }
+    allocatedViews.insert(shadowNode.getTag());
+  }
+
+  auto shadowView = ShadowView(shadowNode);
+
+  bool isLayoutableShadowNode = shadowView.layoutMetrics != EmptyLayoutMetrics;
+
+  static auto preallocateView =
+      JFabricUIManager::javaClassStatic()
+          ->getMethod<void(
+              jint, jint, jstring, jobject, jobject, jobject, jboolean)>(
+              "preallocateView");
+
+  // Do not hold onto Java object from C
+  // We DO want to hold onto C object from Java, since we don't know the
+  // lifetime of the Java object
+  jni::local_ref<StateWrapperImpl::JavaPart> javaStateWrapper = nullptr;
+  if (shadowView.state != nullptr) {
+    javaStateWrapper = StateWrapperImpl::newObjectJavaArgs();
+    StateWrapperImpl* cStateWrapper = cthis(javaStateWrapper);
+    cStateWrapper->state_ = shadowView.state;
+  }
+
+  // Do not hold a reference to javaEventEmitter from the C++ side.
+  jni::local_ref<EventEmitterWrapper::JavaPart> javaEventEmitter = nullptr;
+
+  jni::local_ref<jobject> props = getProps({}, shadowView);
+
+  auto component = getPlatformComponentName(shadowView);
+
+  preallocateView(
+      javaUIManager_,
+      shadowNode.getSurfaceId(),
+      shadowView.tag,
+      component.get(),
+      props.get(),
+      (javaStateWrapper != nullptr ? javaStateWrapper.get() : nullptr),
+      (javaEventEmitter != nullptr ? javaEventEmitter.get() : nullptr),
+      isLayoutableShadowNode);
+}
+
+void FabricMountingManager::dispatchCommand(
+    const ShadowView& shadowView,
+    const std::string& commandName,
+    const folly::dynamic& args) {
+  static auto dispatchCommand =
+      JFabricUIManager::javaClassStatic()
+          ->getMethod<void(jint, jint, jstring, ReadableArray::javaobject)>(
+              "dispatchCommand");
+  auto command = jni::make_jstring(commandName);
+  auto argsArray = jni::adopt_local(reinterpret_cast<ReadableArray::javaobject>(
+      ReadableNativeArray::newObjectCxxArgs(args).release()));
+  dispatchCommand(
+      javaUIManager_,
+      shadowView.surfaceId,
+      shadowView.tag,
+      command.get(),
+      argsArray.get());
+}
+
+void FabricMountingManager::sendAccessibilityEvent(
+    const ShadowView& shadowView,
+    const std::string& eventType) {
+  static auto sendAccessibilityEventFromJS =
+      JFabricUIManager::javaClassStatic()->getMethod<void(jint, jint, jstring)>(
+          "sendAccessibilityEventFromJS");
+
+  auto eventTypeStr = jni::make_jstring(eventType);
+  sendAccessibilityEventFromJS(
+      javaUIManager_, shadowView.surfaceId, shadowView.tag, eventTypeStr.get());
+}
+
+void FabricMountingManager::setIsJSResponder(
+    const ShadowView& shadowView,
+    bool isJSResponder,
+    bool blockNativeResponder) {
+  static auto setJSResponder =
+      JFabricUIManager::javaClassStatic()
+          ->getMethod<void(jint, jint, jint, jboolean)>("setJSResponder");
+
+  static auto clearJSResponder =
+      JFabricUIManager::javaClassStatic()->getMethod<void()>(
+          "clearJSResponder");
+
+  if (isJSResponder) {
+    setJSResponder(
+        javaUIManager_,
+        shadowView.surfaceId,
+        shadowView.tag,
+        // The closest non-flattened ancestor of the same value if the node is
+        // not flattened. For now, we don't support the case when the node can
+        // be flattened because the only component that uses this feature -
+        // ScrollView - cannot be flattened.
+        shadowView.tag,
+        (jboolean)blockNativeResponder);
+  } else {
+    clearJSResponder(javaUIManager_);
+  }
+}
+
+void FabricMountingManager::onAnimationStarted() {
+  static auto layoutAnimationsStartedJNI =
+      JFabricUIManager::javaClassStatic()->getMethod<void()>(
+          "onAnimationStarted");
+
+  layoutAnimationsStartedJNI(javaUIManager_);
+}
+
+void FabricMountingManager::onAllAnimationsComplete() {
+  static auto allAnimationsCompleteJNI =
+      JFabricUIManager::javaClassStatic()->getMethod<void()>(
+          "onAllAnimationsComplete");
+
+  allAnimationsCompleteJNI(javaUIManager_);
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/FabricMountingManager.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/FabricMountingManager.h
new file mode 100644
index 0000000..03457b4
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/FabricMountingManager.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <mutex>
+#include <unordered_map>
+#include <unordered_set>
+
+#include <fbjni/fbjni.h>
+#include <react/fabric/JFabricUIManager.h>
+#include <react/renderer/uimanager/primitives.h>
+
+namespace facebook::react {
+
+class MountingTransaction;
+class ReactNativeConfig;
+struct ShadowView;
+
+class FabricMountingManager final {
+ public:
+  FabricMountingManager(
+      std::shared_ptr<const ReactNativeConfig>& config,
+      jni::global_ref<JFabricUIManager::javaobject>& javaUIManager);
+  FabricMountingManager(const FabricMountingManager&) = delete;
+
+  void onSurfaceStart(SurfaceId surfaceId);
+
+  void onSurfaceStop(SurfaceId surfaceId);
+
+  void preallocateShadowView(const ShadowNode& shadowNode);
+
+  void executeMount(const MountingTransaction& transaction);
+
+  void dispatchCommand(
+      const ShadowView& shadowView,
+      const std::string& commandName,
+      const folly::dynamic& args);
+
+  void sendAccessibilityEvent(
+      const ShadowView& shadowView,
+      const std::string& eventType);
+
+  void setIsJSResponder(
+      const ShadowView& shadowView,
+      bool isJSResponder,
+      bool blockNativeResponder);
+
+  void onAnimationStarted();
+
+  void onAllAnimationsComplete();
+
+ private:
+  jni::global_ref<JFabricUIManager::javaobject> javaUIManager_;
+
+  std::recursive_mutex commitMutex_;
+
+  std::unordered_map<SurfaceId, std::unordered_set<Tag>>
+      allocatedViewRegistry_{};
+  std::recursive_mutex allocatedViewsMutex_;
+
+  jni::local_ref<jobject> getProps(
+      const ShadowView& oldShadowView,
+      const ShadowView& newShadowView);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JBackgroundExecutor.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JBackgroundExecutor.cpp
new file mode 100644
index 0000000..5f48d61
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JBackgroundExecutor.cpp
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JBackgroundExecutor.h"
+
+#include <fbjni/NativeRunnable.h>
+#include <fbjni/fbjni.h>
+
+namespace facebook::react {
+
+using namespace facebook::jni;
+
+BackgroundExecutor JBackgroundExecutor::create(const std::string& name) {
+  auto instance = make_global(newInstance(name));
+  return [instance = std::move(instance)](std::function<void()>&& runnable) {
+    static auto method =
+        javaClassStatic()->getMethod<void(JRunnable::javaobject)>(
+            "queueRunnable");
+    auto jrunnable = JNativeRunnable::newObjectCxxArgs(std::move(runnable));
+    method(instance, jrunnable.get());
+  };
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JBackgroundExecutor.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JBackgroundExecutor.h
new file mode 100644
index 0000000..1224ec7
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JBackgroundExecutor.h
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/renderer/uimanager/primitives.h>
+
+namespace facebook::react {
+
+class JBackgroundExecutor : public jni::JavaClass<JBackgroundExecutor> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/BackgroundExecutor;";
+
+  static BackgroundExecutor create(const std::string& name);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JFabricUIManager.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JFabricUIManager.cpp
new file mode 100644
index 0000000..48326b9
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JFabricUIManager.cpp
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JFabricUIManager.h"
+
+#include "Binding.h"
+
+namespace facebook::react {
+
+Binding* JFabricUIManager::getBinding() {
+  static const auto bindingField =
+      javaClassStatic()->getField<JBinding::javaobject>("mBinding");
+
+  return jni::static_ref_cast<Binding::javaobject>(getFieldValue(bindingField))
+      ->cthis();
+}
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JFabricUIManager.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JFabricUIManager.h
new file mode 100644
index 0000000..5134ed5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/JFabricUIManager.h
@@ -0,0 +1,24 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+
+namespace facebook::react {
+
+class Binding;
+
+class JFabricUIManager : public jni::JavaClass<JFabricUIManager> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/fabric/FabricUIManager;";
+
+  Binding* getBinding();
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/MountItem.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/MountItem.cpp
new file mode 100644
index 0000000..b1f20f8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/MountItem.cpp
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "MountItem.h"
+
+namespace facebook::react {
+
+CppMountItem CppMountItem::CreateMountItem(const ShadowView& shadowView) {
+  return {CppMountItem::Type::Create, {}, {}, shadowView, -1};
+}
+CppMountItem CppMountItem::DeleteMountItem(const ShadowView& shadowView) {
+  return {CppMountItem::Type::Delete, {}, shadowView, {}, -1};
+}
+CppMountItem CppMountItem::InsertMountItem(
+    const ShadowView& parentView,
+    const ShadowView& shadowView,
+    int index) {
+  return {CppMountItem::Type::Insert, parentView, {}, shadowView, index};
+}
+CppMountItem CppMountItem::RemoveMountItem(
+    const ShadowView& parentView,
+    const ShadowView& shadowView,
+    int index) {
+  return {CppMountItem::Type::Remove, parentView, shadowView, {}, index};
+}
+CppMountItem CppMountItem::RemoveDeleteTreeMountItem(
+    const ShadowView& parentView,
+    const ShadowView& shadowView,
+    int index) {
+  return {
+      CppMountItem::Type::RemoveDeleteTree, parentView, shadowView, {}, index};
+}
+CppMountItem CppMountItem::UpdatePropsMountItem(
+    const ShadowView& oldShadowView,
+    const ShadowView& newShadowView) {
+  return {
+      CppMountItem::Type::UpdateProps, {}, oldShadowView, newShadowView, -1};
+}
+CppMountItem CppMountItem::UpdateStateMountItem(const ShadowView& shadowView) {
+  return {CppMountItem::Type::UpdateState, {}, {}, shadowView, -1};
+}
+CppMountItem CppMountItem::UpdateLayoutMountItem(
+    const ShadowView& shadowView,
+    const ShadowView& parentView) {
+  return {CppMountItem::Type::UpdateLayout, parentView, {}, shadowView, -1};
+}
+CppMountItem CppMountItem::UpdateEventEmitterMountItem(
+    const ShadowView& shadowView) {
+  return {CppMountItem::Type::UpdateEventEmitter, {}, {}, shadowView, -1};
+}
+CppMountItem CppMountItem::UpdatePaddingMountItem(
+    const ShadowView& shadowView) {
+  return {CppMountItem::Type::UpdatePadding, {}, {}, shadowView, -1};
+}
+CppMountItem CppMountItem::UpdateOverflowInsetMountItem(
+    const ShadowView& shadowView) {
+  return {CppMountItem::Type::UpdateOverflowInset, {}, {}, shadowView, -1};
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/MountItem.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/MountItem.h
new file mode 100644
index 0000000..d3b65a7
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/MountItem.h
@@ -0,0 +1,86 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/renderer/mounting/ShadowView.h>
+
+namespace facebook::react {
+
+struct JMountItem : public jni::JavaClass<JMountItem> {
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/fabric/mounting/mountitems/MountItem;";
+};
+
+struct CppMountItem final {
+#pragma mark - Designated Initializers
+
+  static CppMountItem CreateMountItem(const ShadowView& shadowView);
+
+  static CppMountItem DeleteMountItem(const ShadowView& shadowView);
+
+  static CppMountItem InsertMountItem(
+      const ShadowView& parentView,
+      const ShadowView& shadowView,
+      int index);
+
+  static CppMountItem RemoveMountItem(
+      const ShadowView& parentView,
+      const ShadowView& shadowView,
+      int index);
+
+  static CppMountItem RemoveDeleteTreeMountItem(
+      const ShadowView& parentView,
+      const ShadowView& shadowView,
+      int index);
+
+  static CppMountItem UpdatePropsMountItem(
+      const ShadowView& oldShadowView,
+      const ShadowView& newShadowView);
+
+  static CppMountItem UpdateStateMountItem(const ShadowView& shadowView);
+
+  static CppMountItem UpdateLayoutMountItem(
+      const ShadowView& shadowView,
+      const ShadowView& parentView);
+
+  static CppMountItem UpdateEventEmitterMountItem(const ShadowView& shadowView);
+
+  static CppMountItem UpdatePaddingMountItem(const ShadowView& shadowView);
+
+  static CppMountItem UpdateOverflowInsetMountItem(
+      const ShadowView& shadowView);
+
+#pragma mark - Type
+
+  enum Type {
+    Undefined = -1,
+    Multiple = 1,
+    Create = 2,
+    Delete = 4,
+    Insert = 8,
+    Remove = 16,
+    UpdateProps = 32,
+    UpdateState = 64,
+    UpdateLayout = 128,
+    UpdateEventEmitter = 256,
+    UpdatePadding = 512,
+    UpdateOverflowInset = 1024,
+    RemoveDeleteTree = 2048
+  };
+
+#pragma mark - Fields
+
+  Type type = {Create};
+  ShadowView parentShadowView = {};
+  ShadowView oldChildShadowView = {};
+  ShadowView newChildShadowView = {};
+  int index = {};
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/OnLoad.cpp
new file mode 100644
index 0000000..1e4ab75
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/OnLoad.cpp
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fbjni/fbjni.h>
+
+#include "Binding.h"
+#include "ComponentFactory.h"
+#include "CoreComponentsRegistry.h"
+#include "EventBeatManager.h"
+#include "EventEmitterWrapper.h"
+#include "JEmptyReactNativeConfig.h"
+#include "StateWrapperImpl.h"
+#include "SurfaceHandlerBinding.h"
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*) {
+  return facebook::jni::initialize(vm, [] {
+    facebook::react::Binding::registerNatives();
+    facebook::react::EventBeatManager::registerNatives();
+    facebook::react::EventEmitterWrapper::registerNatives();
+    facebook::react::StateWrapperImpl::registerNatives();
+    facebook::react::ComponentFactory::registerNatives();
+    facebook::react::CoreComponentsRegistry::registerNatives();
+    facebook::react::SurfaceHandlerBinding::registerNatives();
+    facebook::react::JEmptyReactNativeConfig::registerNatives();
+  });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ReactNativeConfigHolder.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ReactNativeConfigHolder.cpp
new file mode 100644
index 0000000..84c3ae5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ReactNativeConfigHolder.cpp
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "ReactNativeConfigHolder.h"
+
+#include <fbjni/fbjni.h>
+
+using namespace facebook::react;
+
+bool ReactNativeConfigHolder::getBool(const std::string& param) const {
+  static const auto method = facebook::jni::findClassStatic(
+                                 "com/facebook/react/fabric/ReactNativeConfig")
+                                 ->getMethod<jboolean(jstring)>("getBool");
+  return method(reactNativeConfig_, facebook::jni::make_jstring(param).get());
+}
+
+std::string ReactNativeConfigHolder::getString(const std::string& param) const {
+  static const auto method = facebook::jni::findClassStatic(
+                                 "com/facebook/react/fabric/ReactNativeConfig")
+                                 ->getMethod<jstring(jstring)>("getString");
+  return method(reactNativeConfig_, facebook::jni::make_jstring(param).get())
+      ->toString();
+}
+
+int64_t ReactNativeConfigHolder::getInt64(const std::string& param) const {
+  static const auto method = facebook::jni::findClassStatic(
+                                 "com/facebook/react/fabric/ReactNativeConfig")
+                                 ->getMethod<jlong(jstring)>("getInt64");
+  return method(reactNativeConfig_, facebook::jni::make_jstring(param).get());
+}
+
+double ReactNativeConfigHolder::getDouble(const std::string& param) const {
+  static const auto method = facebook::jni::findClassStatic(
+                                 "com/facebook/react/fabric/ReactNativeConfig")
+                                 ->getMethod<jdouble(jstring)>("getDouble");
+  return method(reactNativeConfig_, facebook::jni::make_jstring(param).get());
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ReactNativeConfigHolder.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ReactNativeConfigHolder.h
new file mode 100644
index 0000000..a169235
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/ReactNativeConfigHolder.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/config/ReactNativeConfig.h>
+#include <react/jni/ReadableNativeMap.h>
+#include <memory>
+
+namespace facebook::react {
+
+/**
+ * Implementation of ReactNativeConfig that wraps a ReactNativeConfig Java
+ * object.
+ */
+class ReactNativeConfigHolder : public ReactNativeConfig {
+ public:
+  explicit ReactNativeConfigHolder(jni::alias_ref<jobject> reactNativeConfig)
+      : reactNativeConfig_(make_global(reactNativeConfig)){};
+
+  bool getBool(const std::string& param) const override;
+  std::string getString(const std::string& param) const override;
+  int64_t getInt64(const std::string& param) const override;
+  double getDouble(const std::string& param) const override;
+
+ private:
+  jni::global_ref<jobject> reactNativeConfig_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/StateWrapperImpl.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/StateWrapperImpl.cpp
new file mode 100644
index 0000000..bf5c18e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/StateWrapperImpl.cpp
@@ -0,0 +1,66 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "StateWrapperImpl.h"
+#include <fbjni/fbjni.h>
+#include <react/jni/ReadableNativeMap.h>
+#include <react/renderer/mapbuffer/MapBuffer.h>
+#include <react/renderer/mapbuffer/MapBufferBuilder.h>
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+/**
+ * Called from Java constructor through the JNI.
+ */
+jni::local_ref<StateWrapperImpl::jhybriddata> StateWrapperImpl::initHybrid(
+    jni::alias_ref<jclass>) {
+  return makeCxxInstance();
+}
+
+jni::local_ref<ReadableNativeMap::jhybridobject>
+StateWrapperImpl::getStateDataImpl() {
+  if (auto state = state_.lock()) {
+    folly::dynamic map = state->getDynamic();
+    return ReadableNativeMap::newObjectCxxArgs(std::move(map));
+  } else {
+    return nullptr;
+  }
+}
+
+jni::local_ref<JReadableMapBuffer::jhybridobject>
+StateWrapperImpl::getStateMapBufferDataImpl() {
+  if (auto state = state_.lock()) {
+    MapBuffer map = state->getMapBuffer();
+    return JReadableMapBuffer::createWithContents(std::move(map));
+  } else {
+    return nullptr;
+  }
+}
+
+void StateWrapperImpl::updateStateImpl(NativeMap* map) {
+  if (auto state = state_.lock()) {
+    // Get folly::dynamic from map
+    auto dynamicMap = map->consume();
+    // Set state
+    state->updateState(std::move(dynamicMap));
+  }
+}
+
+void StateWrapperImpl::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", StateWrapperImpl::initHybrid),
+      makeNativeMethod("getStateDataImpl", StateWrapperImpl::getStateDataImpl),
+      makeNativeMethod("updateStateImpl", StateWrapperImpl::updateStateImpl),
+      makeNativeMethod(
+          "getStateMapBufferDataImpl",
+          StateWrapperImpl::getStateMapBufferDataImpl),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/StateWrapperImpl.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/StateWrapperImpl.h
new file mode 100644
index 0000000..3aac2e0
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/StateWrapperImpl.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/common/mapbuffer/JReadableMapBuffer.h>
+#include <react/jni/ReadableNativeMap.h>
+#include <react/renderer/core/State.h>
+
+namespace facebook::react {
+
+class Instance;
+
+class StateWrapperImpl : public jni::HybridClass<StateWrapperImpl> {
+ public:
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/fabric/StateWrapperImpl;";
+  constexpr static auto StateWrapperImplJavaDescriptor =
+      "com/facebook/react/fabric/StateWrapperImpl";
+
+  static void registerNatives();
+
+  jni::local_ref<JReadableMapBuffer::jhybridobject> getStateMapBufferDataImpl();
+  jni::local_ref<ReadableNativeMap::jhybridobject> getStateDataImpl();
+  void updateStateImpl(NativeMap* map);
+
+  std::weak_ptr<const State> state_;
+
+ private:
+  jni::alias_ref<StateWrapperImpl::jhybriddata> jhybridobject_;
+
+  static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jclass>);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/SurfaceHandlerBinding.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/SurfaceHandlerBinding.cpp
new file mode 100644
index 0000000..dd0efec
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/SurfaceHandlerBinding.cpp
@@ -0,0 +1,115 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "SurfaceHandlerBinding.h"
+#include <react/renderer/scheduler/Scheduler.h>
+
+namespace facebook::react {
+
+SurfaceHandlerBinding::SurfaceHandlerBinding(
+    SurfaceId surfaceId,
+    const std::string& moduleName)
+    : surfaceHandler_(moduleName, surfaceId) {}
+
+void SurfaceHandlerBinding::setDisplayMode(jint mode) {
+  surfaceHandler_.setDisplayMode(static_cast<DisplayMode>(mode));
+}
+
+void SurfaceHandlerBinding::start() {
+  std::unique_lock lock(lifecycleMutex_);
+
+  if (surfaceHandler_.getStatus() != SurfaceHandler::Status::Running) {
+    surfaceHandler_.start();
+  }
+}
+
+void SurfaceHandlerBinding::stop() {
+  std::unique_lock lock(lifecycleMutex_);
+
+  if (surfaceHandler_.getStatus() == SurfaceHandler::Status::Running) {
+    surfaceHandler_.stop();
+  }
+}
+
+jint SurfaceHandlerBinding::getSurfaceId() {
+  return surfaceHandler_.getSurfaceId();
+}
+
+void SurfaceHandlerBinding::setSurfaceId(jint surfaceId) {
+  surfaceHandler_.setSurfaceId(surfaceId);
+}
+
+jboolean SurfaceHandlerBinding::isRunning() {
+  return surfaceHandler_.getStatus() == SurfaceHandler::Status::Running;
+}
+
+jni::local_ref<jstring> SurfaceHandlerBinding::getModuleName() {
+  return jni::make_jstring(surfaceHandler_.getModuleName());
+}
+
+jni::local_ref<SurfaceHandlerBinding::jhybriddata>
+SurfaceHandlerBinding::initHybrid(
+    jni::alias_ref<jclass>,
+    jint surfaceId,
+    jni::alias_ref<jstring> moduleName) {
+  return makeCxxInstance(surfaceId, moduleName->toStdString());
+}
+
+void SurfaceHandlerBinding::setLayoutConstraints(
+    jfloat minWidth,
+    jfloat maxWidth,
+    jfloat minHeight,
+    jfloat maxHeight,
+    jfloat offsetX,
+    jfloat offsetY,
+    jboolean doLeftAndRightSwapInRTL,
+    jboolean isRTL,
+    jfloat pixelDensity) {
+  LayoutConstraints constraints = {};
+  constraints.minimumSize = {minWidth, minHeight};
+  constraints.maximumSize = {maxWidth, maxHeight};
+  constraints.layoutDirection =
+      isRTL ? LayoutDirection::RightToLeft : LayoutDirection::LeftToRight;
+
+  LayoutContext context = {};
+  context.swapLeftAndRightInRTL = doLeftAndRightSwapInRTL;
+  context.pointScaleFactor = pixelDensity;
+  context.viewportOffset = {offsetX, offsetY};
+
+  surfaceHandler_.constraintLayout(constraints, context);
+}
+
+void SurfaceHandlerBinding::setProps(NativeMap* props) {
+  surfaceHandler_.setProps(props->consume());
+}
+
+const SurfaceHandler& SurfaceHandlerBinding::getSurfaceHandler() {
+  return surfaceHandler_;
+}
+
+void SurfaceHandlerBinding::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", SurfaceHandlerBinding::initHybrid),
+      makeNativeMethod(
+          "getSurfaceIdNative", SurfaceHandlerBinding::getSurfaceId),
+      makeNativeMethod(
+          "setSurfaceIdNative", SurfaceHandlerBinding::setSurfaceId),
+      makeNativeMethod("isRunningNative", SurfaceHandlerBinding::isRunning),
+      makeNativeMethod(
+          "getModuleNameNative", SurfaceHandlerBinding::getModuleName),
+      makeNativeMethod("startNative", SurfaceHandlerBinding::start),
+      makeNativeMethod("stopNative", SurfaceHandlerBinding::stop),
+      makeNativeMethod(
+          "setLayoutConstraintsNative",
+          SurfaceHandlerBinding::setLayoutConstraints),
+      makeNativeMethod("setPropsNative", SurfaceHandlerBinding::setProps),
+      makeNativeMethod(
+          "setDisplayModeNative", SurfaceHandlerBinding::setDisplayMode),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/SurfaceHandlerBinding.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/SurfaceHandlerBinding.h
new file mode 100644
index 0000000..f8693cd
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/fabric/SurfaceHandlerBinding.h
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <shared_mutex>
+
+#include <fbjni/fbjni.h>
+#include <react/jni/ReadableNativeMap.h>
+#include <react/renderer/scheduler/SurfaceHandler.h>
+
+namespace facebook::react {
+
+class SurfaceHandlerBinding : public jni::HybridClass<SurfaceHandlerBinding> {
+ public:
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/fabric/SurfaceHandlerBinding;";
+
+  static void registerNatives();
+
+  SurfaceHandlerBinding(SurfaceId surfaceId, const std::string& moduleName);
+
+  void start();
+  void stop();
+
+  void setDisplayMode(jint mode);
+
+  jint getSurfaceId();
+  void setSurfaceId(jint surfaceId);
+  jni::local_ref<jstring> getModuleName();
+
+  jboolean isRunning();
+
+  void setLayoutConstraints(
+      jfloat minWidth,
+      jfloat maxWidth,
+      jfloat minHeight,
+      jfloat maxHeight,
+      jfloat offsetX,
+      jfloat offsetY,
+      jboolean doLeftAndRightSwapInRTL,
+      jboolean isRTL,
+      jfloat pixelDensity);
+
+  void setProps(NativeMap* props);
+
+  const SurfaceHandler& getSurfaceHandler();
+
+ private:
+  mutable std::shared_mutex lifecycleMutex_;
+  const SurfaceHandler surfaceHandler_;
+
+  jni::alias_ref<SurfaceHandlerBinding::jhybriddata> jhybridobject_;
+
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jclass>,
+      jint surfaceId,
+      jni::alias_ref<jstring> moduleName);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/CMakeLists.txt
new file mode 100644
index 0000000..525d86a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/CMakeLists.txt
@@ -0,0 +1,31 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+file(GLOB_RECURSE jsijniprofiler_SRC CONFIGURE_DEPENDS *.cpp)
+
+add_library(
+        jsijniprofiler
+        SHARED
+        ${jsijniprofiler_SRC}
+)
+target_compile_options(
+        jsijniprofiler
+        PRIVATE
+        -fexceptions
+)
+target_include_directories(jsijniprofiler PRIVATE .)
+target_link_libraries(
+      jsijniprofiler
+      fb
+      fbjni
+      jsireact
+      folly_runtime
+      hermes-engine::libhermes
+      jsi
+      reactnativejni
+)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/HermesMemoryDumper.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/HermesMemoryDumper.h
new file mode 100644
index 0000000..b1bd308
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/HermesMemoryDumper.h
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fbjni/fbjni.h>
+#include <string>
+
+namespace facebook {
+namespace jsi {
+namespace jni {
+
+namespace jni = ::facebook::jni;
+
+class HermesMemoryDumper : public jni::JavaClass<HermesMemoryDumper> {
+ public:
+  constexpr static auto kJavaDescriptor =
+      "Lcom/facebook/hermes/instrumentation/HermesMemoryDumper;";
+
+  bool shouldSaveSnapshot() {
+    static auto shouldSaveSnapshotMethod =
+        javaClassStatic()->getMethod<jboolean()>("shouldSaveSnapshot");
+    return shouldSaveSnapshotMethod(self());
+  }
+
+  std::string getInternalStorage() {
+    static auto getInternalStorageMethod =
+        javaClassStatic()->getMethod<jstring()>("getInternalStorage");
+    return getInternalStorageMethod(self())->toStdString();
+  }
+
+  std::string getId() {
+    static auto getInternalStorageMethod =
+        javaClassStatic()->getMethod<jstring()>("getId");
+    return getInternalStorageMethod(self())->toStdString();
+  }
+
+  void setMetaData(std::string crashId) {
+    static auto getIdMethod =
+        javaClassStatic()->getMethod<void(std::string)>("setMetaData");
+    getIdMethod(self(), crashId);
+  }
+};
+
+} // namespace jni
+} // namespace jsi
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/HermesSamplingProfiler.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/HermesSamplingProfiler.cpp
new file mode 100644
index 0000000..d10f857
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/HermesSamplingProfiler.cpp
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "HermesSamplingProfiler.h"
+
+#include <hermes/hermes.h>
+
+namespace facebook {
+namespace jsi {
+namespace jni {
+
+void HermesSamplingProfiler::enable(jni::alias_ref<jclass>) {
+  hermes::HermesRuntime::enableSamplingProfiler();
+}
+
+void HermesSamplingProfiler::disable(jni::alias_ref<jclass>) {
+  hermes::HermesRuntime::disableSamplingProfiler();
+}
+
+void HermesSamplingProfiler::dumpSampledTraceToFile(
+    jni::alias_ref<jclass>,
+    std::string filename) {
+  hermes::HermesRuntime::dumpSampledTraceToFile(filename);
+}
+
+void HermesSamplingProfiler::registerNatives() {
+  javaClassLocal()->registerNatives({
+      makeNativeMethod("enable", HermesSamplingProfiler::enable),
+      makeNativeMethod("disable", HermesSamplingProfiler::enable),
+      makeNativeMethod(
+          "dumpSampledTraceToFile",
+          HermesSamplingProfiler::dumpSampledTraceToFile),
+  });
+}
+
+} // namespace jni
+} // namespace jsi
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/HermesSamplingProfiler.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/HermesSamplingProfiler.h
new file mode 100644
index 0000000..0c6a2e3
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/HermesSamplingProfiler.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#ifndef HERMESSAMPLINGPROFILER_H_
+#define HERMESSAMPLINGPROFILER_H_
+
+#include <fbjni/fbjni.h>
+#include <jsi/jsi.h>
+
+namespace facebook {
+namespace jsi {
+namespace jni {
+
+namespace jni = ::facebook::jni;
+
+class HermesSamplingProfiler : public jni::JavaClass<HermesSamplingProfiler> {
+ public:
+  constexpr static auto kJavaDescriptor =
+      "Lcom/facebook/hermes/instrumentation/HermesSamplingProfiler;";
+  static void enable(jni::alias_ref<jclass>);
+  static void disable(jni::alias_ref<jclass>);
+  static void dumpSampledTraceToFile(
+      jni::alias_ref<jclass>,
+      std::string filename);
+
+  static void registerNatives();
+
+ private:
+  HermesSamplingProfiler();
+};
+
+} // namespace jni
+} // namespace jsi
+} // namespace facebook
+
+#endif /* HERMESSAMPLINGPROFILER_H_ */
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/OnLoad.cpp
new file mode 100644
index 0000000..f46e500
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/instrumentation/OnLoad.cpp
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "HermesSamplingProfiler.h"
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
+  return facebook::jni::initialize(vm, [] {
+    facebook::jsi::jni::HermesSamplingProfiler::registerNatives();
+  });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/reactexecutor/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/reactexecutor/CMakeLists.txt
new file mode 100644
index 0000000..0a7f253
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/reactexecutor/CMakeLists.txt
@@ -0,0 +1,33 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+file(GLOB_RECURSE hermes_executor_SRC CONFIGURE_DEPENDS *.cpp)
+
+add_library(hermes_executor
+        SHARED
+        ${hermes_executor_SRC}
+)
+target_compile_options(
+        hermes_executor
+        PRIVATE
+        $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>
+        -std=c++20
+        -fexceptions
+)
+target_include_directories(hermes_executor PRIVATE .)
+target_link_libraries(
+        hermes_executor
+        hermes_executor_common
+        jsireact
+        fb
+        fbjni
+        folly_runtime
+        hermes-engine::libhermes
+        jsi
+        reactnativejni
+)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/reactexecutor/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/reactexecutor/OnLoad.cpp
new file mode 100644
index 0000000..035b511
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/hermes/reactexecutor/OnLoad.cpp
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <../instrumentation/HermesMemoryDumper.h>
+#include <HermesExecutorFactory.h>
+#include <android/log.h>
+#include <fbjni/fbjni.h>
+#include <glog/logging.h>
+#include <hermes/Public/GCConfig.h>
+#include <hermes/Public/RuntimeConfig.h>
+#include <jni.h>
+#include <react/jni/JReactMarker.h>
+#include <react/jni/JSLogging.h>
+#include <react/jni/JavaScriptExecutorHolder.h>
+
+#include <memory>
+
+namespace facebook::react {
+
+static void hermesFatalHandler(const std::string& reason) {
+  LOG(ERROR) << "Hermes Fatal: " << reason << "\n";
+  __android_log_assert(nullptr, "Hermes", "%s", reason.c_str());
+}
+
+static std::once_flag flag;
+
+static ::hermes::vm::RuntimeConfig makeRuntimeConfig(jlong heapSizeMB) {
+  namespace vm = ::hermes::vm;
+  auto gcConfigBuilder = vm::GCConfig::Builder().withName("RN");
+  if (heapSizeMB > 0) {
+    gcConfigBuilder.withMaxHeapSize(heapSizeMB << 20);
+  }
+
+  return vm::RuntimeConfig::Builder()
+      .withGCConfig(gcConfigBuilder.build())
+      .withEnableSampleProfiling(true)
+      .build();
+}
+
+static void installBindings(jsi::Runtime& runtime) {
+  react::Logger androidLogger =
+      static_cast<void (*)(const std::string&, unsigned int)>(
+          &reactAndroidLoggingHook);
+  react::bindNativeLogger(runtime, androidLogger);
+}
+
+class HermesExecutorHolder
+    : public jni::HybridClass<HermesExecutorHolder, JavaScriptExecutorHolder> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/hermes/reactexecutor/HermesExecutor;";
+
+  static jni::local_ref<jhybriddata> initHybridDefaultConfig(
+      jni::alias_ref<jclass>,
+      bool enableDebugger,
+      std::string debuggerName) {
+    JReactMarker::setLogPerfMarkerIfNeeded();
+
+    std::call_once(flag, []() {
+      facebook::hermes::HermesRuntime::setFatalHandler(hermesFatalHandler);
+    });
+    auto factory = std::make_unique<HermesExecutorFactory>(installBindings);
+    factory->setEnableDebugger(enableDebugger);
+    if (!debuggerName.empty()) {
+      factory->setDebuggerName(debuggerName);
+    }
+    return makeCxxInstance(std::move(factory));
+  }
+
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jclass>,
+      bool enableDebugger,
+      std::string debuggerName,
+      jlong heapSizeMB) {
+    JReactMarker::setLogPerfMarkerIfNeeded();
+    auto runtimeConfig = makeRuntimeConfig(heapSizeMB);
+    std::call_once(flag, []() {
+      facebook::hermes::HermesRuntime::setFatalHandler(hermesFatalHandler);
+    });
+    auto factory = std::make_unique<HermesExecutorFactory>(
+        installBindings, JSIExecutor::defaultTimeoutInvoker, runtimeConfig);
+    factory->setEnableDebugger(enableDebugger);
+    if (!debuggerName.empty()) {
+      factory->setDebuggerName(debuggerName);
+    }
+    return makeCxxInstance(std::move(factory));
+  }
+
+  static void registerNatives() {
+    registerHybrid(
+        {makeNativeMethod("initHybrid", HermesExecutorHolder::initHybrid),
+         makeNativeMethod(
+             "initHybridDefaultConfig",
+             HermesExecutorHolder::initHybridDefaultConfig)});
+  }
+
+ private:
+  friend HybridBase;
+  using HybridBase::HybridBase;
+};
+
+} // namespace facebook::react
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
+  return facebook::jni::initialize(
+      vm, [] { facebook::react::HermesExecutorHolder::registerNatives(); });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CMakeLists.txt
new file mode 100644
index 0000000..e503374
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CMakeLists.txt
@@ -0,0 +1,42 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+file(GLOB reactnativejni_SRC CONFIGURE_DEPENDS *.cpp)
+
+add_compile_options(
+        -fexceptions
+        -Wno-unused-lambda-capture
+        -std=c++20)
+
+######################
+### reactnativejni ###
+######################
+
+
+add_library(
+        reactnativejni
+        SHARED
+        ${reactnativejni_SRC}
+)
+
+# TODO This should not be ../../
+target_include_directories(reactnativejni PUBLIC ../../)
+
+target_link_libraries(reactnativejni
+        android
+        callinvokerholder
+        fb
+        fbjni
+        folly_runtime
+        glog_init
+        logger
+        react_cxxreact
+        react_render_runtimescheduler
+        runtimeexecutor
+        yoga
+        )
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CatalystInstanceImpl.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CatalystInstanceImpl.cpp
new file mode 100644
index 0000000..8dccfab
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CatalystInstanceImpl.cpp
@@ -0,0 +1,422 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "CatalystInstanceImpl.h"
+#include "ReactInstanceManagerInspectorTarget.h"
+
+#include <fstream>
+#include <memory>
+
+#include <ReactCommon/CallInvokerHolder.h>
+#include <cxxreact/CxxNativeModule.h>
+#include <cxxreact/Instance.h>
+#include <cxxreact/JSBigString.h>
+#include <cxxreact/JSBundleType.h>
+#include <cxxreact/JSIndexedRAMBundle.h>
+#include <cxxreact/MethodCall.h>
+#include <cxxreact/ModuleRegistry.h>
+#include <cxxreact/RAMBundleRegistry.h>
+#include <cxxreact/RecoverableError.h>
+#include <fb/log.h>
+#include <fbjni/ByteBuffer.h>
+#include <folly/dynamic.h>
+#include <glog/logging.h>
+#include <react/renderer/runtimescheduler/RuntimeScheduler.h>
+#include <react/renderer/runtimescheduler/RuntimeSchedulerBinding.h>
+#include <react/renderer/runtimescheduler/RuntimeSchedulerCallInvoker.h>
+
+#include <logger/react_native_log.h>
+
+#include "JReactCxxErrorHandler.h"
+#include "JReactSoftExceptionLogger.h"
+#include "JavaScriptExecutorHolder.h"
+#include "JniJSModulesUnbundle.h"
+#include "NativeArray.h"
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+namespace {
+
+class InstanceCallbackImpl : public InstanceCallback {
+ public:
+  explicit InstanceCallbackImpl(alias_ref<JInstanceCallback::javaobject> jobj)
+      : jobj_(make_global(jobj)) {}
+
+  void onBatchComplete() override {
+    jni::ThreadScope guard;
+    static auto method =
+        JInstanceCallback::javaClassStatic()->getMethod<void()>(
+            "onBatchComplete");
+    method(jobj_);
+  }
+
+  void incrementPendingJSCalls() override {
+    // For C++ modules, this can be called from an arbitrary thread
+    // managed by the module, via callJSCallback or callJSFunction.  So,
+    // we ensure that it is registered with the JVM.
+    jni::ThreadScope guard;
+    static auto method =
+        JInstanceCallback::javaClassStatic()->getMethod<void()>(
+            "incrementPendingJSCalls");
+    method(jobj_);
+  }
+
+  void decrementPendingJSCalls() override {
+    jni::ThreadScope guard;
+    static auto method =
+        JInstanceCallback::javaClassStatic()->getMethod<void()>(
+            "decrementPendingJSCalls");
+    method(jobj_);
+  }
+
+ private:
+  global_ref<JInstanceCallback::javaobject> jobj_;
+};
+
+} // namespace
+
+jni::local_ref<CatalystInstanceImpl::jhybriddata>
+CatalystInstanceImpl::initHybrid(jni::alias_ref<jclass>) {
+  return makeCxxInstance();
+}
+
+CatalystInstanceImpl::CatalystInstanceImpl()
+    : instance_(std::make_unique<Instance>()) {}
+
+void CatalystInstanceImpl::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", CatalystInstanceImpl::initHybrid),
+      makeNativeMethod(
+          "initializeBridge", CatalystInstanceImpl::initializeBridge),
+      makeNativeMethod(
+          "jniExtendNativeModules", CatalystInstanceImpl::extendNativeModules),
+      makeNativeMethod(
+          "jniSetSourceURL", CatalystInstanceImpl::jniSetSourceURL),
+      makeNativeMethod(
+          "jniRegisterSegment", CatalystInstanceImpl::jniRegisterSegment),
+      makeNativeMethod(
+          "jniLoadScriptFromAssets",
+          CatalystInstanceImpl::jniLoadScriptFromAssets),
+      makeNativeMethod(
+          "jniLoadScriptFromFile", CatalystInstanceImpl::jniLoadScriptFromFile),
+      makeNativeMethod(
+          "jniCallJSFunction", CatalystInstanceImpl::jniCallJSFunction),
+      makeNativeMethod(
+          "jniCallJSCallback", CatalystInstanceImpl::jniCallJSCallback),
+      makeNativeMethod(
+          "setGlobalVariable", CatalystInstanceImpl::setGlobalVariable),
+      makeNativeMethod(
+          "getJavaScriptContext", CatalystInstanceImpl::getJavaScriptContext),
+      makeNativeMethod(
+          "getJSCallInvokerHolder",
+          CatalystInstanceImpl::getJSCallInvokerHolder),
+      makeNativeMethod(
+          "getNativeMethodCallInvokerHolder",
+          CatalystInstanceImpl::getNativeMethodCallInvokerHolder),
+      makeNativeMethod(
+          "jniHandleMemoryPressure",
+          CatalystInstanceImpl::handleMemoryPressure),
+      makeNativeMethod(
+          "getRuntimeExecutor", CatalystInstanceImpl::getRuntimeExecutor),
+      makeNativeMethod(
+          "getRuntimeScheduler", CatalystInstanceImpl::getRuntimeScheduler),
+      makeNativeMethod(
+          "unregisterFromInspector",
+          CatalystInstanceImpl::unregisterFromInspector),
+  });
+}
+
+void log(ReactNativeLogLevel level, const char* message) {
+  switch (level) {
+    case ReactNativeLogLevelInfo:
+      LOG(INFO) << message;
+      break;
+    case ReactNativeLogLevelWarning:
+      LOG(WARNING) << message;
+      JReactSoftExceptionLogger::logNoThrowSoftExceptionWithMessage(
+          "react_native_log#warning", message);
+      break;
+    case ReactNativeLogLevelError:
+      LOG(ERROR) << message;
+      JReactCxxErrorHandler::handleError(message);
+      break;
+    case ReactNativeLogLevelFatal:
+      LOG(FATAL) << message;
+      break;
+  }
+}
+
+void CatalystInstanceImpl::initializeBridge(
+    jni::alias_ref<JInstanceCallback::javaobject> callback,
+    // This executor is actually a factory holder.
+    JavaScriptExecutorHolder* jseh,
+    jni::alias_ref<JavaMessageQueueThread::javaobject> jsQueue,
+    jni::alias_ref<JavaMessageQueueThread::javaobject> nativeModulesQueue,
+    jni::alias_ref<jni::JCollection<JavaModuleWrapper::javaobject>::javaobject>
+        javaModules,
+    jni::alias_ref<jni::JCollection<ModuleHolder::javaobject>::javaobject>
+        cxxModules,
+    jni::alias_ref<ReactInstanceManagerInspectorTarget::javaobject>
+        inspectorTarget) {
+  set_react_native_logfunc(&log);
+
+  // TODO mhorowitz: how to assert here?
+  // Assertions.assertCondition(mBridge == null, "initializeBridge should be
+  // called once");
+  moduleMessageQueue_ =
+      std::make_shared<JMessageQueueThread>(nativeModulesQueue);
+
+  // This used to be:
+  //
+  // Java CatalystInstanceImpl -> C++ CatalystInstanceImpl -> Bridge ->
+  // Bridge::Callback
+  // --weak--> ReactCallback -> Java CatalystInstanceImpl
+  //
+  // Now the weak ref is a global ref.  So breaking the loop depends on
+  // CatalystInstanceImpl#destroy() calling mHybridData.resetNative(), which
+  // should cause all the C++ pointers to be cleaned up (except C++
+  // CatalystInstanceImpl might be kept alive for a short time by running
+  // callbacks). This also means that all native calls need to be pre-checked
+  // to avoid NPE.
+
+  // See the comment in callJSFunction.  Once js calls switch to strings, we
+  // don't need jsModuleDescriptions any more, all the way up and down the
+  // stack.
+
+  moduleRegistry_ = std::make_shared<ModuleRegistry>(buildNativeModuleList(
+      std::weak_ptr<Instance>(instance_),
+      javaModules,
+      cxxModules,
+      moduleMessageQueue_));
+
+  instance_->initializeBridge(
+      std::make_unique<InstanceCallbackImpl>(callback),
+      jseh->getExecutorFactory(),
+      std::make_unique<JMessageQueueThread>(jsQueue),
+      moduleRegistry_,
+      inspectorTarget != nullptr
+          ? inspectorTarget->cthis()->getInspectorTarget()
+          : nullptr);
+}
+
+void CatalystInstanceImpl::extendNativeModules(
+    jni::alias_ref<jni::JCollection<JavaModuleWrapper::javaobject>::javaobject>
+        javaModules,
+    jni::alias_ref<jni::JCollection<ModuleHolder::javaobject>::javaobject>
+        cxxModules) {
+  moduleRegistry_->registerModules(buildNativeModuleList(
+      std::weak_ptr<Instance>(instance_),
+      javaModules,
+      cxxModules,
+      moduleMessageQueue_));
+}
+
+void CatalystInstanceImpl::jniSetSourceURL(const std::string& sourceURL) {
+  instance_->setSourceURL(sourceURL);
+}
+
+void CatalystInstanceImpl::jniRegisterSegment(
+    int segmentId,
+    const std::string& path) {
+  instance_->registerBundle((uint32_t)segmentId, path);
+}
+
+static ScriptTag getScriptTagFromFile(const char* sourcePath) {
+  std::ifstream bundle_stream(sourcePath, std::ios_base::in);
+  BundleHeader header;
+  if (bundle_stream &&
+      bundle_stream.read(reinterpret_cast<char*>(&header), sizeof(header))) {
+    return parseTypeFromHeader(header);
+  } else {
+    return ScriptTag::String;
+  }
+}
+
+static bool isIndexedRAMBundle(std::unique_ptr<const JSBigString>* script) {
+  BundleHeader header;
+  strncpy(
+      reinterpret_cast<char*>(&header), script->get()->c_str(), sizeof(header));
+  return parseTypeFromHeader(header) == ScriptTag::RAMBundle;
+}
+
+void CatalystInstanceImpl::jniLoadScriptFromAssets(
+    jni::alias_ref<JAssetManager::javaobject> assetManager,
+    const std::string& assetURL,
+    bool loadSynchronously) {
+  const int kAssetsLength = 9; // strlen("assets://");
+  auto sourceURL = assetURL.substr(kAssetsLength);
+
+  auto manager = extractAssetManager(assetManager);
+  auto script = loadScriptFromAssets(manager, sourceURL);
+  if (JniJSModulesUnbundle::isUnbundle(manager, sourceURL)) {
+    auto bundle = JniJSModulesUnbundle::fromEntryFile(manager, sourceURL);
+    auto registry = RAMBundleRegistry::singleBundleRegistry(std::move(bundle));
+    instance_->loadRAMBundle(
+        std::move(registry), std::move(script), sourceURL, loadSynchronously);
+    return;
+  } else if (isIndexedRAMBundle(&script)) {
+    instance_->loadRAMBundleFromString(std::move(script), sourceURL);
+  } else {
+    instance_->loadScriptFromString(
+        std::move(script), sourceURL, loadSynchronously);
+  }
+}
+
+void CatalystInstanceImpl::jniLoadScriptFromFile(
+    const std::string& fileName,
+    const std::string& sourceURL,
+    bool loadSynchronously) {
+  auto reactInstance = instance_;
+  if (!reactInstance) {
+    return;
+  }
+
+  switch (getScriptTagFromFile(fileName.c_str())) {
+    case ScriptTag::RAMBundle:
+      instance_->loadRAMBundleFromFile(fileName, sourceURL, loadSynchronously);
+      break;
+    case ScriptTag::String:
+    default: {
+      std::unique_ptr<const JSBigFileString> script;
+      RecoverableError::runRethrowingAsRecoverable<std::system_error>(
+          [&fileName, &script]() {
+            script = JSBigFileString::fromPath(fileName);
+          });
+      instance_->loadScriptFromString(
+          std::move(script), sourceURL, loadSynchronously);
+    }
+  }
+}
+
+void CatalystInstanceImpl::jniCallJSFunction(
+    std::string module,
+    std::string method,
+    NativeArray* arguments) {
+  // We want to share the C++ code, and on iOS, modules pass module/method
+  // names as strings all the way through to JS, and there's no way to do
+  // string -> id mapping on the objc side.  So on Android, we convert the
+  // number to a string, here which gets passed as-is to JS.  There, they they
+  // used as ids if isFinite(), which handles this case, and looked up as
+  // strings otherwise.  Eventually, we'll probably want to modify the stack
+  // from the JS proxy through here to use strings, too.
+  instance_->callJSFunction(
+      std::move(module), std::move(method), arguments->consume());
+}
+
+void CatalystInstanceImpl::jniCallJSCallback(
+    jint callbackId,
+    NativeArray* arguments) {
+  instance_->callJSCallback(callbackId, arguments->consume());
+}
+
+void CatalystInstanceImpl::setGlobalVariable(
+    std::string propName,
+    std::string&& jsonValue) {
+  // This is only ever called from Java with short strings, and only
+  // for testing, so no need to try hard for zero-copy here.
+
+  instance_->setGlobalVariable(
+      std::move(propName),
+      std::make_unique<JSBigStdString>(std::move(jsonValue)));
+}
+
+jlong CatalystInstanceImpl::getJavaScriptContext() {
+  return (jlong)(intptr_t)instance_->getJavaScriptContext();
+}
+
+void CatalystInstanceImpl::handleMemoryPressure(int pressureLevel) {
+  instance_->handleMemoryPressure(pressureLevel);
+}
+
+jni::alias_ref<CallInvokerHolder::javaobject>
+CatalystInstanceImpl::getJSCallInvokerHolder() {
+  if (!jsCallInvokerHolder_) {
+    auto runtimeScheduler = getRuntimeScheduler();
+    auto runtimeSchedulerCallInvoker =
+        std::make_shared<RuntimeSchedulerCallInvoker>(
+            runtimeScheduler->cthis()->get());
+    jsCallInvokerHolder_ = jni::make_global(
+        CallInvokerHolder::newObjectCxxArgs(runtimeSchedulerCallInvoker));
+  }
+  return jsCallInvokerHolder_;
+}
+
+jni::alias_ref<NativeMethodCallInvokerHolder::javaobject>
+CatalystInstanceImpl::getNativeMethodCallInvokerHolder() {
+  if (!nativeMethodCallInvokerHolder_) {
+    class NativeMethodCallInvokerImpl : public NativeMethodCallInvoker {
+     private:
+      std::shared_ptr<JMessageQueueThread> messageQueueThread_;
+
+     public:
+      NativeMethodCallInvokerImpl(
+          std::shared_ptr<JMessageQueueThread> messageQueueThread)
+          : messageQueueThread_(messageQueueThread) {}
+      void invokeAsync(
+          const std::string& methodName,
+          std::function<void()>&& work) noexcept override {
+        messageQueueThread_->runOnQueue(std::move(work));
+      }
+      void invokeSync(
+          const std::string& methodName,
+          std::function<void()>&& work) override {
+        messageQueueThread_->runOnQueueSync(std::move(work));
+      }
+    };
+
+    std::shared_ptr<NativeMethodCallInvoker> nativeMethodCallInvoker =
+        std::make_shared<NativeMethodCallInvokerImpl>(moduleMessageQueue_);
+
+    std::shared_ptr<NativeMethodCallInvoker> decoratedNativeMethodCallInvoker =
+        instance_->getDecoratedNativeMethodCallInvoker(nativeMethodCallInvoker);
+
+    nativeMethodCallInvokerHolder_ =
+        jni::make_global(NativeMethodCallInvokerHolder::newObjectCxxArgs(
+            decoratedNativeMethodCallInvoker));
+  }
+
+  return nativeMethodCallInvokerHolder_;
+}
+
+jni::alias_ref<JRuntimeExecutor::javaobject>
+CatalystInstanceImpl::getRuntimeExecutor() {
+  if (!runtimeExecutor_) {
+    auto executor = instance_->getRuntimeExecutor();
+    if (executor) {
+      runtimeExecutor_ =
+          jni::make_global(JRuntimeExecutor::newObjectCxxArgs(executor));
+    }
+  }
+  return runtimeExecutor_;
+}
+
+jni::alias_ref<JRuntimeScheduler::javaobject>
+CatalystInstanceImpl::getRuntimeScheduler() {
+  if (!runtimeScheduler_) {
+    auto runtimeExecutor = instance_->getRuntimeExecutor();
+    if (runtimeExecutor) {
+      auto runtimeScheduler =
+          std::make_shared<RuntimeScheduler>(runtimeExecutor);
+      runtimeScheduler_ = jni::make_global(
+          JRuntimeScheduler::newObjectCxxArgs(runtimeScheduler));
+      runtimeExecutor([scheduler =
+                           std::move(runtimeScheduler)](jsi::Runtime& runtime) {
+        RuntimeSchedulerBinding::createAndInstallIfNeeded(runtime, scheduler);
+      });
+    }
+  }
+
+  return runtimeScheduler_;
+}
+
+void CatalystInstanceImpl::unregisterFromInspector() {
+  instance_->unregisterFromInspector();
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CatalystInstanceImpl.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CatalystInstanceImpl.h
new file mode 100644
index 0000000..a81b3f6
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CatalystInstanceImpl.h
@@ -0,0 +1,127 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <memory>
+#include <string>
+
+#include <ReactCommon/CallInvokerHolder.h>
+#include <ReactCommon/NativeMethodCallInvokerHolder.h>
+#include <ReactCommon/RuntimeExecutor.h>
+#include <fbjni/fbjni.h>
+
+#include "JMessageQueueThread.h"
+#include "JRuntimeExecutor.h"
+#include "JRuntimeScheduler.h"
+#include "JSLoader.h"
+#include "JavaModuleWrapper.h"
+#include "ModuleRegistryBuilder.h"
+#include "ReactInstanceManagerInspectorTarget.h"
+
+namespace facebook::react {
+
+class Instance;
+class JavaScriptExecutorHolder;
+class NativeArray;
+
+struct JInstanceCallback : public jni::JavaClass<JInstanceCallback> {
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/CatalystInstanceImpl$InstanceCallback;";
+};
+
+class CatalystInstanceImpl : public jni::HybridClass<CatalystInstanceImpl> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/CatalystInstanceImpl;";
+
+  static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jclass>);
+
+  static void registerNatives();
+
+  std::shared_ptr<Instance> getInstance() {
+    return instance_;
+  }
+
+ private:
+  friend HybridBase;
+
+  CatalystInstanceImpl();
+
+  void initializeBridge(
+      jni::alias_ref<JInstanceCallback::javaobject> callback,
+      // This executor is actually a factory holder.
+      JavaScriptExecutorHolder* jseh,
+      jni::alias_ref<JavaMessageQueueThread::javaobject> jsQueue,
+      jni::alias_ref<JavaMessageQueueThread::javaobject> moduleQueue,
+      jni::alias_ref<
+          jni::JCollection<JavaModuleWrapper::javaobject>::javaobject>
+          javaModules,
+      jni::alias_ref<jni::JCollection<ModuleHolder::javaobject>::javaobject>
+          cxxModules,
+      jni::alias_ref<ReactInstanceManagerInspectorTarget::javaobject>
+          inspectorTarget);
+
+  void extendNativeModules(
+      jni::alias_ref<jni::JCollection<
+          JavaModuleWrapper::javaobject>::javaobject> javaModules,
+      jni::alias_ref<jni::JCollection<ModuleHolder::javaobject>::javaobject>
+          cxxModules);
+
+  /**
+   * Sets the source URL of the underlying bridge without loading any JS code.
+   */
+  void jniSetSourceURL(const std::string& sourceURL);
+
+  /**
+   * Registers the file path of an additional JS segment by its ID.
+   *
+   */
+  void jniRegisterSegment(int segmentId, const std::string& path);
+
+  void jniLoadScriptFromAssets(
+      jni::alias_ref<JAssetManager::javaobject> assetManager,
+      const std::string& assetURL,
+      bool loadSynchronously);
+  void jniLoadScriptFromFile(
+      const std::string& fileName,
+      const std::string& sourceURL,
+      bool loadSynchronously);
+  void jniCallJSFunction(
+      std::string module,
+      std::string method,
+      NativeArray* arguments);
+  void jniCallJSCallback(jint callbackId, NativeArray* arguments);
+  jni::alias_ref<CallInvokerHolder::javaobject> getJSCallInvokerHolder();
+  jni::alias_ref<NativeMethodCallInvokerHolder::javaobject>
+  getNativeMethodCallInvokerHolder();
+  jni::alias_ref<JRuntimeExecutor::javaobject> getRuntimeExecutor();
+  jni::alias_ref<JRuntimeScheduler::javaobject> getRuntimeScheduler();
+  void setGlobalVariable(std::string propName, std::string&& jsonValue);
+  jlong getJavaScriptContext();
+  void handleMemoryPressure(int pressureLevel);
+
+  void createAndInstallRuntimeSchedulerIfNecessary();
+
+  /**
+   * Unregisters the instance from the inspector. This method must be called
+   * on the main thread, after initializeBridge has finished executing and
+   * before the destructor for Instance has started.
+   */
+  void unregisterFromInspector();
+
+  // This should be the only long-lived strong reference, but every C++ class
+  // will have a weak reference.
+  std::shared_ptr<Instance> instance_;
+  std::shared_ptr<ModuleRegistry> moduleRegistry_;
+  std::shared_ptr<JMessageQueueThread> moduleMessageQueue_;
+  jni::global_ref<CallInvokerHolder::javaobject> jsCallInvokerHolder_;
+  jni::global_ref<NativeMethodCallInvokerHolder::javaobject>
+      nativeMethodCallInvokerHolder_;
+  jni::global_ref<JRuntimeExecutor::javaobject> runtimeExecutor_;
+  jni::global_ref<JRuntimeScheduler::javaobject> runtimeScheduler_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CxxModuleWrapper.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CxxModuleWrapper.h
new file mode 100644
index 0000000..80747e1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CxxModuleWrapper.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include "CxxModuleWrapperBase.h"
+
+namespace facebook::react {
+
+class CxxModuleWrapper
+    : public jni::HybridClass<CxxModuleWrapper, CxxModuleWrapperBase> {
+ public:
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/bridge/CxxModuleWrapper;";
+
+  std::string getName() override {
+    return module_->getName();
+  }
+
+  // This steals ownership of the underlying module for use by the C++ bridge
+  std::unique_ptr<xplat::module::CxxModule> getModule() override {
+    return std::move(module_);
+  }
+
+ protected:
+  friend HybridBase;
+
+  explicit CxxModuleWrapper(std::unique_ptr<xplat::module::CxxModule> module)
+      : module_(std::move(module)) {}
+
+  std::unique_ptr<xplat::module::CxxModule> module_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CxxModuleWrapperBase.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CxxModuleWrapperBase.h
new file mode 100644
index 0000000..dc1954f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CxxModuleWrapperBase.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <memory>
+#include <string>
+
+#include <cxxreact/CxxModule.h>
+#include <fbjni/fbjni.h>
+
+namespace facebook::react {
+
+struct JNativeModule : jni::JavaClass<JNativeModule> {
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/bridge/NativeModule;";
+};
+
+/**
+ * The C++ part of a CxxModuleWrapper is not a unique class, but it
+ * must extend this base class.
+ */
+class CxxModuleWrapperBase
+    : public jni::HybridClass<CxxModuleWrapperBase, JNativeModule> {
+ public:
+  constexpr static const char* const kJavaDescriptor =
+      "Lcom/facebook/react/bridge/CxxModuleWrapperBase;";
+
+  static void registerNatives() {
+    registerHybrid(
+        {makeNativeMethod("getName", CxxModuleWrapperBase::getName)});
+  }
+
+  // JNI method
+  virtual std::string getName() = 0;
+
+  // Called by ModuleRegistryBuilder
+  virtual std::unique_ptr<xplat::module::CxxModule> getModule() = 0;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CxxSharedModuleWrapper.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CxxSharedModuleWrapper.h
new file mode 100644
index 0000000..8d6dd71
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/CxxSharedModuleWrapper.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <cxxreact/SharedProxyCxxModule.h>
+
+#include "CxxModuleWrapperBase.h"
+
+namespace facebook::react {
+
+class CxxSharedModuleWrapper : public CxxModuleWrapperBase {
+ public:
+  std::string getName() override {
+    return shared_->getName();
+  }
+
+  std::unique_ptr<xplat::module::CxxModule> getModule() override {
+    // Instead of just moving out the stored CxxModule, this creates a
+    // proxy which passes calls to the shared stored CxxModule.
+
+    return std::make_unique<xplat::module::SharedProxyCxxModule>(shared_);
+  }
+
+ protected:
+  explicit CxxSharedModuleWrapper(
+      std::unique_ptr<xplat::module::CxxModule> module)
+      : shared_(std::move(module)) {}
+
+  std::shared_ptr<xplat::module::CxxModule> shared_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JCallback.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JCallback.h
new file mode 100644
index 0000000..0220f80
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JCallback.h
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <memory>
+
+#include <fbjni/fbjni.h>
+#include <folly/dynamic.h>
+
+#include "NativeArray.h"
+
+namespace facebook::react {
+
+class Instance;
+
+struct JCallback : public jni::JavaClass<JCallback> {
+  constexpr static auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/Callback;";
+};
+
+class JCxxCallbackImpl : public jni::HybridClass<JCxxCallbackImpl, JCallback> {
+ public:
+  constexpr static auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/CxxCallbackImpl;";
+
+  static void registerNatives() {
+    javaClassStatic()->registerNatives({
+        makeNativeMethod("nativeInvoke", JCxxCallbackImpl::invoke),
+    });
+  }
+
+ private:
+  friend HybridBase;
+
+  using Callback = std::function<void(folly::dynamic)>;
+  JCxxCallbackImpl(Callback callback) : callback_(std::move(callback)) {}
+
+  void invoke(NativeArray* arguments) {
+    callback_(arguments->consume());
+  }
+
+  Callback callback_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JInspector.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JInspector.cpp
new file mode 100644
index 0000000..41e5c8f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JInspector.cpp
@@ -0,0 +1,112 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JInspector.h"
+
+#include <memory>
+
+namespace facebook::react {
+
+namespace {
+
+class RemoteConnection : public jsinspector_modern::IRemoteConnection {
+ public:
+  RemoteConnection(jni::alias_ref<JRemoteConnection::javaobject> connection)
+      : connection_(jni::make_global(connection)) {}
+
+  virtual void onMessage(std::string message) override {
+    connection_->onMessage(message);
+  }
+
+  virtual void onDisconnect() override {
+    connection_->onDisconnect();
+  }
+
+ private:
+  jni::global_ref<JRemoteConnection::javaobject> connection_;
+};
+
+} // namespace
+
+jni::local_ref<JPage::javaobject>
+JPage::create(int id, const std::string& title, const std::string& vm) {
+  static auto constructor = javaClassStatic()
+                                ->getConstructor<JPage::javaobject(
+                                    jint,
+                                    jni::local_ref<jni::JString>,
+                                    jni::local_ref<jni::JString>)>();
+  return javaClassStatic()->newObject(
+      constructor, id, jni::make_jstring(title), jni::make_jstring(vm));
+}
+
+void JRemoteConnection::onMessage(const std::string& message) const {
+  static auto method =
+      javaClassStatic()->getMethod<void(jni::local_ref<jstring>)>("onMessage");
+  method(self(), jni::make_jstring(message));
+}
+
+void JRemoteConnection::onDisconnect() const {
+  static auto method = javaClassStatic()->getMethod<void()>("onDisconnect");
+  method(self());
+}
+
+JLocalConnection::JLocalConnection(
+    std::unique_ptr<jsinspector_modern::ILocalConnection> connection)
+    : connection_(std::move(connection)) {}
+
+void JLocalConnection::sendMessage(std::string message) {
+  connection_->sendMessage(std::move(message));
+}
+
+void JLocalConnection::disconnect() {
+  connection_->disconnect();
+}
+
+void JLocalConnection::registerNatives() {
+  javaClassStatic()->registerNatives({
+      makeNativeMethod("sendMessage", JLocalConnection::sendMessage),
+      makeNativeMethod("disconnect", JLocalConnection::disconnect),
+  });
+}
+
+jni::global_ref<JInspector::javaobject> JInspector::instance(
+    jni::alias_ref<jclass>) {
+  static auto instance = jni::make_global(
+      newObjectCxxArgs(&jsinspector_modern::getInspectorInstance()));
+  return instance;
+}
+
+jni::local_ref<jni::JArrayClass<JPage::javaobject>> JInspector::getPages() {
+  std::vector<jsinspector_modern::InspectorPageDescription> pages =
+      inspector_->getPages();
+  auto array = jni::JArrayClass<JPage::javaobject>::newArray(pages.size());
+  for (size_t i = 0; i < pages.size(); i++) {
+    (*array)[i] = JPage::create(pages[i].id, pages[i].title, pages[i].vm);
+  }
+  return array;
+}
+
+jni::local_ref<JLocalConnection::javaobject> JInspector::connect(
+    int pageId,
+    jni::alias_ref<JRemoteConnection::javaobject> remote) {
+  auto localConnection = inspector_->connect(
+      pageId, std::make_unique<RemoteConnection>(std::move(remote)));
+  return localConnection
+      ? JLocalConnection::newObjectCxxArgs(std::move(localConnection))
+      : nullptr;
+}
+
+void JInspector::registerNatives() {
+  JLocalConnection::registerNatives();
+  javaClassStatic()->registerNatives({
+      makeNativeMethod("instance", JInspector::instance),
+      makeNativeMethod("getPagesNative", JInspector::getPages),
+      makeNativeMethod("connectNative", JInspector::connect),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JInspector.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JInspector.h
new file mode 100644
index 0000000..897976e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JInspector.h
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <jsinspector-modern/InspectorInterfaces.h>
+
+#include <fbjni/fbjni.h>
+
+#include <memory>
+
+namespace facebook::react {
+
+class JPage : public jni::JavaClass<JPage> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/Inspector$Page;";
+
+  static jni::local_ref<JPage::javaobject>
+  create(int id, const std::string& title, const std::string& vm);
+};
+
+class JRemoteConnection : public jni::JavaClass<JRemoteConnection> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/Inspector$RemoteConnection;";
+
+  void onMessage(const std::string& message) const;
+  void onDisconnect() const;
+};
+
+class JLocalConnection : public jni::HybridClass<JLocalConnection> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/Inspector$LocalConnection;";
+
+  JLocalConnection(
+      std::unique_ptr<jsinspector_modern::ILocalConnection> connection);
+
+  void sendMessage(std::string message);
+  void disconnect();
+
+  static void registerNatives();
+
+ private:
+  std::unique_ptr<jsinspector_modern::ILocalConnection> connection_;
+};
+
+class JInspector : public jni::HybridClass<JInspector> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/Inspector;";
+
+  static jni::global_ref<JInspector::javaobject> instance(
+      jni::alias_ref<jclass>);
+
+  jni::local_ref<jni::JArrayClass<JPage::javaobject>> getPages();
+  jni::local_ref<JLocalConnection::javaobject> connect(
+      int pageId,
+      jni::alias_ref<JRemoteConnection::javaobject> remote);
+
+  static void registerNatives();
+
+ private:
+  friend HybridBase;
+
+  JInspector(jsinspector_modern::IInspector* inspector)
+      : inspector_(inspector) {}
+
+  jsinspector_modern::IInspector* inspector_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JMessageQueueThread.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JMessageQueueThread.cpp
new file mode 100644
index 0000000..e945c01
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JMessageQueueThread.cpp
@@ -0,0 +1,99 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JMessageQueueThread.h"
+
+#include <condition_variable>
+#include <mutex>
+
+#include <fbjni/NativeRunnable.h>
+#include <fbjni/fbjni.h>
+#include <jsi/jsi.h>
+
+namespace facebook::react {
+
+using namespace jni;
+
+namespace {
+
+std::function<void()> wrapRunnable(std::function<void()>&& runnable) {
+  return [runnable = std::move(runnable)]() mutable {
+    if (!runnable) {
+      // Runnable is empty, nothing to run.
+      return;
+    }
+
+    auto localRunnable = std::move(runnable);
+
+    // Clearing `runnable` to free all associated resources that stored lambda
+    // might retain.
+    runnable = nullptr;
+
+    try {
+      localRunnable();
+    } catch (const jsi::JSError& ex) {
+      // We can't do as much parsing here as we do in ExceptionManager.js
+      std::string message = ex.getMessage() + ", stack:\n" + ex.getStack();
+      throwNewJavaException(
+          "com/facebook/react/common/JavascriptException", message.c_str());
+    }
+  };
+}
+
+} // namespace
+
+JMessageQueueThread::JMessageQueueThread(
+    alias_ref<JavaMessageQueueThread::javaobject> jobj)
+    : m_jobj(make_global(jobj)) {}
+
+void JMessageQueueThread::runOnQueue(std::function<void()>&& runnable) {
+  // For C++ modules, this can be called from an arbitrary thread
+  // managed by the module, via callJSCallback or callJSFunction.  So,
+  // we ensure that it is registered with the JVM.
+  jni::ThreadScope guard;
+  static auto method =
+      JavaMessageQueueThread::javaClassStatic()
+          ->getMethod<jboolean(JRunnable::javaobject)>("runOnQueue");
+  auto jrunnable =
+      JNativeRunnable::newObjectCxxArgs(wrapRunnable(std::move(runnable)));
+  method(m_jobj, jrunnable.get());
+}
+
+void JMessageQueueThread::runOnQueueSync(std::function<void()>&& runnable) {
+  static auto jIsOnThread =
+      JavaMessageQueueThread::javaClassStatic()->getMethod<jboolean()>(
+          "isOnThread");
+
+  if (jIsOnThread(m_jobj)) {
+    wrapRunnable(std::move(runnable))();
+  } else {
+    std::mutex signalMutex;
+    std::condition_variable signalCv;
+    bool runnableComplete = false;
+
+    runOnQueue([&]() mutable {
+      std::scoped_lock lock(signalMutex);
+
+      runnable();
+      runnableComplete = true;
+
+      signalCv.notify_one();
+    });
+
+    std::unique_lock<std::mutex> lock(signalMutex);
+    signalCv.wait(lock, [&runnableComplete] { return runnableComplete; });
+  }
+}
+
+void JMessageQueueThread::quitSynchronous() {
+  static auto method =
+      JavaMessageQueueThread::javaClassStatic()->getMethod<void()>(
+          "quitSynchronous");
+  method(m_jobj);
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JMessageQueueThread.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JMessageQueueThread.h
new file mode 100644
index 0000000..716e58b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JMessageQueueThread.h
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <functional>
+
+#include <cxxreact/MessageQueueThread.h>
+#include <fbjni/fbjni.h>
+
+namespace facebook::react {
+
+class JavaMessageQueueThread : public jni::JavaClass<JavaMessageQueueThread> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/queue/MessageQueueThread;";
+};
+
+class JMessageQueueThread : public MessageQueueThread {
+ public:
+  JMessageQueueThread(jni::alias_ref<JavaMessageQueueThread::javaobject> jobj);
+
+  /**
+   * Enqueues the given function to run on this MessageQueueThread.
+   */
+  void runOnQueue(std::function<void()>&& runnable) override;
+
+  /**
+   * Synchronously executes the given function to run on this
+   * MessageQueueThread, waiting until it completes.  Can be called from any
+   * thread, but will block if not called on this MessageQueueThread.
+   */
+  void runOnQueueSync(std::function<void()>&& runnable) override;
+
+  /**
+   * Synchronously quits the current MessageQueueThread. Can be called from any
+   * thread, but will block if not called on this MessageQueueThread.
+   */
+  void quitSynchronous() override;
+
+ private:
+  jni::global_ref<JavaMessageQueueThread::javaobject> m_jobj;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactCxxErrorHandler.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactCxxErrorHandler.cpp
new file mode 100644
index 0000000..8aff63d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactCxxErrorHandler.cpp
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JReactCxxErrorHandler.h"
+
+using namespace facebook::react;
+
+void JReactCxxErrorHandler::handleError(std::string message) {
+  static const auto handleError =
+      javaClassStatic()->getStaticMethod<void(std::string message)>(
+          "handleError");
+
+  return handleError(javaClassStatic(), message);
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactCxxErrorHandler.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactCxxErrorHandler.h
new file mode 100644
index 0000000..e54dbde
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactCxxErrorHandler.h
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <string>
+
+namespace facebook::react {
+
+class JReactCxxErrorHandler : public jni::JavaClass<JReactCxxErrorHandler> {
+ public:
+  static constexpr const char* kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ReactCxxErrorHandler;";
+
+  static void handleError(std::string message);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactMarker.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactMarker.cpp
new file mode 100644
index 0000000..131237c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactMarker.cpp
@@ -0,0 +1,171 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JReactMarker.h"
+#include <cxxreact/ReactMarker.h>
+#include <fbjni/fbjni.h>
+#include <glog/logging.h>
+#include <mutex>
+
+namespace facebook::react {
+
+void JReactMarker::setLogPerfMarkerIfNeeded() {
+  static std::once_flag flag{};
+  std::call_once(flag, []() {
+    ReactMarker::logTaggedMarkerImpl = JReactMarker::logPerfMarker;
+    ReactMarker::logTaggedMarkerBridgelessImpl =
+        JReactMarker::logPerfMarkerBridgeless;
+  });
+}
+
+void JReactMarker::logMarker(const std::string& marker) {
+  static auto cls = javaClassStatic();
+  static auto meth = cls->getStaticMethod<void(std::string)>("logMarker");
+  meth(cls, marker);
+}
+
+void JReactMarker::logMarker(
+    const std::string& marker,
+    const std::string& tag) {
+  static auto cls = javaClassStatic();
+  static auto meth =
+      cls->getStaticMethod<void(std::string, std::string)>("logMarker");
+  meth(cls, marker, tag);
+}
+
+void JReactMarker::logMarker(
+    const std::string& marker,
+    const std::string& tag,
+    const int instanceKey) {
+  static auto cls = javaClassStatic();
+  static auto meth =
+      cls->getStaticMethod<void(std::string, std::string, int)>("logMarker");
+  meth(cls, marker, tag, instanceKey);
+}
+
+void JReactMarker::logPerfMarker(
+    const ReactMarker::ReactMarkerId markerId,
+    const char* tag) {
+  const int bridgeInstanceKey = 0;
+  logPerfMarkerWithInstanceKey(markerId, tag, bridgeInstanceKey);
+}
+
+void JReactMarker::logPerfMarkerBridgeless(
+    const ReactMarker::ReactMarkerId markerId,
+    const char* tag) {
+  const int bridgelessInstanceKey = 1;
+  logPerfMarkerWithInstanceKey(markerId, tag, bridgelessInstanceKey);
+}
+
+void JReactMarker::logPerfMarkerWithInstanceKey(
+    const ReactMarker::ReactMarkerId markerId,
+    const char* tag,
+    const int instanceKey) {
+  switch (markerId) {
+    case ReactMarker::APP_STARTUP_START:
+      JReactMarker::logMarker("APP_STARTUP_START");
+      break;
+    case ReactMarker::APP_STARTUP_STOP:
+      JReactMarker::logMarker("APP_STARTUP_END");
+      break;
+    case ReactMarker::INIT_REACT_RUNTIME_START:
+      JReactMarker::logMarker("INIT_REACT_RUNTIME_START");
+      break;
+    case ReactMarker::INIT_REACT_RUNTIME_STOP:
+      JReactMarker::logMarker("INIT_REACT_RUNTIME_END");
+      break;
+    case ReactMarker::RUN_JS_BUNDLE_START:
+      JReactMarker::logMarker("RUN_JS_BUNDLE_START", tag, instanceKey);
+      break;
+    case ReactMarker::RUN_JS_BUNDLE_STOP:
+      JReactMarker::logMarker("RUN_JS_BUNDLE_END", tag, instanceKey);
+      break;
+    case ReactMarker::CREATE_REACT_CONTEXT_STOP:
+      JReactMarker::logMarker("CREATE_REACT_CONTEXT_END");
+      break;
+    case ReactMarker::JS_BUNDLE_STRING_CONVERT_START:
+      JReactMarker::logMarker("loadApplicationScript_startStringConvert");
+      break;
+    case ReactMarker::JS_BUNDLE_STRING_CONVERT_STOP:
+      JReactMarker::logMarker("loadApplicationScript_endStringConvert");
+      break;
+    case ReactMarker::NATIVE_MODULE_SETUP_START:
+      JReactMarker::logMarker("NATIVE_MODULE_SETUP_START", tag, instanceKey);
+      break;
+    case ReactMarker::NATIVE_MODULE_SETUP_STOP:
+      JReactMarker::logMarker("NATIVE_MODULE_SETUP_END", tag, instanceKey);
+      break;
+    case ReactMarker::REGISTER_JS_SEGMENT_START:
+      JReactMarker::logMarker("REGISTER_JS_SEGMENT_START", tag, instanceKey);
+      break;
+    case ReactMarker::REGISTER_JS_SEGMENT_STOP:
+      JReactMarker::logMarker("REGISTER_JS_SEGMENT_STOP", tag, instanceKey);
+      break;
+    case ReactMarker::NATIVE_REQUIRE_START:
+    case ReactMarker::NATIVE_REQUIRE_STOP:
+    case ReactMarker::REACT_INSTANCE_INIT_START:
+    case ReactMarker::REACT_INSTANCE_INIT_STOP:
+      // These are not used on Android.
+      break;
+  }
+}
+
+void JReactMarker::nativeLogMarker(
+    jni::alias_ref<jclass> /* unused */,
+    std::string markerNameStr,
+    jlong markerTime) {
+  // TODO: refactor this to a bidirectional map along with
+  // logPerfMarkerWithInstanceKey
+  if (markerNameStr == "APP_STARTUP_START") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::APP_STARTUP_START, (double)markerTime);
+  } else if (markerNameStr == "APP_STARTUP_END") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::APP_STARTUP_STOP, (double)markerTime);
+  } else if (markerNameStr == "INIT_REACT_RUNTIME_START") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::INIT_REACT_RUNTIME_START, (double)markerTime);
+  } else if (markerNameStr == "INIT_REACT_RUNTIME_END") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::INIT_REACT_RUNTIME_STOP, (double)markerTime);
+  } else if (markerNameStr == "RUN_JS_BUNDLE_START") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::RUN_JS_BUNDLE_START, (double)markerTime);
+  } else if (markerNameStr == "RUN_JS_BUNDLE_END") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::RUN_JS_BUNDLE_STOP, (double)markerTime);
+  } else if (markerNameStr == "CREATE_REACT_CONTEXT_END") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::CREATE_REACT_CONTEXT_STOP, (double)markerTime);
+  } else if (markerNameStr == "loadApplicationScript_startStringConvert") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::JS_BUNDLE_STRING_CONVERT_START, (double)markerTime);
+  } else if (markerNameStr == "loadApplicationScript_endStringConvert") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::JS_BUNDLE_STRING_CONVERT_STOP, (double)markerTime);
+  } else if (markerNameStr == "NATIVE_MODULE_SETUP_START") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::NATIVE_MODULE_SETUP_START, (double)markerTime);
+  } else if (markerNameStr == "NATIVE_MODULE_SETUP_END") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::NATIVE_MODULE_SETUP_STOP, (double)markerTime);
+  } else if (markerNameStr == "REGISTER_JS_SEGMENT_START") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::REGISTER_JS_SEGMENT_START, (double)markerTime);
+  } else if (markerNameStr == "REGISTER_JS_SEGMENT_STOP") {
+    ReactMarker::logMarkerDone(
+        ReactMarker::REGISTER_JS_SEGMENT_STOP, (double)markerTime);
+  }
+}
+
+void JReactMarker::registerNatives() {
+  javaClassLocal()->registerNatives({
+      makeNativeMethod("nativeLogMarker", JReactMarker::nativeLogMarker),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactMarker.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactMarker.h
new file mode 100644
index 0000000..5094b01
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactMarker.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <string>
+
+#include <cxxreact/ReactMarker.h>
+
+namespace facebook::react {
+
+class JReactMarker : public facebook::jni::JavaClass<JReactMarker> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ReactMarker;";
+  static void registerNatives();
+  static void setLogPerfMarkerIfNeeded();
+
+ private:
+  static void logMarker(const std::string& marker);
+  static void logMarker(const std::string& marker, const std::string& tag);
+  static void logMarker(
+      const std::string& marker,
+      const std::string& tag,
+      const int instanceKey);
+  static void logPerfMarker(
+      const ReactMarker::ReactMarkerId markerId,
+      const char* tag);
+  static void logPerfMarkerBridgeless(
+      const ReactMarker::ReactMarkerId markerId,
+      const char* tag);
+  static void logPerfMarkerWithInstanceKey(
+      const ReactMarker::ReactMarkerId markerId,
+      const char* tag,
+      const int instanceKey);
+  static void nativeLogMarker(
+      jni::alias_ref<jclass> /* unused */,
+      std::string markerNameStr,
+      jlong markerTime);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactSoftExceptionLogger.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactSoftExceptionLogger.cpp
new file mode 100644
index 0000000..7f1cf1d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactSoftExceptionLogger.cpp
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JReactSoftExceptionLogger.h"
+
+using namespace facebook::react;
+
+void JReactSoftExceptionLogger::logNoThrowSoftExceptionWithMessage(
+    std::string tag,
+    std::string message) {
+  static const auto logNoThrowSoftExceptionWithMessage =
+      javaClassStatic()
+          ->getStaticMethod<void(std::string tag, std::string message)>(
+              "logNoThrowSoftExceptionWithMessage");
+
+  return logNoThrowSoftExceptionWithMessage(javaClassStatic(), tag, message);
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactSoftExceptionLogger.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactSoftExceptionLogger.h
new file mode 100644
index 0000000..c8ea6e1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JReactSoftExceptionLogger.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <string>
+
+namespace facebook::react {
+
+class JReactSoftExceptionLogger
+    : public jni::JavaClass<JReactSoftExceptionLogger> {
+ public:
+  static constexpr const char* kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ReactSoftExceptionLogger;";
+
+  static void logNoThrowSoftExceptionWithMessage(
+      std::string tag,
+      std::string message);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeExecutor.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeExecutor.cpp
new file mode 100644
index 0000000..433e6ed
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeExecutor.cpp
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JRuntimeExecutor.h"
+
+namespace facebook::react {
+
+JRuntimeExecutor::JRuntimeExecutor(RuntimeExecutor runtimeExecutor)
+    : runtimeExecutor_(runtimeExecutor) {}
+
+RuntimeExecutor JRuntimeExecutor::get() {
+  return runtimeExecutor_;
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeExecutor.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeExecutor.h
new file mode 100644
index 0000000..b614ad1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeExecutor.h
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <ReactCommon/RuntimeExecutor.h>
+#include <fbjni/fbjni.h>
+
+namespace facebook::react {
+
+class JRuntimeExecutor : public jni::HybridClass<JRuntimeExecutor> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/RuntimeExecutor;";
+
+  RuntimeExecutor get();
+
+ private:
+  friend HybridBase;
+  JRuntimeExecutor(RuntimeExecutor runtimeExecutor);
+  RuntimeExecutor runtimeExecutor_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeScheduler.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeScheduler.cpp
new file mode 100644
index 0000000..587c324
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeScheduler.cpp
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JRuntimeScheduler.h"
+
+namespace facebook::react {
+
+JRuntimeScheduler::JRuntimeScheduler(
+    std::weak_ptr<RuntimeScheduler> runtimeScheduler)
+    : runtimeScheduler_(runtimeScheduler) {}
+
+std::weak_ptr<RuntimeScheduler> JRuntimeScheduler::get() {
+  return runtimeScheduler_;
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeScheduler.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeScheduler.h
new file mode 100644
index 0000000..6220cce
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JRuntimeScheduler.h
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/renderer/runtimescheduler/RuntimeScheduler.h>
+
+namespace facebook::react {
+
+class JRuntimeScheduler : public jni::HybridClass<JRuntimeScheduler> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/RuntimeScheduler;";
+
+  std::weak_ptr<RuntimeScheduler> get();
+
+ private:
+  friend HybridBase;
+  JRuntimeScheduler(std::weak_ptr<RuntimeScheduler> runtimeScheduler);
+  std::weak_ptr<RuntimeScheduler> runtimeScheduler_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLoader.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLoader.cpp
new file mode 100644
index 0000000..03921b5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLoader.cpp
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JSLoader.h"
+
+#include <android/asset_manager_jni.h>
+#include <cxxreact/JSBigString.h>
+#include <cxxreact/JSBundleType.h>
+#include <fbjni/fbjni.h>
+#include <folly/Conv.h>
+
+#ifdef WITH_FBSYSTRACE
+#include <fbsystrace.h>
+using fbsystrace::FbSystraceSection;
+#endif
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+class AssetManagerString : public JSBigString {
+ public:
+  AssetManagerString(AAsset* asset) : asset_(asset){};
+
+  virtual ~AssetManagerString() {
+    AAsset_close(asset_);
+  }
+
+  bool isAscii() const override {
+    return false;
+  }
+
+  const char* c_str() const override {
+    return (const char*)AAsset_getBuffer(asset_);
+  }
+
+  // Length of the c_str without the NULL byte.
+  size_t size() const override {
+    return AAsset_getLength(asset_);
+  }
+
+ private:
+  AAsset* asset_;
+};
+
+__attribute__((visibility("default"))) AAssetManager* extractAssetManager(
+    alias_ref<JAssetManager::javaobject> assetManager) {
+  auto env = Environment::current();
+  return AAssetManager_fromJava(env, assetManager.get());
+}
+
+__attribute__((visibility("default"))) std::unique_ptr<const JSBigString>
+loadScriptFromAssets(AAssetManager* manager, const std::string& assetName) {
+#ifdef WITH_FBSYSTRACE
+  FbSystraceSection s(
+      TRACE_TAG_REACT_CXX_BRIDGE,
+      "reactbridge_jni_loadScriptFromAssets",
+      "assetName",
+      assetName);
+#endif
+  if (manager) {
+    auto asset = AAssetManager_open(
+        manager,
+        assetName.c_str(),
+        AASSET_MODE_STREAMING); // Optimized for sequential read: see
+                                // AssetManager.java for docs
+    if (asset) {
+      auto script = std::make_unique<AssetManagerString>(asset);
+      if (script->size() >= sizeof(BundleHeader)) {
+        // When using bytecode, it's safe for the underlying buffer to not be \0
+        // terminated. In all other scenarios, we will force a copy of the
+        // script to ensure we have a terminator.
+        const BundleHeader* header =
+            reinterpret_cast<const BundleHeader*>(script->c_str());
+        if (isHermesBytecodeBundle(*header)) {
+          return script;
+        }
+      }
+
+      auto buf = std::make_unique<JSBigBufferString>(script->size());
+      memcpy(buf->data(), script->c_str(), script->size());
+      return buf;
+    }
+  }
+
+  throw std::runtime_error(folly::to<std::string>(
+      "Unable to load script. Make sure you're "
+      "either running Metro (run 'npx react-native start') or that your bundle '",
+      assetName,
+      "' is packaged correctly for release."));
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLoader.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLoader.h
new file mode 100644
index 0000000..1d18db4
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLoader.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <string>
+
+#include <android/asset_manager.h>
+#include <cxxreact/JSExecutor.h>
+#include <fbjni/fbjni.h>
+
+namespace facebook::react {
+
+struct JAssetManager : jni::JavaClass<JAssetManager> {
+  static constexpr auto kJavaDescriptor = "Landroid/content/res/AssetManager;";
+};
+
+/**
+ * Helper method for loading JS script from android asset
+ */
+AAssetManager* extractAssetManager(
+    jni::alias_ref<JAssetManager::javaobject> assetManager);
+
+std::unique_ptr<const JSBigString> loadScriptFromAssets(
+    AAssetManager* assetManager,
+    const std::string& assetName);
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLogging.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLogging.cpp
new file mode 100644
index 0000000..243b41f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLogging.cpp
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JSLogging.h"
+
+#include <fb/log.h>
+
+namespace facebook::react {
+
+void reactAndroidLoggingHook(
+    const std::string& message,
+    android_LogPriority logLevel) {
+  FBLOG_PRI(logLevel, "ReactNativeJS", "%s", message.c_str());
+}
+
+void reactAndroidLoggingHook(
+    const std::string& message,
+    unsigned int logLevel) {
+  reactAndroidLoggingHook(
+      message, static_cast<android_LogPriority>(logLevel + ANDROID_LOG_DEBUG));
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLogging.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLogging.h
new file mode 100644
index 0000000..d236f24
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JSLogging.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <android/log.h>
+#include <string>
+
+namespace facebook::react {
+
+void reactAndroidLoggingHook(
+    const std::string& message,
+    android_LogPriority logLevel);
+void reactAndroidLoggingHook(const std::string& message, unsigned int logLevel);
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JavaModuleWrapper.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JavaModuleWrapper.cpp
new file mode 100644
index 0000000..1f4b7c1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JavaModuleWrapper.cpp
@@ -0,0 +1,161 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JavaModuleWrapper.h"
+
+#include <glog/logging.h>
+
+#include <cxxreact/CxxModule.h>
+#include <cxxreact/CxxNativeModule.h>
+#include <cxxreact/Instance.h>
+#include <cxxreact/JsArgumentHelpers.h>
+#include <cxxreact/NativeModule.h>
+#include <fbjni/fbjni.h>
+#include <folly/json.h>
+
+#ifdef WITH_FBSYSTRACE
+#include <fbsystrace.h>
+#endif
+
+#include "CatalystInstanceImpl.h"
+#include "ReadableNativeArray.h"
+
+using facebook::xplat::module::CxxModule;
+
+namespace facebook::react {
+
+std::string JMethodDescriptor::getSignature() const {
+  static auto signature = javaClassStatic()->getField<jstring>("signature");
+  return getFieldValue(signature)->toStdString();
+}
+
+std::string JMethodDescriptor::getName() const {
+  static auto name = javaClassStatic()->getField<jstring>("name");
+  return getFieldValue(name)->toStdString();
+}
+
+std::string JMethodDescriptor::getType() const {
+  static auto type = javaClassStatic()->getField<jstring>("type");
+  return getFieldValue(type)->toStdString();
+}
+
+std::string JavaNativeModule::getName() {
+  static auto getNameMethod =
+      wrapper_->getClass()->getMethod<jstring()>("getName");
+  return getNameMethod(wrapper_)->toStdString();
+}
+
+std::string JavaNativeModule::getSyncMethodName(unsigned int reactMethodId) {
+  if (reactMethodId >= syncMethods_.size()) {
+    throw std::invalid_argument(folly::to<std::string>(
+        "methodId ",
+        reactMethodId,
+        " out of range [0..",
+        syncMethods_.size(),
+        "]"));
+  }
+
+  auto& methodInvoker = syncMethods_[reactMethodId];
+
+  if (!methodInvoker.has_value()) {
+    throw std::invalid_argument(folly::to<std::string>(
+        "methodId ", reactMethodId, " is not a recognized sync method"));
+  }
+
+  return methodInvoker->getMethodName();
+}
+
+std::vector<MethodDescriptor> JavaNativeModule::getMethods() {
+  std::vector<MethodDescriptor> ret;
+  syncMethods_.clear();
+  auto descs = wrapper_->getMethodDescriptors();
+  for (const auto& desc : *descs) {
+    auto methodName = desc->getName();
+    auto methodType = desc->getType();
+
+    if (methodType == "sync") {
+      // allow for the sync methods vector to have empty values, resize on
+      // demand
+      size_t methodIndex = ret.size();
+      if (methodIndex >= syncMethods_.size()) {
+        syncMethods_.resize(methodIndex + 1);
+      }
+      syncMethods_.insert(
+          syncMethods_.begin() + methodIndex,
+          MethodInvoker(
+              desc->getMethod(),
+              methodName,
+              desc->getSignature(),
+              getName() + "." + methodName,
+              true));
+    }
+
+    ret.emplace_back(std::move(methodName), std::move(methodType));
+  }
+  return ret;
+}
+
+folly::dynamic JavaNativeModule::getConstants() {
+  static auto constantsMethod =
+      wrapper_->getClass()->getMethod<NativeMap::javaobject()>("getConstants");
+  auto constants = constantsMethod(wrapper_);
+  if (!constants) {
+    return nullptr;
+  } else {
+    return cthis(constants)->consume();
+  }
+}
+
+void JavaNativeModule::invoke(
+    unsigned int reactMethodId,
+    folly::dynamic&& params,
+    int callId) {
+  messageQueueThread_->runOnQueue(
+      [this, reactMethodId, params = std::move(params), callId] {
+        static auto invokeMethod =
+            wrapper_->getClass()
+                ->getMethod<void(jint, ReadableNativeArray::javaobject)>(
+                    "invoke");
+#ifdef WITH_FBSYSTRACE
+        if (callId != -1) {
+          fbsystrace_end_async_flow(TRACE_TAG_REACT_APPS, "native", callId);
+        }
+#endif
+        invokeMethod(
+            wrapper_,
+            static_cast<jint>(reactMethodId),
+            ReadableNativeArray::newObjectCxxArgs(std::move(params)).get());
+      });
+}
+
+MethodCallResult JavaNativeModule::callSerializableNativeHook(
+    unsigned int reactMethodId,
+    folly::dynamic&& params) {
+  // TODO: evaluate whether calling through invoke is potentially faster
+  if (reactMethodId >= syncMethods_.size()) {
+    throw std::invalid_argument(folly::to<std::string>(
+        "methodId ",
+        reactMethodId,
+        " out of range [0..",
+        syncMethods_.size(),
+        "]"));
+  }
+
+  auto& method = syncMethods_[reactMethodId];
+  CHECK(method.has_value() && method->isSyncHook())
+      << "Trying to invoke a asynchronous method as synchronous hook";
+  return method->invoke(instance_, wrapper_->getModule(), params);
+}
+
+jni::local_ref<JReflectMethod::javaobject> JMethodDescriptor::getMethod()
+    const {
+  static auto method =
+      javaClassStatic()->getField<JReflectMethod::javaobject>("method");
+  return getFieldValue(method);
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JavaModuleWrapper.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JavaModuleWrapper.h
new file mode 100644
index 0000000..1e3929a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JavaModuleWrapper.h
@@ -0,0 +1,87 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <cxxreact/NativeModule.h>
+#include <fbjni/fbjni.h>
+#include <optional>
+
+#include "MethodInvoker.h"
+
+namespace facebook::react {
+
+class Instance;
+class MessageQueueThread;
+
+struct JMethodDescriptor : public jni::JavaClass<JMethodDescriptor> {
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/JavaModuleWrapper$MethodDescriptor;";
+
+  jni::local_ref<JReflectMethod::javaobject> getMethod() const;
+  std::string getSignature() const;
+  std::string getName() const;
+  std::string getType() const;
+};
+
+struct JavaModuleWrapper : jni::JavaClass<JavaModuleWrapper> {
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/JavaModuleWrapper;";
+
+  jni::local_ref<JBaseJavaModule::javaobject> getModule() {
+    // This is the call which causes a lazy Java module to actually be
+    // created.
+    static auto getModule =
+        javaClassStatic()->getMethod<JBaseJavaModule::javaobject()>(
+            "getModule");
+    return getModule(self());
+  }
+
+  std::string getName() const {
+    static auto getName = javaClassStatic()->getMethod<jstring()>("getName");
+    return getName(self())->toStdString();
+  }
+
+  jni::local_ref<jni::JList<JMethodDescriptor::javaobject>::javaobject>
+  getMethodDescriptors() {
+    static auto getMethods =
+        getClass()
+            ->getMethod<
+                jni::JList<JMethodDescriptor::javaobject>::javaobject()>(
+                "getMethodDescriptors");
+    return getMethods(self());
+  }
+};
+
+class JavaNativeModule : public NativeModule {
+ public:
+  JavaNativeModule(
+      std::weak_ptr<Instance> instance,
+      jni::alias_ref<JavaModuleWrapper::javaobject> wrapper,
+      std::shared_ptr<MessageQueueThread> messageQueueThread)
+      : instance_(std::move(instance)),
+        wrapper_(make_global(wrapper)),
+        messageQueueThread_(std::move(messageQueueThread)) {}
+
+  std::string getName() override;
+  std::string getSyncMethodName(unsigned int reactMethodId) override;
+  folly::dynamic getConstants() override;
+  std::vector<MethodDescriptor> getMethods() override;
+  void invoke(unsigned int reactMethodId, folly::dynamic&& params, int callId)
+      override;
+  MethodCallResult callSerializableNativeHook(
+      unsigned int reactMethodId,
+      folly::dynamic&& params) override;
+
+ private:
+  std::weak_ptr<Instance> instance_;
+  jni::global_ref<JavaModuleWrapper::javaobject> wrapper_;
+  std::shared_ptr<MessageQueueThread> messageQueueThread_;
+  std::vector<std::optional<MethodInvoker>> syncMethods_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JavaScriptExecutorHolder.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JavaScriptExecutorHolder.h
new file mode 100644
index 0000000..55cbc3e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JavaScriptExecutorHolder.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <memory>
+
+#include <cxxreact/JSExecutor.h>
+#include <fbjni/fbjni.h>
+
+namespace facebook::react {
+
+class JavaScriptExecutorHolder
+    : public jni::HybridClass<JavaScriptExecutorHolder> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/JavaScriptExecutor;";
+
+  std::shared_ptr<JSExecutorFactory> getExecutorFactory() {
+    return mExecutorFactory;
+  }
+
+ protected:
+  JavaScriptExecutorHolder(std::shared_ptr<JSExecutorFactory> factory)
+      : mExecutorFactory(factory) {}
+
+ private:
+  std::shared_ptr<JSExecutorFactory> mExecutorFactory;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JniJSModulesUnbundle.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JniJSModulesUnbundle.cpp
new file mode 100644
index 0000000..f192010
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JniJSModulesUnbundle.cpp
@@ -0,0 +1,96 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JniJSModulesUnbundle.h"
+
+#include <fb/assert.h>
+#include <libgen.h>
+#include <sys/endian.h>
+#include <cstdint>
+#include <memory>
+#include <sstream>
+#include <utility>
+
+using magic_number_t = uint32_t;
+const magic_number_t MAGIC_FILE_HEADER = 0xFB0BD1E5;
+const char* MAGIC_FILE_NAME = "UNBUNDLE";
+
+namespace facebook::react {
+
+using asset_ptr =
+    std::unique_ptr<AAsset, std::function<decltype(AAsset_close)>>;
+
+static std::string jsModulesDir(const std::string& entryFile) {
+  std::string dir = dirname(entryFile.c_str());
+
+  // android's asset manager does not work with paths that start with a dot
+  return dir == "." ? "js-modules/" : dir + "/js-modules/";
+}
+
+static asset_ptr openAsset(
+    AAssetManager* manager,
+    const std::string& fileName,
+    int mode = AASSET_MODE_STREAMING) {
+  return asset_ptr(
+      AAssetManager_open(manager, fileName.c_str(), mode), AAsset_close);
+}
+
+std::unique_ptr<JniJSModulesUnbundle> JniJSModulesUnbundle::fromEntryFile(
+    AAssetManager* assetManager,
+    const std::string& entryFile) {
+  return std::make_unique<JniJSModulesUnbundle>(
+      assetManager, jsModulesDir(entryFile));
+}
+
+JniJSModulesUnbundle::JniJSModulesUnbundle(
+    AAssetManager* assetManager,
+    const std::string& moduleDirectory)
+    : m_assetManager(assetManager), m_moduleDirectory(moduleDirectory) {}
+
+bool JniJSModulesUnbundle::isUnbundle(
+    AAssetManager* assetManager,
+    const std::string& assetName) {
+  if (!assetManager) {
+    return false;
+  }
+
+  auto magicFileName = jsModulesDir(assetName) + MAGIC_FILE_NAME;
+  auto asset = openAsset(assetManager, magicFileName.c_str());
+  if (asset == nullptr) {
+    return false;
+  }
+
+  magic_number_t fileHeader = 0;
+  AAsset_read(asset.get(), &fileHeader, sizeof(fileHeader));
+  return fileHeader == htole32(MAGIC_FILE_HEADER);
+}
+
+JSModulesUnbundle::Module JniJSModulesUnbundle::getModule(
+    uint32_t moduleId) const {
+  // can be nullptr for default constructor.
+  FBASSERTMSGF(
+      m_assetManager != nullptr,
+      "Unbundle has not been initialized with an asset manager");
+
+  std::ostringstream sourceUrlBuilder;
+  sourceUrlBuilder << moduleId << ".js";
+  auto sourceUrl = sourceUrlBuilder.str();
+
+  auto fileName = m_moduleDirectory + sourceUrl;
+  auto asset = openAsset(m_assetManager, fileName, AASSET_MODE_BUFFER);
+
+  const char* buffer = nullptr;
+  if (asset != nullptr) {
+    buffer = static_cast<const char*>(AAsset_getBuffer(asset.get()));
+  }
+  if (buffer == nullptr) {
+    throw ModuleNotFound(moduleId);
+  }
+  return {sourceUrl, std::string(buffer, AAsset_getLength(asset.get()))};
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JniJSModulesUnbundle.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JniJSModulesUnbundle.h
new file mode 100644
index 0000000..51578df
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/JniJSModulesUnbundle.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <memory>
+
+#include <android/asset_manager.h>
+#include <cxxreact/JSModulesUnbundle.h>
+
+namespace facebook::react {
+
+class JniJSModulesUnbundle : public JSModulesUnbundle {
+  /**
+   * This implementation reads modules as single file from the assets of an apk.
+   */
+ public:
+  JniJSModulesUnbundle() = default;
+  JniJSModulesUnbundle(
+      AAssetManager* assetManager,
+      const std::string& moduleDirectory);
+  JniJSModulesUnbundle(JniJSModulesUnbundle&& other) = delete;
+  JniJSModulesUnbundle& operator=(JSModulesUnbundle&& other) = delete;
+
+  static std::unique_ptr<JniJSModulesUnbundle> fromEntryFile(
+      AAssetManager* assetManager,
+      const std::string& entryFile);
+
+  static bool isUnbundle(
+      AAssetManager* assetManager,
+      const std::string& assetName);
+  virtual Module getModule(uint32_t moduleId) const override;
+
+ private:
+  AAssetManager* m_assetManager = nullptr;
+  std::string m_moduleDirectory;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/MethodInvoker.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/MethodInvoker.cpp
new file mode 100644
index 0000000..8c0e3ba
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/MethodInvoker.cpp
@@ -0,0 +1,314 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "MethodInvoker.h"
+
+#ifdef WITH_FBSYSTRACE
+#include <fbsystrace.h>
+#endif
+
+#include <glog/logging.h>
+
+#include <cxxreact/CxxNativeModule.h>
+#include <fbjni/fbjni.h>
+
+#include "JCallback.h"
+#include "ReadableNativeArray.h"
+#include "ReadableNativeMap.h"
+#include "WritableNativeArray.h"
+#include "WritableNativeMap.h"
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+namespace {
+
+using dynamic_iterator = folly::dynamic::const_iterator;
+
+struct JPromiseImpl : public JavaClass<JPromiseImpl> {
+  constexpr static auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/PromiseImpl;";
+
+  static local_ref<javaobject> create(
+      local_ref<JCallback::javaobject> resolve,
+      local_ref<JCallback::javaobject> reject) {
+    return newInstance(resolve, reject);
+  }
+};
+
+// HACK: Exposes constructor
+struct ExposedReadableNativeArray : public ReadableNativeArray {
+  explicit ExposedReadableNativeArray(folly::dynamic array)
+      : ReadableNativeArray(std::move(array)) {}
+};
+
+jdouble extractDouble(const folly::dynamic& value) {
+  if (value.isInt()) {
+    return static_cast<jdouble>(value.getInt());
+  } else {
+    return static_cast<jdouble>(value.getDouble());
+  }
+}
+
+jint extractInteger(const folly::dynamic& value) {
+  // The logic here is taken from convertDynamicIfIntegral, but the
+  // return type and exception are different.
+  if (value.isInt()) {
+    // TODO: this truncates 64 bit ints, valid in JS
+    return static_cast<jint>(value.getInt());
+  }
+  double dbl = value.getDouble();
+  jint result = static_cast<jint>(dbl);
+  if (dbl != result) {
+    throw std::invalid_argument(folly::to<std::string>(
+        "Tried to convert jint argument, but got a non-integral double: ",
+        dbl));
+  }
+  return result;
+}
+
+local_ref<JCxxCallbackImpl::jhybridobject> extractCallback(
+    std::weak_ptr<Instance>& instance,
+    const folly::dynamic& value) {
+  if (value.isNull()) {
+    return local_ref<JCxxCallbackImpl::jhybridobject>(nullptr);
+  } else {
+    return JCxxCallbackImpl::newObjectCxxArgs(makeCallback(instance, value));
+  }
+}
+
+local_ref<JPromiseImpl::javaobject> extractPromise(
+    std::weak_ptr<Instance>& instance,
+    dynamic_iterator& it,
+    dynamic_iterator& end) {
+  auto resolve = extractCallback(instance, *it++);
+  CHECK(it != end);
+  auto reject = extractCallback(instance, *it++);
+  return JPromiseImpl::create(resolve, reject);
+}
+
+bool isNullable(char type) {
+  switch (type) {
+    case 'Z':
+    case 'I':
+    case 'F':
+    case 'S':
+    case 'A':
+    case 'M':
+    case 'X':
+      return true;
+    default:
+      return false;
+      ;
+  }
+}
+
+jvalue extract(
+    std::weak_ptr<Instance>& instance,
+    char type,
+    dynamic_iterator& it,
+    dynamic_iterator& end) {
+  CHECK(it != end);
+  jvalue value;
+  if (type == 'P') {
+    value.l = extractPromise(instance, it, end).release();
+    return value;
+  }
+
+  const auto& arg = *it++;
+  if (isNullable(type) && arg.isNull()) {
+    value.l = nullptr;
+    return value;
+  }
+
+  switch (type) {
+    case 'z':
+      value.z = static_cast<jboolean>(arg.getBool());
+      break;
+    case 'Z':
+      value.l =
+          JBoolean::valueOf(static_cast<jboolean>(arg.getBool())).release();
+      break;
+    case 'i':
+      value.i = extractInteger(arg);
+      break;
+    case 'I':
+      value.l = JInteger::valueOf(extractInteger(arg)).release();
+      break;
+    case 'f':
+      value.f = static_cast<jfloat>(extractDouble(arg));
+      break;
+    case 'F':
+      value.l =
+          JFloat::valueOf(static_cast<jfloat>(extractDouble(arg))).release();
+      break;
+    case 'd':
+      value.d = extractDouble(arg);
+      break;
+    case 'D':
+      value.l = JDouble::valueOf(extractDouble(arg)).release();
+      break;
+    case 'S':
+      value.l = make_jstring(arg.getString().c_str()).release();
+      break;
+    case 'A':
+      value.l = ReadableNativeArray::newObjectCxxArgs(arg).release();
+      break;
+    case 'M':
+      value.l = ReadableNativeMap::newObjectCxxArgs(arg).release();
+      break;
+    case 'X':
+      value.l = extractCallback(instance, arg).release();
+      break;
+    default:
+      LOG(FATAL) << "Unknown param type: " << type;
+  }
+  return value;
+}
+
+std::size_t countJsArgs(const std::string& signature) {
+  std::size_t count = 0;
+  for (char c : signature) {
+    switch (c) {
+      case 'P':
+        count += 2;
+        break;
+      default:
+        count += 1;
+        break;
+    }
+  }
+  return count;
+}
+
+} // namespace
+
+MethodInvoker::MethodInvoker(
+    alias_ref<JReflectMethod::javaobject> method,
+    std::string methodName,
+    std::string signature,
+    std::string traceName,
+    bool isSync)
+    : method_(method->getMethodID()),
+      methodName_(methodName),
+      signature_(signature),
+      jsArgCount_(countJsArgs(signature) - 2),
+      traceName_(std::move(traceName)),
+      isSync_(isSync) {
+  CHECK(signature_.at(1) == '.') << "Improper module method signature";
+  CHECK(isSync_ || signature_.at(0) == 'v')
+      << "Non-sync hooks cannot have a non-void return type";
+}
+
+std::string MethodInvoker::getMethodName() const {
+  return methodName_;
+}
+
+MethodCallResult MethodInvoker::invoke(
+    std::weak_ptr<Instance>& instance,
+    alias_ref<JBaseJavaModule::javaobject> module,
+    const folly::dynamic& params) {
+#ifdef WITH_FBSYSTRACE
+  fbsystrace::FbSystraceSection s(
+      TRACE_TAG_REACT_CXX_BRIDGE,
+      isSync_ ? "callJavaSyncHook" : "callJavaModuleMethod",
+      "method",
+      traceName_);
+#endif
+
+  if (params.size() != jsArgCount_) {
+    throw std::invalid_argument(folly::to<std::string>(
+        "expected ", jsArgCount_, " arguments, got ", params.size()));
+  }
+
+  auto env = Environment::current();
+  auto argCount = signature_.size() - 2;
+  JniLocalScope scope(env, static_cast<int>(argCount));
+  jvalue args[argCount];
+  std::transform(
+      signature_.begin() + 2,
+      signature_.end(),
+      args,
+      [&instance, it = params.begin(), end = params.end()](char type) mutable {
+        return extract(instance, type, it, end);
+      });
+
+#define PRIMITIVE_CASE(METHOD)                                             \
+  {                                                                        \
+    auto result = env->Call##METHOD##MethodA(module.get(), method_, args); \
+    throwPendingJniExceptionAsCppException();                              \
+    return folly::dynamic(result);                                         \
+  }
+
+#define PRIMITIVE_CASE_CASTING(METHOD, RESULT_TYPE)                        \
+  {                                                                        \
+    auto result = env->Call##METHOD##MethodA(module.get(), method_, args); \
+    throwPendingJniExceptionAsCppException();                              \
+    return folly::dynamic(static_cast<RESULT_TYPE>(result));               \
+  }
+
+#define OBJECT_CASE(JNI_CLASS, ACTIONS)                                     \
+  {                                                                         \
+    auto jobject = env->CallObjectMethodA(module.get(), method_, args);     \
+    throwPendingJniExceptionAsCppException();                               \
+    if (!jobject) {                                                         \
+      return folly::dynamic(nullptr);                                       \
+    }                                                                       \
+    auto result = adopt_local(static_cast<JNI_CLASS::javaobject>(jobject)); \
+    return folly::dynamic(result->ACTIONS());                               \
+  }
+
+#define OBJECT_CASE_CASTING(JNI_CLASS, ACTIONS, RESULT_TYPE)                \
+  {                                                                         \
+    auto jobject = env->CallObjectMethodA(module.get(), method_, args);     \
+    throwPendingJniExceptionAsCppException();                               \
+    if (!jobject) {                                                         \
+      return folly::dynamic(nullptr);                                       \
+    }                                                                       \
+    auto result = adopt_local(static_cast<JNI_CLASS::javaobject>(jobject)); \
+    return folly::dynamic(static_cast<RESULT_TYPE>(result->ACTIONS()));     \
+  }
+
+  char returnType = signature_.at(0);
+  switch (returnType) {
+    case 'v':
+      env->CallVoidMethodA(module.get(), method_, args);
+      throwPendingJniExceptionAsCppException();
+      return std::nullopt;
+
+    case 'z':
+      PRIMITIVE_CASE_CASTING(Boolean, bool)
+    case 'Z':
+      OBJECT_CASE_CASTING(JBoolean, value, bool)
+    case 'i':
+      PRIMITIVE_CASE(Int)
+    case 'I':
+      OBJECT_CASE(JInteger, value)
+    case 'd':
+      PRIMITIVE_CASE(Double)
+    case 'D':
+      OBJECT_CASE(JDouble, value)
+    case 'f':
+      PRIMITIVE_CASE(Float)
+    case 'F':
+      OBJECT_CASE(JFloat, value)
+
+    case 'S':
+      OBJECT_CASE(JString, toStdString)
+    case 'M':
+      OBJECT_CASE(WritableNativeMap, cthis()->consume)
+    case 'A':
+      OBJECT_CASE(WritableNativeArray, cthis()->consume)
+
+    default:
+      LOG(FATAL) << "Unknown return type: " << returnType;
+      return std::nullopt;
+  }
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/MethodInvoker.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/MethodInvoker.h
new file mode 100644
index 0000000..2c5cfb8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/MethodInvoker.h
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <vector>
+
+#include <cxxreact/JSExecutor.h>
+#include <fbjni/fbjni.h>
+#include <folly/dynamic.h>
+
+namespace facebook::react {
+
+class Instance;
+
+struct JReflectMethod : public jni::JavaClass<JReflectMethod> {
+  static constexpr auto kJavaDescriptor = "Ljava/lang/reflect/Method;";
+
+  jmethodID getMethodID() {
+    auto id = jni::Environment::current()->FromReflectedMethod(self());
+    jni::throwPendingJniExceptionAsCppException();
+    return id;
+  }
+};
+
+struct JBaseJavaModule : public jni::JavaClass<JBaseJavaModule> {
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/BaseJavaModule;";
+};
+
+class MethodInvoker {
+ public:
+  MethodInvoker(
+      jni::alias_ref<JReflectMethod::javaobject> method,
+      std::string methodName,
+      std::string signature,
+      std::string traceName,
+      bool isSync);
+
+  MethodCallResult invoke(
+      std::weak_ptr<Instance>& instance,
+      jni::alias_ref<JBaseJavaModule::javaobject> module,
+      const folly::dynamic& params);
+
+  std::string getMethodName() const;
+
+  bool isSyncHook() const {
+    return isSync_;
+  }
+
+ private:
+  jmethodID method_;
+  std::string methodName_;
+  std::string signature_;
+  std::size_t jsArgCount_;
+  std::string traceName_;
+  bool isSync_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ModuleRegistryBuilder.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ModuleRegistryBuilder.cpp
new file mode 100644
index 0000000..71de6e6
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ModuleRegistryBuilder.cpp
@@ -0,0 +1,70 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "ModuleRegistryBuilder.h"
+
+#include <glog/logging.h>
+#include <memory>
+#include <string>
+
+#include <cxxreact/CxxNativeModule.h>
+
+namespace facebook::react {
+
+std::string ModuleHolder::getName() const {
+  static auto method = getClass()->getMethod<jstring()>("getName");
+  return method(self())->toStdString();
+}
+
+xplat::module::CxxModule::Provider ModuleHolder::getProvider(
+    const std::string& moduleName) const {
+  return [self = jni::make_global(self()), moduleName] {
+    static auto getModule =
+        ModuleHolder::javaClassStatic()->getMethod<JNativeModule::javaobject()>(
+            "getModule");
+    // This is the call which uses the lazy Java Provider to instantiate the
+    // Java CxxModuleWrapper which contains the CxxModule.
+    auto module = getModule(self);
+
+    CHECK(module->isInstanceOf(CxxModuleWrapperBase::javaClassStatic()))
+        << "NativeModule '" << moduleName << "' isn't a C++ module";
+
+    auto cxxModule =
+        jni::static_ref_cast<CxxModuleWrapperBase::javaobject>(module);
+    // Then, we grab the CxxModule from the wrapper, which is no longer needed.
+    return cxxModule->cthis()->getModule();
+  };
+}
+
+std::vector<std::unique_ptr<NativeModule>> buildNativeModuleList(
+    std::weak_ptr<Instance> winstance,
+    jni::alias_ref<jni::JCollection<JavaModuleWrapper::javaobject>::javaobject>
+        javaModules,
+    jni::alias_ref<jni::JCollection<ModuleHolder::javaobject>::javaobject>
+        cxxModules,
+    std::shared_ptr<MessageQueueThread> moduleMessageQueue) {
+  std::vector<std::unique_ptr<NativeModule>> modules;
+  if (javaModules) {
+    for (const auto& jm : *javaModules) {
+      modules.emplace_back(std::make_unique<JavaNativeModule>(
+          winstance, jm, moduleMessageQueue));
+    }
+  }
+  if (cxxModules) {
+    for (const auto& cm : *cxxModules) {
+      std::string moduleName = cm->getName();
+      modules.emplace_back(std::make_unique<CxxNativeModule>(
+          winstance,
+          moduleName,
+          cm->getProvider(moduleName),
+          moduleMessageQueue));
+    }
+  }
+  return modules;
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ModuleRegistryBuilder.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ModuleRegistryBuilder.h
new file mode 100644
index 0000000..ec18985
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ModuleRegistryBuilder.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <string>
+
+#include <cxxreact/CxxModule.h>
+#include <cxxreact/ModuleRegistry.h>
+#include <fbjni/fbjni.h>
+
+#include "CxxModuleWrapper.h"
+#include "JavaModuleWrapper.h"
+
+namespace facebook::react {
+
+class MessageQueueThread;
+
+class ModuleHolder : public jni::JavaClass<ModuleHolder> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ModuleHolder;";
+
+  std::string getName() const;
+  xplat::module::CxxModule::Provider getProvider(
+      const std::string& moduleName) const;
+};
+
+std::vector<std::unique_ptr<NativeModule>> buildNativeModuleList(
+    std::weak_ptr<Instance> winstance,
+    jni::alias_ref<jni::JCollection<JavaModuleWrapper::javaobject>::javaobject>
+        javaModules,
+    jni::alias_ref<jni::JCollection<ModuleHolder::javaobject>::javaobject>
+        cxxModules,
+    std::shared_ptr<MessageQueueThread> moduleMessageQueue);
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeArray.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeArray.cpp
new file mode 100644
index 0000000..179cd0a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeArray.cpp
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "NativeArray.h"
+
+#include <folly/json.h>
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+void NativeArray::assertInternalType() {
+  if (!array_.isArray()) {
+    throwNewJavaException(
+        exceptions::gUnexpectedNativeTypeExceptionClass,
+        "expected Array, got a %s",
+        array_.typeName());
+  }
+}
+
+local_ref<jstring> NativeArray::toString() {
+  throwIfConsumed();
+  return make_jstring(folly::toJson(array_).c_str());
+}
+
+void NativeArray::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("toString", NativeArray::toString),
+  });
+}
+
+folly::dynamic NativeArray::consume() {
+  throwIfConsumed();
+  isConsumed = true;
+  return std::move(array_);
+}
+
+void NativeArray::throwIfConsumed() {
+  exceptions::throwIfObjectAlreadyConsumed(this, "Array already consumed");
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeArray.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeArray.h
new file mode 100644
index 0000000..c708748
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeArray.h
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <folly/dynamic.h>
+
+#include "NativeCommon.h"
+
+namespace facebook::react {
+
+class NativeArray : public jni::HybridClass<NativeArray> {
+ public:
+  static auto constexpr* kJavaDescriptor =
+      "Lcom/facebook/react/bridge/NativeArray;";
+
+  jni::local_ref<jstring> toString();
+
+  RN_EXPORT folly::dynamic consume();
+
+  // Whether this array has been added to another array or map and no longer
+  // has a valid array value.
+  bool isConsumed;
+
+  static void registerNatives();
+
+ protected:
+  folly::dynamic array_;
+
+  friend HybridBase;
+
+  template <class Dyn>
+  explicit NativeArray(Dyn&& array)
+      : isConsumed(false), array_(std::forward<Dyn>(array)) {
+    assertInternalType();
+  }
+
+  void assertInternalType();
+  void throwIfConsumed();
+
+  NativeArray(const NativeArray&) = delete;
+  NativeArray& operator=(const NativeArray&) = delete;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeCommon.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeCommon.cpp
new file mode 100644
index 0000000..04078f1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeCommon.cpp
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "NativeCommon.h"
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+namespace exceptions {
+const char* gUnexpectedNativeTypeExceptionClass =
+    "com/facebook/react/bridge/UnexpectedNativeTypeException";
+}
+
+namespace {
+
+// Returns a leaked global_ref.
+alias_ref<ReadableType> getTypeField(const char* fieldName) {
+  static auto cls = ReadableType::javaClassStatic();
+  auto field = cls->getStaticField<ReadableType::javaobject>(fieldName);
+  return make_global(cls->getStaticFieldValue(field)).release();
+}
+
+} // namespace
+
+local_ref<ReadableType> ReadableType::getType(folly::dynamic::Type type) {
+  switch (type) {
+    case folly::dynamic::Type::NULLT: {
+      static alias_ref<ReadableType> val = getTypeField("Null");
+      return make_local(val);
+    }
+    case folly::dynamic::Type::BOOL: {
+      static alias_ref<ReadableType> val = getTypeField("Boolean");
+      return make_local(val);
+    }
+    case folly::dynamic::Type::DOUBLE:
+    case folly::dynamic::Type::INT64: {
+      static alias_ref<ReadableType> val = getTypeField("Number");
+      return make_local(val);
+    }
+    case folly::dynamic::Type::STRING: {
+      static alias_ref<ReadableType> val = getTypeField("String");
+      return make_local(val);
+    }
+    case folly::dynamic::Type::OBJECT: {
+      static alias_ref<ReadableType> val = getTypeField("Map");
+      return make_local(val);
+    }
+    case folly::dynamic::Type::ARRAY: {
+      static alias_ref<ReadableType> val = getTypeField("Array");
+      return make_local(val);
+    }
+    default:
+      throwNewJavaException(
+          exceptions::gUnexpectedNativeTypeExceptionClass, "Unknown type");
+  }
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeCommon.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeCommon.h
new file mode 100644
index 0000000..b3b7bc0
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeCommon.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <folly/dynamic.h>
+
+#ifndef RN_EXPORT
+#define RN_EXPORT __attribute__((visibility("default")))
+#endif
+
+namespace facebook::react {
+
+struct ReadableType : public jni::JavaClass<ReadableType> {
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ReadableType;";
+
+  static jni::local_ref<ReadableType> getType(folly::dynamic::Type type);
+};
+
+namespace exceptions {
+
+extern const char* gUnexpectedNativeTypeExceptionClass;
+
+template <typename T>
+void throwIfObjectAlreadyConsumed(const T& t, const char* msg) {
+  if (t->isConsumed) {
+    jni::throwNewJavaException(
+        "com/facebook/react/bridge/ObjectAlreadyConsumedException", msg);
+  }
+}
+
+} // namespace exceptions
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeMap.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeMap.cpp
new file mode 100644
index 0000000..31a01a1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeMap.cpp
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "NativeMap.h"
+
+#include <folly/json.h>
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+local_ref<jstring> NativeMap::toString() {
+  throwIfConsumed();
+  return make_jstring(folly::toJson(map_).c_str());
+}
+
+void NativeMap::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("toString", NativeMap::toString),
+  });
+}
+
+folly::dynamic NativeMap::consume() {
+  throwIfConsumed();
+  isConsumed = true;
+  return std::move(map_);
+}
+
+void NativeMap::throwIfConsumed() {
+  exceptions::throwIfObjectAlreadyConsumed(this, "Map already consumed");
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeMap.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeMap.h
new file mode 100644
index 0000000..a451c41
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/NativeMap.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <folly/dynamic.h>
+
+#include "NativeCommon.h"
+
+namespace facebook::react {
+
+class NativeMap : public jni::HybridClass<NativeMap> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/NativeMap;";
+
+  jni::local_ref<jstring> toString();
+
+  RN_EXPORT folly::dynamic consume();
+
+  // Whether this map has been added to another array or map and no longer
+  // has a valid map value.
+  bool isConsumed;
+
+  static void registerNatives();
+
+ protected:
+  folly::dynamic map_;
+
+  friend HybridBase;
+
+  template <class Dyn>
+  explicit NativeMap(Dyn&& map)
+      : isConsumed(false), map_(std::forward<Dyn>(map)) {}
+
+  void throwIfConsumed();
+
+  NativeMap(const NativeMap&) = delete;
+  NativeMap& operator=(const NativeMap&) = delete;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/OnLoad.cpp
new file mode 100644
index 0000000..a2077e8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/OnLoad.cpp
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <string>
+
+#include <glog/logging.h>
+
+#include <fb/glog_init.h>
+#include <fbjni/fbjni.h>
+
+#include "CatalystInstanceImpl.h"
+#include "CxxModuleWrapperBase.h"
+#include "JCallback.h"
+#include "JDynamicNative.h"
+#include "JInspector.h"
+#include "JReactMarker.h"
+#include "JavaScriptExecutorHolder.h"
+#include "ProxyExecutor.h"
+#include "ReactInstanceManagerInspectorTarget.h"
+#include "WritableNativeArray.h"
+#include "WritableNativeMap.h"
+
+#ifndef WITH_GLOGINIT
+#define WITH_GLOGINIT 1
+#endif
+
+#ifdef WITH_XPLATINIT
+#include <fb/xplat_init.h>
+#endif
+
+namespace facebook::react {
+
+namespace {
+
+struct JavaJSExecutor : public jni::JavaClass<JavaJSExecutor> {
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/JavaJSExecutor;";
+};
+
+class ProxyJavaScriptExecutorHolder
+    : public jni::
+          HybridClass<ProxyJavaScriptExecutorHolder, JavaScriptExecutorHolder> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ProxyJavaScriptExecutor;";
+
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jclass>,
+      jni::alias_ref<JavaJSExecutor::javaobject> executorInstance) {
+    return makeCxxInstance(std::make_shared<ProxyExecutorOneTimeFactory>(
+        make_global(executorInstance)));
+  }
+
+  static void registerNatives() {
+    registerHybrid({
+        makeNativeMethod(
+            "initHybrid", ProxyJavaScriptExecutorHolder::initHybrid),
+    });
+  }
+
+ private:
+  friend HybridBase;
+  using HybridBase::HybridBase;
+};
+
+} // namespace
+
+extern "C" JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved) {
+#ifdef WITH_XPLATINIT
+  return facebook::xplat::initialize(vm, [] {
+#else
+  return jni::initialize(vm, [] {
+#endif
+#if WITH_GLOGINIT
+    gloginit::initialize();
+    FLAGS_minloglevel = 0;
+#endif
+
+    ProxyJavaScriptExecutorHolder::registerNatives();
+    CatalystInstanceImpl::registerNatives();
+    CxxModuleWrapperBase::registerNatives();
+    JCxxCallbackImpl::registerNatives();
+    NativeArray::registerNatives();
+    ReadableNativeArray::registerNatives();
+    WritableNativeArray::registerNatives();
+    NativeMap::registerNatives();
+    ReadableNativeMap::registerNatives();
+    WritableNativeMap::registerNatives();
+    JDynamicNative::registerNatives();
+    JReactMarker::registerNatives();
+    JInspector::registerNatives();
+    ReactInstanceManagerInspectorTarget::registerNatives();
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ProxyExecutor.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ProxyExecutor.cpp
new file mode 100644
index 0000000..68a121f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ProxyExecutor.cpp
@@ -0,0 +1,139 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "ProxyExecutor.h"
+
+#include <cxxreact/JSBigString.h>
+#include <cxxreact/ModuleRegistry.h>
+#include <cxxreact/SystraceSection.h>
+#include <fb/assert.h>
+#include <folly/json.h>
+
+#include <memory>
+
+namespace facebook::react {
+
+const auto EXECUTOR_BASECLASS = "com/facebook/react/bridge/JavaJSExecutor";
+
+static std::string executeJSCallWithProxy(
+    jobject executor,
+    const std::string& methodName,
+    const folly::dynamic& arguments) {
+  static auto executeJSCall =
+      jni::findClassStatic(EXECUTOR_BASECLASS)
+          ->getMethod<jstring(jstring, jstring)>("executeJSCall");
+
+  auto result = executeJSCall(
+      executor,
+      jni::make_jstring(methodName).get(),
+      jni::make_jstring(folly::toJson(arguments).c_str()).get());
+  return result->toString();
+}
+
+std::unique_ptr<JSExecutor> ProxyExecutorOneTimeFactory::createJSExecutor(
+    std::shared_ptr<ExecutorDelegate> delegate,
+    std::shared_ptr<MessageQueueThread>) {
+  return std::make_unique<ProxyExecutor>(std::move(m_executor), delegate);
+}
+
+ProxyExecutor::ProxyExecutor(
+    jni::global_ref<jobject>&& executorInstance,
+    std::shared_ptr<ExecutorDelegate> delegate)
+    : m_executor(std::move(executorInstance)), m_delegate(delegate) {}
+
+ProxyExecutor::~ProxyExecutor() {
+  m_executor.reset();
+}
+
+void ProxyExecutor::initializeRuntime() {
+  folly::dynamic nativeModuleConfig = folly::dynamic::array;
+
+  {
+    SystraceSection s("collectNativeModuleDescriptions");
+    auto moduleRegistry = m_delegate->getModuleRegistry();
+    for (const auto& name : moduleRegistry->moduleNames()) {
+      auto config = moduleRegistry->getConfig(name);
+      nativeModuleConfig.push_back(config ? config->config : nullptr);
+    }
+  }
+
+  folly::dynamic config = folly::dynamic::object(
+      "remoteModuleConfig", std::move(nativeModuleConfig));
+
+  {
+    SystraceSection t("setGlobalVariable");
+    setGlobalVariable(
+        "__fbBatchedBridgeConfig",
+        std::make_unique<JSBigStdString>(folly::toJson(config)));
+  }
+}
+
+void ProxyExecutor::loadBundle(
+    std::unique_ptr<const JSBigString>,
+    std::string sourceURL) {
+  static auto loadBundle = jni::findClassStatic(EXECUTOR_BASECLASS)
+                               ->getMethod<void(jstring)>("loadBundle");
+
+  // The proxy ignores the script data passed in.
+
+  loadBundle(m_executor.get(), jni::make_jstring(sourceURL).get());
+  // We can get pending calls here to native but the queue will be drained when
+  // we launch the application.
+}
+
+void ProxyExecutor::setBundleRegistry(std::unique_ptr<RAMBundleRegistry>) {
+  jni::throwNewJavaException(
+      "java/lang/UnsupportedOperationException",
+      "Loading application RAM bundles is not supported for proxy executors");
+}
+
+void ProxyExecutor::registerBundle(
+    uint32_t bundleId,
+    const std::string& bundlePath) {
+  jni::throwNewJavaException(
+      "java/lang/UnsupportedOperationException",
+      "Loading application RAM bundles is not supported for proxy executors");
+}
+
+void ProxyExecutor::callFunction(
+    const std::string& moduleId,
+    const std::string& methodId,
+    const folly::dynamic& arguments) {
+  auto call = folly::dynamic::array(moduleId, methodId, std::move(arguments));
+
+  std::string result = executeJSCallWithProxy(
+      m_executor.get(), "callFunctionReturnFlushedQueue", std::move(call));
+  m_delegate->callNativeModules(*this, folly::parseJson(result), true);
+}
+
+void ProxyExecutor::invokeCallback(
+    const double callbackId,
+    const folly::dynamic& arguments) {
+  auto call = folly::dynamic::array(callbackId, std::move(arguments));
+  std::string result = executeJSCallWithProxy(
+      m_executor.get(), "invokeCallbackAndReturnFlushedQueue", std::move(call));
+  m_delegate->callNativeModules(*this, folly::parseJson(result), true);
+}
+
+void ProxyExecutor::setGlobalVariable(
+    std::string propName,
+    std::unique_ptr<const JSBigString> jsonValue) {
+  static auto setGlobalVariable =
+      jni::findClassStatic(EXECUTOR_BASECLASS)
+          ->getMethod<void(jstring, jstring)>("setGlobalVariable");
+
+  setGlobalVariable(
+      m_executor.get(),
+      jni::make_jstring(propName).get(),
+      jni::make_jstring(jsonValue->c_str()).get());
+}
+
+std::string ProxyExecutor::getDescription() {
+  return "Chrome";
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ProxyExecutor.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ProxyExecutor.h
new file mode 100644
index 0000000..7bf7342
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ProxyExecutor.h
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <cxxreact/JSExecutor.h>
+#include <cxxreact/RAMBundleRegistry.h>
+#include <fbjni/fbjni.h>
+#include <jni.h>
+
+namespace facebook::react {
+
+/**
+ * This executor factory can only create a single executor instance because it
+ * moves executorInstance global reference to the executor instance it creates.
+ */
+class ProxyExecutorOneTimeFactory : public JSExecutorFactory {
+ public:
+  ProxyExecutorOneTimeFactory(jni::global_ref<jobject>&& executorInstance)
+      : m_executor(std::move(executorInstance)) {}
+  virtual std::unique_ptr<JSExecutor> createJSExecutor(
+      std::shared_ptr<ExecutorDelegate> delegate,
+      std::shared_ptr<MessageQueueThread> queue) override;
+
+ private:
+  jni::global_ref<jobject> m_executor;
+};
+
+class ProxyExecutor : public JSExecutor {
+ public:
+  ProxyExecutor(
+      jni::global_ref<jobject>&& executorInstance,
+      std::shared_ptr<ExecutorDelegate> delegate);
+  virtual ~ProxyExecutor() override;
+  virtual void initializeRuntime() override;
+  virtual void loadBundle(
+      std::unique_ptr<const JSBigString> script,
+      std::string sourceURL) override;
+  virtual void setBundleRegistry(
+      std::unique_ptr<RAMBundleRegistry> bundle) override;
+  virtual void registerBundle(uint32_t bundleId, const std::string& bundlePath)
+      override;
+  virtual void callFunction(
+      const std::string& moduleId,
+      const std::string& methodId,
+      const folly::dynamic& arguments) override;
+  virtual void invokeCallback(
+      const double callbackId,
+      const folly::dynamic& arguments) override;
+  virtual void setGlobalVariable(
+      std::string propName,
+      std::unique_ptr<const JSBigString> jsonValue) override;
+  virtual std::string getDescription() override;
+
+ private:
+  jni::global_ref<jobject> m_executor;
+  std::shared_ptr<ExecutorDelegate> m_delegate;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeArray.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeArray.cpp
new file mode 100644
index 0000000..9add683
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeArray.cpp
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "ReadableNativeArray.h"
+
+#include "ReadableNativeMap.h"
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+void ReadableNativeArray::mapException(std::exception_ptr ex) {
+  try {
+    std::rethrow_exception(ex);
+  } catch (const folly::TypeError& err) {
+    throwNewJavaException(
+        exceptions::gUnexpectedNativeTypeExceptionClass, err.what());
+  }
+}
+
+local_ref<JArrayClass<jobject>> ReadableNativeArray::importArray() {
+  auto size = static_cast<jint>(array_.size());
+  auto jarray = JArrayClass<jobject>::newArray(size);
+  for (jint ii = 0; ii < size; ii++) {
+    addDynamicToJArray(jarray, ii, array_.at(ii));
+  }
+  return jarray;
+}
+
+local_ref<JArrayClass<jobject>> ReadableNativeArray::importTypeArray() {
+  auto size = static_cast<jint>(array_.size());
+  auto jarray = JArrayClass<jobject>::newArray(size);
+  for (jint ii = 0; ii < size; ii++) {
+    (*jarray)[ii] = ReadableType::getType(array_.at(ii).type());
+  }
+  return jarray;
+}
+
+void ReadableNativeArray::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("importArray", ReadableNativeArray::importArray),
+      makeNativeMethod("importTypeArray", ReadableNativeArray::importTypeArray),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeArray.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeArray.h
new file mode 100644
index 0000000..02d9445
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeArray.h
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include "NativeArray.h"
+
+#include "NativeCommon.h"
+#include "NativeMap.h"
+
+namespace facebook::react {
+
+struct ReadableArray : jni::JavaClass<ReadableArray> {
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ReadableArray;";
+};
+
+class ReadableNativeArray
+    : public jni::HybridClass<ReadableNativeArray, NativeArray> {
+ protected:
+  friend HybridBase;
+
+  template <class Dyn>
+  explicit ReadableNativeArray(Dyn&& array)
+      : HybridBase(std::forward<Dyn>(array)) {}
+
+ public:
+  static constexpr const char* kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ReadableNativeArray;";
+
+  static void mapException(std::exception_ptr ex);
+  static void registerNatives();
+
+  jni::local_ref<jni::JArrayClass<jobject>> importArray();
+  jni::local_ref<jni::JArrayClass<jobject>> importTypeArray();
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeMap.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeMap.cpp
new file mode 100644
index 0000000..08f2b0b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeMap.cpp
@@ -0,0 +1,128 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "ReadableNativeMap.h"
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+void ReadableNativeMap::mapException(std::exception_ptr ex) {
+  try {
+    std::rethrow_exception(ex);
+  } catch (const folly::TypeError& err) {
+    throwNewJavaException(
+        exceptions::gUnexpectedNativeTypeExceptionClass, err.what());
+  }
+}
+
+void addDynamicToJArray(
+    local_ref<JArrayClass<jobject>> jarray,
+    jint index,
+    const folly::dynamic& dyn) {
+  switch (dyn.type()) {
+    case folly::dynamic::Type::NULLT: {
+      jarray->setElement(index, nullptr);
+      break;
+    }
+    case folly::dynamic::Type::BOOL: {
+      (*jarray)[index] = JBoolean::valueOf(dyn.getBool());
+      break;
+    }
+    case folly::dynamic::Type::INT64: {
+      (*jarray)[index] = JDouble::valueOf(dyn.getInt());
+      break;
+    }
+    case folly::dynamic::Type::DOUBLE: {
+      (*jarray)[index] = JDouble::valueOf(dyn.getDouble());
+      break;
+    }
+    case folly::dynamic::Type::STRING: {
+      (*jarray)[index] = make_jstring(dyn.getString());
+      break;
+    }
+    case folly::dynamic::Type::OBJECT: {
+      (*jarray)[index] = ReadableNativeMap::newObjectCxxArgs(dyn);
+      break;
+    }
+    case folly::dynamic::Type::ARRAY: {
+      (*jarray)[index] = ReadableNativeArray::newObjectCxxArgs(dyn);
+      break;
+    }
+    default:
+      jarray->setElement(index, nullptr);
+      break;
+  }
+}
+
+local_ref<JArrayClass<jstring>> ReadableNativeMap::importKeys() {
+  throwIfConsumed();
+
+  keys_ = folly::dynamic::array();
+  if (map_ == nullptr) {
+    return JArrayClass<jstring>::newArray(0);
+  }
+  auto jarray = JArrayClass<jstring>::newArray(map_.size());
+  jint i = 0;
+  for (auto& pair : map_.items()) {
+    auto value = pair.first.asString();
+    (*keys_).push_back(value);
+    (*jarray)[i++] = make_jstring(value);
+  }
+
+  return jarray;
+}
+
+local_ref<JArrayClass<jobject>> ReadableNativeMap::importValues() {
+  throwIfConsumed();
+
+  auto size = static_cast<jint>(keys_.value().size());
+  auto jarray = JArrayClass<jobject>::newArray(size);
+  for (jint ii = 0; ii < size; ii++) {
+    const std::string& key = (*keys_)[ii].getString();
+    addDynamicToJArray(jarray, ii, map_.at(key));
+  }
+  return jarray;
+}
+
+local_ref<JArrayClass<jobject>> ReadableNativeMap::importTypes() {
+  throwIfConsumed();
+
+  auto size = static_cast<jint>(keys_.value().size());
+  auto jarray = JArrayClass<jobject>::newArray(size);
+  for (jint ii = 0; ii < size; ii++) {
+    const std::string& key = (*keys_)[ii].getString();
+    (*jarray)[ii] = ReadableType::getType(map_.at(key).type());
+  }
+  return jarray;
+}
+
+local_ref<ReadableNativeMap::jhybridobject>
+ReadableNativeMap::createWithContents(folly::dynamic&& map) {
+  if (map.isNull()) {
+    return local_ref<jhybridobject>(nullptr);
+  }
+
+  if (!map.isObject()) {
+    throwNewJavaException(
+        exceptions::gUnexpectedNativeTypeExceptionClass,
+        "expected Map, got a %s",
+        map.typeName());
+  }
+
+  return newObjectCxxArgs(std::move(map));
+}
+
+void ReadableNativeMap::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("importKeys", ReadableNativeMap::importKeys),
+      makeNativeMethod("importValues", ReadableNativeMap::importValues),
+      makeNativeMethod("importTypes", ReadableNativeMap::importTypes),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeMap.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeMap.h
new file mode 100644
index 0000000..16ff720
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/ReadableNativeMap.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <folly/dynamic.h>
+#include <folly/json.h>
+#include <optional>
+
+#include "NativeCommon.h"
+#include "NativeMap.h"
+#include "ReadableNativeArray.h"
+
+namespace facebook::react {
+
+struct WritableNativeMap;
+
+struct ReadableMap : jni::JavaClass<ReadableMap> {
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ReadableMap;";
+};
+
+void addDynamicToJArray(
+    jni::local_ref<jni::JArrayClass<jobject>> jarray,
+    jint index,
+    const folly::dynamic& dyn);
+
+struct ReadableNativeMap : jni::HybridClass<ReadableNativeMap, NativeMap> {
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/ReadableNativeMap;";
+
+  jni::local_ref<jni::JArrayClass<jstring>> importKeys();
+  jni::local_ref<jni::JArrayClass<jobject>> importValues();
+  jni::local_ref<jni::JArrayClass<jobject>> importTypes();
+  std::optional<folly::dynamic> keys_;
+  static jni::local_ref<jhybridobject> createWithContents(folly::dynamic&& map);
+
+  static void mapException(std::exception_ptr ex);
+  static void registerNatives();
+
+  using HybridBase::HybridBase;
+  friend HybridBase;
+  friend struct WritableNativeMap;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeArray.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeArray.cpp
new file mode 100644
index 0000000..c6ca317
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeArray.cpp
@@ -0,0 +1,91 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "WritableNativeArray.h"
+
+#include "ReadableNativeMap.h"
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+WritableNativeArray::WritableNativeArray()
+    : HybridBase(folly::dynamic::array()) {}
+
+WritableNativeArray::WritableNativeArray(folly::dynamic&& val)
+    : HybridBase(std::move(val)) {
+  if (!array_.isArray()) {
+    throw std::runtime_error("WritableNativeArray value must be an array.");
+  }
+}
+
+local_ref<WritableNativeArray::jhybriddata> WritableNativeArray::initHybrid(
+    alias_ref<jclass>) {
+  return makeCxxInstance();
+}
+
+void WritableNativeArray::pushNull() {
+  throwIfConsumed();
+  array_.push_back(nullptr);
+}
+
+void WritableNativeArray::pushBoolean(jboolean value) {
+  throwIfConsumed();
+  array_.push_back(value == JNI_TRUE);
+}
+
+void WritableNativeArray::pushDouble(jdouble value) {
+  throwIfConsumed();
+  array_.push_back(value);
+}
+
+void WritableNativeArray::pushInt(jint value) {
+  throwIfConsumed();
+  array_.push_back(value);
+}
+
+void WritableNativeArray::pushString(jstring value) {
+  if (value == NULL) {
+    pushNull();
+    return;
+  }
+  throwIfConsumed();
+  array_.push_back(wrap_alias(value)->toStdString());
+}
+
+void WritableNativeArray::pushNativeArray(ReadableNativeArray* otherArray) {
+  if (otherArray == NULL) {
+    pushNull();
+    return;
+  }
+  throwIfConsumed();
+  array_.push_back(otherArray->consume());
+}
+
+void WritableNativeArray::pushNativeMap(ReadableNativeMap* map) {
+  if (map == NULL) {
+    pushNull();
+    return;
+  }
+  throwIfConsumed();
+  array_.push_back(map->consume());
+}
+
+void WritableNativeArray::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", WritableNativeArray::initHybrid),
+      makeNativeMethod("pushNull", WritableNativeArray::pushNull),
+      makeNativeMethod("pushBoolean", WritableNativeArray::pushBoolean),
+      makeNativeMethod("pushDouble", WritableNativeArray::pushDouble),
+      makeNativeMethod("pushInt", WritableNativeArray::pushInt),
+      makeNativeMethod("pushString", WritableNativeArray::pushString),
+      makeNativeMethod("pushNativeArray", WritableNativeArray::pushNativeArray),
+      makeNativeMethod("pushNativeMap", WritableNativeArray::pushNativeMap),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeArray.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeArray.h
new file mode 100644
index 0000000..559beef
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeArray.h
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <folly/dynamic.h>
+#include <folly/json.h>
+
+#include "ReadableNativeArray.h"
+
+namespace facebook::react {
+
+struct ReadableNativeMap;
+
+struct WritableArray : jni::JavaClass<WritableArray> {
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/WritableArray;";
+};
+
+struct WritableNativeArray
+    : public jni::HybridClass<WritableNativeArray, ReadableNativeArray> {
+  static constexpr const char* kJavaDescriptor =
+      "Lcom/facebook/react/bridge/WritableNativeArray;";
+
+  WritableNativeArray();
+  WritableNativeArray(folly::dynamic&& val);
+
+  static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jclass>);
+
+  void pushNull();
+  void pushBoolean(jboolean value);
+  void pushDouble(jdouble value);
+  void pushInt(jint value);
+  void pushString(jstring value);
+  void pushNativeArray(ReadableNativeArray* otherArray);
+  void pushNativeMap(ReadableNativeMap* map);
+
+  static void registerNatives();
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeMap.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeMap.cpp
new file mode 100644
index 0000000..9c53c5c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeMap.cpp
@@ -0,0 +1,102 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "WritableNativeMap.h"
+
+using namespace facebook::jni;
+
+namespace facebook::react {
+
+WritableNativeMap::WritableNativeMap() : HybridBase(folly::dynamic::object()) {}
+
+WritableNativeMap::WritableNativeMap(folly::dynamic&& val)
+    : HybridBase(std::move(val)) {
+  if (!map_.isObject()) {
+    throw std::runtime_error("WritableNativeMap value must be an object.");
+  }
+}
+
+local_ref<WritableNativeMap::jhybriddata> WritableNativeMap::initHybrid(
+    alias_ref<jclass>) {
+  return makeCxxInstance();
+}
+
+void WritableNativeMap::putNull(std::string key) {
+  throwIfConsumed();
+  map_.insert(std::move(key), nullptr);
+}
+
+void WritableNativeMap::putBoolean(std::string key, bool val) {
+  throwIfConsumed();
+  map_.insert(std::move(key), val);
+}
+
+void WritableNativeMap::putDouble(std::string key, double val) {
+  throwIfConsumed();
+  map_.insert(std::move(key), val);
+}
+
+void WritableNativeMap::putInt(std::string key, int val) {
+  throwIfConsumed();
+  map_.insert(std::move(key), val);
+}
+
+void WritableNativeMap::putString(std::string key, alias_ref<jstring> val) {
+  if (!val) {
+    putNull(std::move(key));
+    return;
+  }
+  throwIfConsumed();
+  map_.insert(std::move(key), val->toString());
+}
+
+void WritableNativeMap::putNativeArray(
+    std::string key,
+    ReadableNativeArray* otherArray) {
+  if (!otherArray) {
+    putNull(std::move(key));
+    return;
+  }
+  throwIfConsumed();
+  map_.insert(key, otherArray->consume());
+}
+
+void WritableNativeMap::putNativeMap(
+    std::string key,
+    ReadableNativeMap* otherMap) {
+  if (!otherMap) {
+    putNull(std::move(key));
+    return;
+  }
+  throwIfConsumed();
+  map_.insert(std::move(key), otherMap->consume());
+}
+
+void WritableNativeMap::mergeNativeMap(ReadableNativeMap* other) {
+  throwIfConsumed();
+  other->throwIfConsumed();
+
+  for (auto sourceIt : other->map_.items()) {
+    map_[sourceIt.first] = sourceIt.second;
+  }
+}
+
+void WritableNativeMap::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("putNull", WritableNativeMap::putNull),
+      makeNativeMethod("putBoolean", WritableNativeMap::putBoolean),
+      makeNativeMethod("putDouble", WritableNativeMap::putDouble),
+      makeNativeMethod("putInt", WritableNativeMap::putInt),
+      makeNativeMethod("putString", WritableNativeMap::putString),
+      makeNativeMethod("putNativeArray", WritableNativeMap::putNativeArray),
+      makeNativeMethod("putNativeMap", WritableNativeMap::putNativeMap),
+      makeNativeMethod("mergeNativeMap", WritableNativeMap::mergeNativeMap),
+      makeNativeMethod("initHybrid", WritableNativeMap::initHybrid),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeMap.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeMap.h
new file mode 100644
index 0000000..d20f007
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jni/WritableNativeMap.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <folly/dynamic.h>
+#include <folly/json.h>
+
+#include "ReadableNativeArray.h"
+#include "ReadableNativeMap.h"
+
+namespace facebook::react {
+
+struct WritableMap : jni::JavaClass<WritableMap> {
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/WritableMap;";
+};
+
+struct WritableNativeMap
+    : jni::HybridClass<WritableNativeMap, ReadableNativeMap> {
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/bridge/WritableNativeMap;";
+
+  WritableNativeMap();
+  WritableNativeMap(folly::dynamic&& val);
+
+  static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jclass>);
+
+  void putNull(std::string key);
+  void putBoolean(std::string key, bool val);
+  void putDouble(std::string key, double val);
+  void putInt(std::string key, int val);
+  void putString(std::string key, jni::alias_ref<jstring> val);
+  void putNativeArray(std::string key, ReadableNativeArray* val);
+  void putNativeMap(std::string key, ReadableNativeMap* val);
+  void mergeNativeMap(ReadableNativeMap* other);
+
+  static void registerNatives();
+
+  friend HybridBase;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jscexecutor/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jscexecutor/CMakeLists.txt
new file mode 100644
index 0000000..6785880
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jscexecutor/CMakeLists.txt
@@ -0,0 +1,36 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-fvisibility=hidden -fexceptions -frtti)
+
+file(GLOB jscexecutor_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
+add_library(jscexecutor SHARED ${jscexecutor_SRC})
+
+target_include_directories(jscexecutor PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
+
+# Patch from Expo: https://github.com/expo/react-native/blob/02714ab44d1e206fa80e81aef618e61017cccdc1/ReactAndroid/src/main/java/com/facebook/react/jscexecutor/CMakeLists.txt#L16-L25
+# Explicitly link libgcc.a to prevent undefined `_Unwind_Resume` symbol and crash from throwing c++ exceptions even someone tries to catch the exceptions.
+# according to https://android.googlesource.com/platform/ndk/+/master/docs/BuildSystemMaintainers.md#unwinding,
+# we should put the unwinder between static libs and shared libs.
+#
+# TODO(ncor): we don't need this patch anymore after upgrading to ndk r23
+if(ANDROID_NDK_REVISION VERSION_LESS "23.0.0")
+  set(LIB_UNWIND gcc)
+else()
+  set(LIB_UNWIND unwind)
+endif()
+
+target_link_libraries(jscexecutor
+        jsireact
+        jscruntime
+        ${LIB_UNWIND}
+        fb
+        fbjni
+        folly_runtime
+        jsi
+        reactnativejni)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jscexecutor/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jscexecutor/OnLoad.cpp
new file mode 100644
index 0000000..f9a4649
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/jscexecutor/OnLoad.cpp
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fbjni/fbjni.h>
+#include <jsc/JSCRuntime.h>
+#include <jsireact/JSIExecutor.h>
+#include <react/jni/JReactMarker.h>
+#include <react/jni/JSLogging.h>
+#include <react/jni/JavaScriptExecutorHolder.h>
+#include <react/jni/ReadableNativeMap.h>
+
+#include <memory>
+
+namespace facebook::react {
+
+namespace {
+
+class JSCExecutorFactory : public JSExecutorFactory {
+ public:
+  std::unique_ptr<JSExecutor> createJSExecutor(
+      std::shared_ptr<ExecutorDelegate> delegate,
+      std::shared_ptr<MessageQueueThread> jsQueue) override {
+    auto installBindings = [](jsi::Runtime& runtime) {
+      react::Logger androidLogger =
+          static_cast<void (*)(const std::string&, unsigned int)>(
+              &reactAndroidLoggingHook);
+      react::bindNativeLogger(runtime, androidLogger);
+    };
+    return std::make_unique<JSIExecutor>(
+        jsc::makeJSCRuntime(),
+        delegate,
+        JSIExecutor::defaultTimeoutInvoker,
+        installBindings);
+  }
+};
+
+} // namespace
+
+// This is not like JSCJavaScriptExecutor, which calls JSC directly.  This uses
+// JSIExecutor with JSCRuntime.
+class JSCExecutorHolder
+    : public jni::HybridClass<JSCExecutorHolder, JavaScriptExecutorHolder> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/jscexecutor/JSCExecutor;";
+
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jclass>,
+      ReadableNativeMap*) {
+    // This is kind of a weird place for stuff, but there's no other
+    // good place for initialization which is specific to JSC on
+    // Android.
+    JReactMarker::setLogPerfMarkerIfNeeded();
+    // TODO mhorowitz T28461666 fill in some missing nice to have glue
+    return makeCxxInstance(std::make_unique<JSCExecutorFactory>());
+  }
+
+  static void registerNatives() {
+    registerHybrid({
+        makeNativeMethod("initHybrid", JSCExecutorHolder::initHybrid),
+    });
+  }
+
+ private:
+  friend HybridBase;
+  using HybridBase::HybridBase;
+};
+
+} // namespace facebook::react
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
+  return facebook::jni::initialize(
+      vm, [] { facebook::react::JSCExecutorHolder::registerNatives(); });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/CMakeLists.txt
new file mode 100644
index 0000000..2694a9c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/CMakeLists.txt
@@ -0,0 +1,34 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-fexceptions -frtti -std=c++20 -Wall -DLOG_TAG=\"Fabric\")
+
+file(GLOB mapbuffer_SRC CONFIGURE_DEPENDS
+        ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/*.cpp)
+
+add_library(mapbufferjni SHARED ${mapbuffer_SRC})
+
+target_include_directories(mapbufferjni
+        PUBLIC
+          ${CMAKE_CURRENT_SOURCE_DIR}
+        PRIVATE
+          ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/
+)
+
+target_link_libraries(mapbufferjni
+        fb
+        fbjni
+        folly_runtime
+        glog
+        glog_init
+        react_debug
+        react_render_mapbuffer
+        react_utils
+        react_config
+        yoga
+)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JReadableMapBuffer.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JReadableMapBuffer.cpp
new file mode 100644
index 0000000..49b07b7
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JReadableMapBuffer.cpp
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JReadableMapBuffer.h"
+
+namespace facebook::react {
+
+void JReadableMapBuffer::registerNatives() {
+  registerHybrid({
+      makeNativeMethod(
+          "importByteBuffer", JReadableMapBuffer::importByteBuffer),
+  });
+}
+
+jni::local_ref<jni::JByteBuffer> JReadableMapBuffer::importByteBuffer() {
+  // TODO T83483191: Reevaluate what's the best approach here (allocateDirect vs
+  // DirectByteBuffer).
+  return jni::JByteBuffer::wrapBytes(
+      serializedData_.data(), serializedData_.size());
+}
+
+std::vector<uint8_t> JReadableMapBuffer::data() const {
+  return serializedData_;
+}
+
+jni::local_ref<JReadableMapBuffer::jhybridobject>
+JReadableMapBuffer::createWithContents(MapBuffer&& map) {
+  return newObjectCxxArgs(std::move(map));
+}
+
+JReadableMapBuffer::JReadableMapBuffer(MapBuffer&& map)
+    : serializedData_(std::move(map.bytes_)) {
+  react_native_assert(
+      (serializedData_.size() != 0) && "Error no content in map");
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JReadableMapBuffer.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JReadableMapBuffer.h
new file mode 100644
index 0000000..5949ca5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JReadableMapBuffer.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/debug/react_native_assert.h>
+#include <react/renderer/mapbuffer/MapBuffer.h>
+
+#include <fbjni/ByteBuffer.h>
+
+namespace facebook::react {
+
+class JReadableMapBuffer : public jni::HybridClass<JReadableMapBuffer> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/common/mapbuffer/ReadableMapBuffer;";
+
+  static void registerNatives();
+
+  static jni::local_ref<JReadableMapBuffer::jhybridobject> createWithContents(
+      MapBuffer&& map);
+
+  explicit JReadableMapBuffer(MapBuffer&& map);
+
+  jni::local_ref<jni::JByteBuffer> importByteBuffer();
+
+  std::vector<uint8_t> data() const;
+
+ private:
+  std::vector<uint8_t> serializedData_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JWritableMapBuffer.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JWritableMapBuffer.cpp
new file mode 100644
index 0000000..46ed21c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JWritableMapBuffer.cpp
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JWritableMapBuffer.h"
+#include <react/renderer/mapbuffer/MapBufferBuilder.h>
+
+namespace facebook::react {
+
+MapBuffer JWritableMapBuffer::getMapBuffer() {
+  static const auto getKeys =
+      javaClassStatic()->getMethod<jni::JArrayInt()>("getKeys");
+  static const auto getValues =
+      javaClassStatic()->getMethod<jni::JArrayClass<jni::JObject>()>(
+          "getValues");
+
+  auto keyArray = getKeys(self());
+  auto values = getValues(self());
+
+  auto keys = keyArray->pin();
+
+  MapBufferBuilder builder;
+
+  auto size = keys.size();
+  for (int i = 0; i < size; i++) {
+    auto key = keys[i];
+    jni::local_ref<jni::JObject> value = values->getElement(i);
+
+    static const auto booleanClass = jni::JBoolean::javaClassStatic();
+    static const auto integerClass = jni::JInteger::javaClassStatic();
+    static const auto doubleClass = jni::JDouble::javaClassStatic();
+    static const auto stringClass = jni::JString::javaClassStatic();
+    static const auto readableMapClass = JReadableMapBuffer::javaClassStatic();
+    static const auto writableMapClass = JWritableMapBuffer::javaClassStatic();
+
+    if (value->isInstanceOf(booleanClass)) {
+      auto element = jni::static_ref_cast<jni::JBoolean>(value);
+      builder.putBool(key, element->value());
+    } else if (value->isInstanceOf(integerClass)) {
+      auto element = jni::static_ref_cast<jni::JInteger>(value);
+      builder.putInt(key, element->value());
+    } else if (value->isInstanceOf(doubleClass)) {
+      auto element = jni::static_ref_cast<jni::JDouble>(value);
+      builder.putDouble(key, element->value());
+    } else if (value->isInstanceOf(stringClass)) {
+      auto element = jni::static_ref_cast<jni::JString>(value);
+      builder.putString(key, element->toStdString());
+    } else if (value->isInstanceOf(readableMapClass)) {
+      auto element =
+          jni::static_ref_cast<JReadableMapBuffer::jhybridobject>(value);
+      builder.putMapBuffer(key, MapBuffer(element->cthis()->data()));
+    } else if (value->isInstanceOf(writableMapClass)) {
+      auto element =
+          jni::static_ref_cast<JWritableMapBuffer::javaobject>(value);
+      builder.putMapBuffer(key, element->getMapBuffer());
+    }
+  }
+
+  return builder.build();
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JWritableMapBuffer.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JWritableMapBuffer.h
new file mode 100644
index 0000000..e076b28
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/JWritableMapBuffer.h
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/common/mapbuffer/JReadableMapBuffer.h>
+
+namespace facebook::react {
+
+class JWritableMapBuffer : public jni::JavaClass<JWritableMapBuffer> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/common/mapbuffer/WritableMapBuffer;";
+
+  MapBuffer getMapBuffer();
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/OnLoad.cpp
new file mode 100644
index 0000000..3a1ec41
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/mapbuffer/react/common/mapbuffer/OnLoad.cpp
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fbjni/fbjni.h>
+
+#include "JReadableMapBuffer.h"
+#include "JWritableMapBuffer.h"
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*) {
+  return facebook::jni::initialize(
+      vm, [] { facebook::react::JReadableMapBuffer::registerNatives(); });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/CMakeLists.txt
new file mode 100644
index 0000000..932157a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/CMakeLists.txt
@@ -0,0 +1,29 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-fexceptions -frtti -std=c++20 -Wall -DLOG_TAG=\"ReactNative\")
+
+file(GLOB react_newarchdefaults_SRC CONFIGURE_DEPENDS *.cpp)
+
+add_library(react_newarchdefaults SHARED ${react_newarchdefaults_SRC})
+
+target_include_directories(react_newarchdefaults PUBLIC .)
+
+target_link_libraries(react_newarchdefaults
+        fbjni
+        fabricjni
+        react_featureflagsjni
+        react_nativemodule_core
+        react_codegen_rncore
+        react_cxxreactpackage
+        react_nativemodule_defaults
+        react_nativemodule_dom
+        react_nativemodule_featureflags
+        react_nativemodule_microtasks
+        react_nativemodule_idlecallbacks
+        jsi)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultComponentsRegistry.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultComponentsRegistry.cpp
new file mode 100644
index 0000000..386d2ff
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultComponentsRegistry.cpp
@@ -0,0 +1,74 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "DefaultComponentsRegistry.h"
+
+#include <CoreComponentsRegistry.h>
+#include <fbjni/fbjni.h>
+#include <react/debug/react_native_assert.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+#include <react/renderer/components/rncore/ComponentDescriptors.h>
+
+namespace facebook::react {
+
+std::function<void(std::shared_ptr<const ComponentDescriptorProviderRegistry>)>
+    DefaultComponentsRegistry::registerComponentDescriptorsFromEntryPoint{};
+
+DefaultComponentsRegistry::DefaultComponentsRegistry(ComponentFactory* delegate)
+    : delegate_(delegate) {}
+
+std::shared_ptr<const ComponentDescriptorProviderRegistry>
+DefaultComponentsRegistry::sharedProviderRegistry() {
+  auto providerRegistry = CoreComponentsRegistry::sharedProviderRegistry();
+
+  if (DefaultComponentsRegistry::registerComponentDescriptorsFromEntryPoint) {
+    (DefaultComponentsRegistry::registerComponentDescriptorsFromEntryPoint)(
+        providerRegistry);
+  } else {
+    LOG(WARNING)
+        << "Custom component descriptors were not configured from JNI_OnLoad";
+  }
+
+  return providerRegistry;
+}
+
+jni::local_ref<DefaultComponentsRegistry::jhybriddata>
+DefaultComponentsRegistry::initHybrid(
+    jni::alias_ref<jclass>,
+    ComponentFactory* delegate) {
+  auto instance = makeCxxInstance(delegate);
+
+  auto buildRegistryFunction =
+      [](const EventDispatcher::Weak& eventDispatcher,
+         const ContextContainer::Shared& contextContainer)
+      -> ComponentDescriptorRegistry::Shared {
+    ComponentDescriptorParameters params{
+        .eventDispatcher = eventDispatcher,
+        .contextContainer = contextContainer,
+        .flavor = nullptr};
+
+    auto registry = DefaultComponentsRegistry::sharedProviderRegistry()
+                        ->createComponentDescriptorRegistry(params);
+
+    auto& mutableRegistry = const_cast<ComponentDescriptorRegistry&>(*registry);
+    mutableRegistry.setFallbackComponentDescriptor(
+        std::make_shared<UnimplementedNativeViewComponentDescriptor>(params));
+
+    return registry;
+  };
+
+  delegate->buildRegistryFunction = buildRegistryFunction;
+  return instance;
+}
+
+void DefaultComponentsRegistry::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", DefaultComponentsRegistry::initHybrid),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultComponentsRegistry.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultComponentsRegistry.h
new file mode 100644
index 0000000..d1950e8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultComponentsRegistry.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <react/fabric/ComponentFactory.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+#include <react/renderer/componentregistry/ComponentDescriptorRegistry.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+
+namespace facebook::react {
+
+class DefaultComponentsRegistry
+    : public facebook::jni::HybridClass<DefaultComponentsRegistry> {
+ public:
+  constexpr static auto kJavaDescriptor =
+      "Lcom/facebook/react/defaults/DefaultComponentsRegistry;";
+
+  static void registerNatives();
+
+  static std::function<void(
+      std::shared_ptr<const ComponentDescriptorProviderRegistry>)>
+      registerComponentDescriptorsFromEntryPoint;
+
+  DefaultComponentsRegistry(ComponentFactory* delegate);
+
+ private:
+  friend HybridBase;
+
+  static std::shared_ptr<const ComponentDescriptorProviderRegistry>
+  sharedProviderRegistry();
+
+  const ComponentFactory* delegate_;
+
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jclass>,
+      ComponentFactory* delegate);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultTurboModuleManagerDelegate.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultTurboModuleManagerDelegate.cpp
new file mode 100644
index 0000000..e2f8771
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultTurboModuleManagerDelegate.cpp
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "DefaultTurboModuleManagerDelegate.h"
+
+#include <algorithm>
+
+#include <react/nativemodule/defaults/DefaultTurboModules.h>
+
+namespace facebook::react {
+
+DefaultTurboModuleManagerDelegate::DefaultTurboModuleManagerDelegate(
+    jni::alias_ref<jni::JList<CxxReactPackage::javaobject>::javaobject>
+        cxxReactPackages)
+    : cxxReactPackages_() {
+  cxxReactPackages_.reserve(cxxReactPackages->size());
+  std::transform(
+      cxxReactPackages->begin(),
+      cxxReactPackages->end(),
+      std::back_inserter(cxxReactPackages_),
+      [](jni::alias_ref<CxxReactPackage::javaobject> elem) {
+        return jni::make_global(elem);
+      });
+};
+
+std::function<std::shared_ptr<TurboModule>(
+    const std::string&,
+    const std::shared_ptr<CallInvoker>&)>
+    DefaultTurboModuleManagerDelegate::cxxModuleProvider{nullptr};
+
+std::function<std::shared_ptr<TurboModule>(
+    const std::string&,
+    const JavaTurboModule::InitParams&)>
+    DefaultTurboModuleManagerDelegate::javaModuleProvider{nullptr};
+
+jni::local_ref<DefaultTurboModuleManagerDelegate::jhybriddata>
+DefaultTurboModuleManagerDelegate::initHybrid(
+    jni::alias_ref<jclass> jClass,
+    jni::alias_ref<jni::JList<CxxReactPackage::javaobject>::javaobject>
+        cxxReactPackages) {
+  return makeCxxInstance(cxxReactPackages);
+}
+
+void DefaultTurboModuleManagerDelegate::registerNatives() {
+  registerHybrid({
+      makeNativeMethod(
+          "initHybrid", DefaultTurboModuleManagerDelegate::initHybrid),
+  });
+}
+
+std::shared_ptr<TurboModule> DefaultTurboModuleManagerDelegate::getTurboModule(
+    const std::string& name,
+    const std::shared_ptr<CallInvoker>& jsInvoker) {
+  for (const auto& cxxReactPackage : cxxReactPackages_) {
+    auto cppPart = cxxReactPackage->cthis();
+    if (cppPart) {
+      auto module = cppPart->getModule(name, jsInvoker);
+      if (module) {
+        return module;
+      }
+    }
+  }
+
+  auto moduleProvider = DefaultTurboModuleManagerDelegate::cxxModuleProvider;
+  if (moduleProvider) {
+    auto module = moduleProvider(name, jsInvoker);
+    if (module) {
+      return module;
+    }
+  }
+
+  return DefaultTurboModules::getTurboModule(name, jsInvoker);
+}
+
+std::shared_ptr<TurboModule> DefaultTurboModuleManagerDelegate::getTurboModule(
+    const std::string& name,
+    const JavaTurboModule::InitParams& params) {
+  auto moduleProvider = DefaultTurboModuleManagerDelegate::javaModuleProvider;
+  if (moduleProvider) {
+    if (auto resolvedModule = moduleProvider(name, params)) {
+      return resolvedModule;
+    }
+  }
+
+  return nullptr;
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultTurboModuleManagerDelegate.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultTurboModuleManagerDelegate.h
new file mode 100644
index 0000000..099c245
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/DefaultTurboModuleManagerDelegate.h
@@ -0,0 +1,61 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <memory>
+#include <string>
+#include <vector>
+
+#include <ReactCommon/CxxReactPackage.h>
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <ReactCommon/TurboModuleManagerDelegate.h>
+#include <fbjni/fbjni.h>
+
+namespace facebook::react {
+
+class DefaultTurboModuleManagerDelegate : public jni::HybridClass<
+                                              DefaultTurboModuleManagerDelegate,
+                                              TurboModuleManagerDelegate> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/defaults/DefaultTurboModuleManagerDelegate;";
+
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jclass>,
+      jni::alias_ref<jni::JList<CxxReactPackage::javaobject>::javaobject>);
+
+  static void registerNatives();
+
+  static std::function<std::shared_ptr<TurboModule>(
+      const std::string&,
+      const std::shared_ptr<CallInvoker>&)>
+      cxxModuleProvider;
+
+  static std::function<std::shared_ptr<TurboModule>(
+      const std::string&,
+      const JavaTurboModule::InitParams&)>
+      javaModuleProvider;
+
+  std::shared_ptr<TurboModule> getTurboModule(
+      const std::string& name,
+      const std::shared_ptr<CallInvoker>& jsInvoker) override;
+  std::shared_ptr<TurboModule> getTurboModule(
+      const std::string& name,
+      const JavaTurboModule::InitParams& params) override;
+
+ private:
+  friend HybridBase;
+  using HybridBase::HybridBase;
+
+  std::vector<jni::global_ref<CxxReactPackage::javaobject>> cxxReactPackages_;
+
+  DefaultTurboModuleManagerDelegate(
+      jni::alias_ref<jni::JList<CxxReactPackage::javaobject>::javaobject>
+          cxxReactPackage);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/OnLoad.cpp
new file mode 100644
index 0000000..a666756
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/newarchdefaults/OnLoad.cpp
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fbjni/fbjni.h>
+
+#include "DefaultComponentsRegistry.h"
+#include "DefaultTurboModuleManagerDelegate.h"
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*) {
+  return facebook::jni::initialize(vm, [] {
+    facebook::react::DefaultTurboModuleManagerDelegate::registerNatives();
+    facebook::react::DefaultComponentsRegistry::registerNatives();
+  });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/perftests/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/perftests/OnLoad.cpp
new file mode 100644
index 0000000..bd5341c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/perftests/OnLoad.cpp
@@ -0,0 +1,243 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <cxxreact/CxxModule.h>
+#include <cxxreact/JsArgumentHelpers.h>
+#include <fb/log.h>
+#include <fbjni/fbjni.h>
+
+#include <condition_variable>
+#include <mutex>
+
+namespace facebook::react {
+
+using facebook::jni::alias_ref;
+
+namespace {
+
+// This is a wrapper around the Java proxy to the javascript module. This
+// allows us to call functions on the js module from c++.  Are you seeing
+// crashes in this class?  Android 6+ crashes when you try to call a
+// method on a Proxy.  Switch to an older version of Android.  If you're
+// really desperate, you can fix this by using ToReflectedMethod on the
+// underlying jmethodid and invoking that.
+class JavaJSModule : public jni::JavaClass<JavaJSModule> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/CatalystBridgeBenchmarks$BridgeBenchmarkModule;";
+
+  static void bounceCxx(alias_ref<javaobject> obj, int iters) {
+    static auto method = javaClassLocal()->getMethod<void(jint)>("bounceCxx");
+    method(obj, iters);
+  }
+
+  static void bounceArgsCxx(
+      alias_ref<javaobject> obj,
+      int iters,
+      int a,
+      int b,
+      double x,
+      double y,
+      const std::string& s,
+      const std::string& t) {
+    static auto method =
+        javaClassLocal()
+            ->getMethod<void(
+                jint, jint, jint, jdouble, jdouble, jstring, jstring)>(
+                "bounceArgsCxx");
+    method(
+        obj,
+        iters,
+        a,
+        b,
+        x,
+        y,
+        jni::make_jstring(s).get(),
+        jni::make_jstring(t).get());
+  }
+};
+
+// This is just the test instance itself. Used only to countdown the latch.
+class CatalystBridgeBenchmarks
+    : public jni::JavaClass<CatalystBridgeBenchmarks> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/CatalystBridgeBenchmarks;";
+
+  static void countDown(alias_ref<javaobject> obj) {
+    static auto method = javaClassLocal()->getMethod<void()>("countDown");
+    method(obj);
+  }
+};
+
+// This is the shared data for two cxx bounce threads.
+struct Data {
+  std::mutex m;
+  std::condition_variable cv;
+  bool leftActive;
+  Data() : leftActive(true) {}
+};
+Data data;
+
+void runBounce(jni::alias_ref<jclass>, bool isLeft, int iters) {
+  for (int i = 0; i < iters; i++) {
+    std::unique_lock<std::mutex> lk(data.m);
+    data.cv.wait(lk, [&] { return data.leftActive == isLeft; });
+    data.leftActive = !isLeft;
+    data.cv.notify_one();
+  }
+}
+
+static jni::global_ref<JavaJSModule::javaobject> jsModule;
+static jni::global_ref<CatalystBridgeBenchmarks::javaobject> javaTestInstance;
+
+class CxxBenchmarkModule : public xplat::module::CxxModule {
+ public:
+  virtual std::string getName() override {
+    return "CxxBenchmarkModule";
+  }
+
+  virtual auto getConstants()
+      -> std::map<std::string, folly::dynamic> override {
+    return std::map<std::string, folly::dynamic>();
+  }
+
+  virtual auto getMethods() -> std::vector<Method> override {
+    return std::vector<Method>{
+        Method(
+            "bounce",
+            [this](folly::dynamic args) {
+              this->bounce(xplat::jsArgAsInt(args, 0));
+            }),
+        Method(
+            "bounceArgs",
+            [this](folly::dynamic args) {
+              this->bounceArgs(
+                  xplat::jsArgAsInt(args, 0),
+                  xplat::jsArgAsInt(args, 1),
+                  xplat::jsArgAsInt(args, 2),
+                  xplat::jsArgAsDouble(args, 3),
+                  xplat::jsArgAsDouble(args, 4),
+                  xplat::jsArgAsString(args, 5),
+                  xplat::jsArgAsString(args, 6));
+            }),
+    };
+  }
+
+  void bounce(int iters) {
+    if (iters == 0) {
+      CatalystBridgeBenchmarks::countDown(javaTestInstance);
+    } else {
+      JavaJSModule::bounceCxx(jsModule, iters - 1);
+    }
+  }
+
+  void bounceArgs(
+      int iters,
+      int a,
+      int b,
+      double x,
+      double y,
+      const std::string& s,
+      const std::string& t) {
+    if (iters == 0) {
+      CatalystBridgeBenchmarks::countDown(javaTestInstance);
+    } else {
+      JavaJSModule::bounceArgsCxx(jsModule, iters - 1, a, b, x, y, s, t);
+    }
+  }
+};
+
+void setUp(
+    alias_ref<CatalystBridgeBenchmarks::javaobject> obj,
+    alias_ref<JavaJSModule::javaobject> mod) {
+  javaTestInstance = jni::make_global(obj);
+  jsModule = jni::make_global(mod);
+}
+
+void tearDown(alias_ref<CatalystBridgeBenchmarks::javaobject>) {
+  javaTestInstance.reset();
+  jsModule.reset();
+}
+
+namespace logwatcher {
+
+static std::string gMessageToLookFor;
+static int gMessagePriorityToLookFor;
+static bool gHasSeenMessage = false;
+
+/**
+ * NB: Don't put JNI logic (or anything else that could trigger a log) here!
+ */
+static void stubLogHandler(int pri, const char* tag, const char* msg) {
+  if (gMessageToLookFor.empty()) {
+    return;
+  }
+
+  bool priorityMatches = pri == gMessagePriorityToLookFor;
+  bool substringFound = strstr(msg, gMessageToLookFor.c_str()) != NULL;
+  gHasSeenMessage |= priorityMatches && substringFound;
+}
+
+static jboolean hasSeenExpectedLogMessage(JNIEnv*, jclass) {
+  return gHasSeenMessage ? JNI_TRUE : JNI_FALSE;
+}
+
+static void stopWatchingLogMessages(JNIEnv*, jclass) {
+  gMessageToLookFor = "";
+  gHasSeenMessage = false;
+  setLogHandler(NULL);
+}
+
+static void startWatchingForLogMessage(
+    JNIEnv* env,
+    jclass loggerClass,
+    jstring jmsg,
+    jint priority) {
+  stopWatchingLogMessages(env, loggerClass);
+  gMessageToLookFor = jni::wrap_alias(jmsg)->toStdString();
+  gMessagePriorityToLookFor = priority;
+  setLogHandler(&stubLogHandler);
+}
+
+} // namespace logwatcher
+} // namespace
+} // namespace facebook::react
+
+using namespace facebook::react;
+
+extern "C" facebook::xplat::module::CxxModule* CxxBenchmarkModule() {
+  return new facebook::react::CxxBenchmarkModule();
+}
+
+extern "C" jint JNI_OnLoad(JavaVM* vm, void*) {
+  return facebook::jni::initialize(vm, [] {
+    facebook::jni::registerNatives(
+        "com/facebook/catalyst/testing/LogWatcher",
+        {
+            makeNativeMethod(
+                "startWatchingForLogMessage",
+                "(Ljava/lang/String;I)V",
+                logwatcher::startWatchingForLogMessage),
+            makeNativeMethod(
+                "stopWatchingLogMessages",
+                "()V",
+                logwatcher::stopWatchingLogMessages),
+            makeNativeMethod(
+                "hasSeenExpectedLogMessage",
+                "()Z",
+                logwatcher::hasSeenExpectedLogMessage),
+        });
+    facebook::jni::registerNatives(
+        "com/facebook/react/CatalystBridgeBenchmarks",
+        {
+            makeNativeMethod("runNativeBounce", runBounce),
+            makeNativeMethod("nativeSetUp", setUp),
+            makeNativeMethod("nativeTearDown", tearDown),
+        });
+  });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/BlobCollector.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/BlobCollector.cpp
new file mode 100644
index 0000000..9b8f80c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/BlobCollector.cpp
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "BlobCollector.h"
+
+#include <fbjni/fbjni.h>
+#include <memory>
+#include <mutex>
+
+using namespace facebook;
+
+namespace facebook::react {
+
+static constexpr auto kBlobModuleJavaDescriptor =
+    "com/facebook/react/modules/blob/BlobModule";
+
+BlobCollector::BlobCollector(
+    jni::global_ref<jobject> blobModule,
+    const std::string& blobId)
+    : blobModule_(blobModule), blobId_(blobId) {}
+
+BlobCollector::~BlobCollector() {
+  jni::ThreadScope::WithClassLoader([&] {
+    static auto removeMethod = jni::findClassStatic(kBlobModuleJavaDescriptor)
+                                   ->getMethod<void(jstring)>("remove");
+    removeMethod(blobModule_, jni::make_jstring(blobId_).get());
+    blobModule_.reset();
+  });
+}
+
+size_t BlobCollector::getBlobLength() {
+  static auto getLengthMethod =
+      jni::findClassStatic(kBlobModuleJavaDescriptor)
+          ->getMethod<jlong(jstring)>("getLengthOfBlob");
+  auto length = getLengthMethod(blobModule_, jni::make_jstring(blobId_).get());
+  return static_cast<size_t>(length);
+}
+
+void BlobCollector::nativeInstall(
+    jni::alias_ref<jclass>,
+    jni::alias_ref<jobject> blobModule,
+    jlong jsContextNativePointer) {
+  auto& runtime = *((jsi::Runtime*)jsContextNativePointer);
+  auto blobModuleRef = jni::make_global(blobModule);
+  runtime.global().setProperty(
+      runtime,
+      "__blobCollectorProvider",
+      jsi::Function::createFromHostFunction(
+          runtime,
+          jsi::PropNameID::forAscii(runtime, "__blobCollectorProvider"),
+          1,
+          [blobModuleRef](
+              jsi::Runtime& rt,
+              const jsi::Value& thisVal,
+              const jsi::Value* args,
+              size_t count) {
+            auto blobId = args[0].asString(rt).utf8(rt);
+            auto blobCollector =
+                std::make_shared<BlobCollector>(blobModuleRef, blobId);
+            auto blobCollectorJsObject =
+                jsi::Object::createFromHostObject(rt, blobCollector);
+            blobCollectorJsObject.setExternalMemoryPressure(
+                rt, blobCollector->getBlobLength());
+            return blobCollectorJsObject;
+          }));
+}
+
+void BlobCollector::registerNatives() {
+  registerHybrid(
+      {makeNativeMethod("nativeInstall", BlobCollector::nativeInstall)});
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/BlobCollector.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/BlobCollector.h
new file mode 100644
index 0000000..17046b4
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/BlobCollector.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <jsi/jsi.h>
+
+namespace facebook::react {
+
+class BlobCollector : public jni::HybridClass<BlobCollector>,
+                      public jsi::HostObject {
+ public:
+  BlobCollector(jni::global_ref<jobject> blobModule, const std::string& blobId);
+  ~BlobCollector();
+
+  size_t getBlobLength();
+
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/modules/blob/BlobCollector;";
+
+  static void nativeInstall(
+      jni::alias_ref<jclass>,
+      jni::alias_ref<jobject> blobModule,
+      jlong jsContextNativePointer);
+
+  static void registerNatives();
+
+ private:
+  friend HybridBase;
+
+  jni::global_ref<jobject> blobModule_;
+  const std::string blobId_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/CMakeLists.txt
new file mode 100644
index 0000000..d28871f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/CMakeLists.txt
@@ -0,0 +1,22 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-fvisibility=hidden -fexceptions -frtti)
+
+file(GLOB reactnativeblob_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
+add_library(reactnativeblob SHARED ${reactnativeblob_SRC})
+
+target_include_directories(reactnativeblob PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
+
+target_link_libraries(reactnativeblob
+        jsireact
+        fb
+        fbjni
+        folly_runtime
+        jsi
+        reactnativejni)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/OnLoad.cpp
new file mode 100644
index 0000000..ded8547
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactnativeblob/OnLoad.cpp
@@ -0,0 +1,15 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fbjni/fbjni.h>
+
+#include "BlobCollector.h"
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
+  return facebook::jni::initialize(
+      vm, [] { facebook::react::BlobCollector::registerNatives(); });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactperflogger/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactperflogger/CMakeLists.txt
new file mode 100644
index 0000000..d65bb29
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactperflogger/CMakeLists.txt
@@ -0,0 +1,23 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-fexceptions -frtti -std=c++20 -Wall)
+
+add_library(reactperfloggerjni INTERFACE)
+
+target_include_directories(reactperfloggerjni
+        INTERFACE
+          ${CMAKE_CURRENT_SOURCE_DIR}
+)
+
+target_link_libraries(reactperfloggerjni
+        INTERFACE
+        fb
+        fbjni
+        android
+        reactperflogger)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactperflogger/reactperflogger/JNativeModulePerfLogger.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactperflogger/reactperflogger/JNativeModulePerfLogger.h
new file mode 100644
index 0000000..3081409
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/reactperflogger/reactperflogger/JNativeModulePerfLogger.h
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <reactperflogger/NativeModulePerfLogger.h>
+#include <memory>
+
+namespace facebook::react {
+
+class JNativeModulePerfLogger
+    : public jni::HybridClass<JNativeModulePerfLogger> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/reactperflogger/NativeModulePerfLogger;";
+
+  virtual std::unique_ptr<facebook::react::NativeModulePerfLogger> get() = 0;
+
+ private:
+  friend HybridBase;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/CMakeLists.txt
new file mode 100644
index 0000000..1848f35
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/CMakeLists.txt
@@ -0,0 +1,29 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+file(GLOB_RECURSE hermes_instance_jni_SRC CONFIGURE_DEPENDS *.cpp)
+
+add_library(hermesinstancejni
+        SHARED
+        ${hermes_instance_jni_SRC}
+)
+target_compile_options(
+        hermesinstancejni
+        PRIVATE
+        $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>
+        -std=c++20
+        -fexceptions
+)
+target_include_directories(hermesinstancejni PRIVATE .)
+target_link_libraries(
+        hermesinstancejni
+        hermes-engine::libhermes
+        rninstance
+        fbjni
+        bridgelesshermes
+)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/JHermesInstance.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/JHermesInstance.cpp
new file mode 100644
index 0000000..deabc52
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/JHermesInstance.cpp
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JHermesInstance.h"
+
+#include <fbjni/fbjni.h>
+#include <react/fabric/ReactNativeConfigHolder.h>
+
+namespace facebook::react {
+
+jni::local_ref<JHermesInstance::jhybriddata> JHermesInstance::initHybrid(
+    jni::alias_ref<jclass> /* unused */,
+    jni::alias_ref<jobject> reactNativeConfig) {
+  std::shared_ptr<const ReactNativeConfig> config = reactNativeConfig != nullptr
+      ? std::make_shared<const ReactNativeConfigHolder>(reactNativeConfig)
+      : nullptr;
+
+  return makeCxxInstance(config);
+}
+
+void JHermesInstance::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", JHermesInstance::initHybrid),
+  });
+}
+
+std::unique_ptr<JSRuntime> JHermesInstance::createJSRuntime(
+    std::shared_ptr<MessageQueueThread> msgQueueThread) noexcept {
+  return HermesInstance::createJSRuntime(
+      reactNativeConfig_, nullptr, msgQueueThread);
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/JHermesInstance.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/JHermesInstance.h
new file mode 100644
index 0000000..5ee3450
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/JHermesInstance.h
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <memory>
+
+#include <cxxreact/MessageQueueThread.h>
+#include <fbjni/fbjni.h>
+#include <jni.h>
+#include <jsi/jsi.h>
+#include <react/config/ReactNativeConfig.h>
+#include <react/runtime/JSRuntimeFactory.h>
+#include <react/runtime/hermes/HermesInstance.h>
+#include "../../jni/JJSRuntimeFactory.h"
+
+namespace facebook::react {
+
+class JHermesInstance
+    : public jni::HybridClass<JHermesInstance, JJSRuntimeFactory> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/runtime/hermes/HermesInstance;";
+
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jclass> /* unused */,
+      jni::alias_ref<jobject> reactNativeConfig);
+
+  static void registerNatives();
+
+  JHermesInstance(std::shared_ptr<const ReactNativeConfig> reactNativeConfig)
+      : reactNativeConfig_(reactNativeConfig){};
+
+  std::unique_ptr<JSRuntime> createJSRuntime(
+      std::shared_ptr<MessageQueueThread> msgQueueThread) noexcept;
+
+  ~JHermesInstance() {}
+
+ private:
+  friend HybridBase;
+
+  std::shared_ptr<const ReactNativeConfig> reactNativeConfig_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/OnLoad.cpp
new file mode 100644
index 0000000..7dd0dd1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/hermes/jni/OnLoad.cpp
@@ -0,0 +1,15 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fbjni/fbjni.h>
+
+#include "JHermesInstance.h"
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*) {
+  return facebook::jni::initialize(
+      vm, [] { facebook::react::JHermesInstance::registerNatives(); });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/CMakeLists.txt
new file mode 100644
index 0000000..f618197
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/CMakeLists.txt
@@ -0,0 +1,32 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+file(GLOB_RECURSE bridgeless_jni_SRC CONFIGURE_DEPENDS *.cpp)
+
+add_library(rninstance
+        SHARED
+        ${bridgeless_jni_SRC}
+)
+target_compile_options(
+        rninstance
+        PRIVATE
+        $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>
+        -std=c++20
+        -fexceptions
+)
+target_include_directories(rninstance PUBLIC .)
+target_link_libraries(
+        rninstance
+        fabricjni
+        react_featureflagsjni
+        turbomodulejsijni
+        fb
+        jsi
+        fbjni
+        bridgeless
+)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JBindingsInstaller.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JBindingsInstaller.h
new file mode 100644
index 0000000..fb83833
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JBindingsInstaller.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <jni.h>
+#include <jsi/jsi.h>
+#include <react/runtime/BindingsInstaller.h>
+#include <react/runtime/ReactInstance.h>
+
+namespace facebook {
+namespace react {
+
+class JBindingsInstaller : public jni::HybridClass<JBindingsInstaller>,
+                           public BindingsInstaller {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/runtime/BindingsInstaller;";
+
+  ~JBindingsInstaller() {}
+
+ private:
+  friend HybridBase;
+};
+
+} // namespace react
+} // namespace facebook
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJSTimerExecutor.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJSTimerExecutor.cpp
new file mode 100644
index 0000000..0e2a390
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJSTimerExecutor.cpp
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JJSTimerExecutor.h"
+
+#include <fbjni/fbjni.h>
+#include <jni.h>
+
+namespace facebook::react {
+
+void JJSTimerExecutor::setTimerManager(
+    std::weak_ptr<TimerManager> timerManager) {
+  timerManager_ = timerManager;
+}
+
+void JJSTimerExecutor::callTimers(WritableNativeArray* timerIDs) {
+  if (auto timerManager = timerManager_.lock()) {
+    for (const auto& timerID : timerIDs->consume()) {
+      timerManager->callTimer((uint32_t)timerID.asInt());
+    }
+  }
+}
+
+void JJSTimerExecutor::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("callTimers", JJSTimerExecutor::callTimers),
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJSTimerExecutor.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJSTimerExecutor.h
new file mode 100644
index 0000000..cc7d938
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJSTimerExecutor.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <ReactCommon/RuntimeExecutor.h>
+#include <fbjni/fbjni.h>
+#include <jni.h>
+#include <react/jni/WritableNativeArray.h>
+#include <react/runtime/TimerManager.h>
+
+namespace facebook::react {
+
+class JJSTimerExecutor : public jni::HybridClass<JJSTimerExecutor> {
+ public:
+  JJSTimerExecutor() = default;
+
+  constexpr static auto kJavaDescriptor =
+      "Lcom/facebook/react/runtime/JSTimerExecutor;";
+
+  static void registerNatives();
+
+  void setTimerManager(std::weak_ptr<TimerManager> timerManager);
+
+  void callTimers(WritableNativeArray* timerIDs);
+
+ private:
+  friend HybridBase;
+
+  std::weak_ptr<TimerManager> timerManager_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJavaTimerManager.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJavaTimerManager.cpp
new file mode 100644
index 0000000..b54da9b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJavaTimerManager.cpp
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JJavaTimerManager.h"
+
+#include <fbjni/fbjni.h>
+#include <jni.h>
+
+namespace facebook::react {
+
+void JJavaTimerManager::createTimer(
+    uint32_t timerID,
+    double duration,
+    bool repeat) {
+  static const auto method =
+      javaClassStatic()->getMethod<void(jint, jlong, jboolean)>("createTimer");
+  method(self(), timerID, (long)duration, static_cast<unsigned char>(repeat));
+}
+
+void JJavaTimerManager::deleteTimer(uint32_t timerID) {
+  static const auto method =
+      javaClassStatic()->getMethod<void(jint)>("deleteTimer");
+  method(self(), timerID);
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJavaTimerManager.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJavaTimerManager.h
new file mode 100644
index 0000000..e576a1f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JJavaTimerManager.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <cstdint>
+
+#include <fbjni/fbjni.h>
+#include <jni.h>
+
+namespace facebook::react {
+
+struct JJavaTimerManager : jni::JavaClass<JJavaTimerManager> {
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/modules/core/JavaTimerManager;";
+
+  void createTimer(uint32_t timerID, double duration, bool repeat);
+
+  void deleteTimer(uint32_t timerID);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactExceptionManager.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactExceptionManager.cpp
new file mode 100644
index 0000000..157c3eb
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactExceptionManager.cpp
@@ -0,0 +1,66 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JReactExceptionManager.h"
+#include <fbjni/fbjni.h>
+#include <glog/logging.h>
+#include <jni.h>
+
+namespace facebook::react {
+
+namespace {
+class ParsedError : public facebook::jni::JavaClass<ParsedError> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/interfaces/exceptionmanager/ReactJsExceptionHandler$ParsedError;";
+};
+
+class ParsedStackFrameImpl
+    : public facebook::jni::JavaClass<ParsedStackFrameImpl> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/interfaces/exceptionmanager/ReactJsExceptionHandler$ParsedStackFrameImpl;";
+
+  static facebook::jni::local_ref<ParsedStackFrameImpl> create(
+      const JsErrorHandler::ParsedError::StackFrame& frame) {
+    return newInstance(
+        frame.fileName, frame.methodName, frame.lineNumber, frame.columnNumber);
+  }
+};
+
+class ParsedErrorImpl
+    : public facebook::jni::JavaClass<ParsedErrorImpl, ParsedError> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/interfaces/exceptionmanager/ReactJsExceptionHandler$ParsedErrorImpl;";
+
+  static facebook::jni::local_ref<ParsedErrorImpl> create(
+      const JsErrorHandler::ParsedError& error) {
+    auto stackFrames =
+        facebook::jni::JArrayList<ParsedStackFrameImpl>::create();
+    for (const auto& frame : error.frames) {
+      stackFrames->add(ParsedStackFrameImpl::create(frame));
+    }
+
+    return newInstance(
+        stackFrames, error.message, error.exceptionId, error.isFatal);
+  }
+};
+
+} // namespace
+
+void JReactExceptionManager::reportJsException(
+    const JsErrorHandler::ParsedError& error) {
+  static const auto method =
+      javaClassStatic()->getMethod<void(jni::alias_ref<ParsedError>)>(
+          "reportJsException");
+  if (self() != nullptr) {
+    method(self(), ParsedErrorImpl::create(error));
+  }
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactExceptionManager.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactExceptionManager.h
new file mode 100644
index 0000000..3261545
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactExceptionManager.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <fbjni/fbjni.h>
+#include <jni.h>
+#include <jserrorhandler/JsErrorHandler.h>
+
+namespace facebook::react {
+
+class JReactExceptionManager
+    : public facebook::jni::JavaClass<JReactExceptionManager> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/interfaces/exceptionmanager/ReactJsExceptionHandler;";
+
+  void reportJsException(const JsErrorHandler::ParsedError& error);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactInstance.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactInstance.cpp
new file mode 100644
index 0000000..8bd5ebc
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactInstance.cpp
@@ -0,0 +1,253 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JReactInstance.h"
+
+#ifdef WITH_FBSYSTRACE
+#include <fbsystrace.h>
+#endif
+
+#include <cxxreact/JSBigString.h>
+#include <cxxreact/RecoverableError.h>
+#include <fbjni/fbjni.h>
+#include <glog/logging.h>
+#include <jni.h>
+#include <jsi/jsi.h>
+#include <jsireact/JSIExecutor.h>
+#include <react/jni/JRuntimeExecutor.h>
+#include <react/jni/JSLogging.h>
+#include <react/renderer/runtimescheduler/RuntimeSchedulerCallInvoker.h>
+#include <react/runtime/BridgelessNativeMethodCallInvoker.h>
+#include "JavaTimerRegistry.h"
+
+namespace facebook::react {
+
+JReactInstance::JReactInstance(
+    jni::alias_ref<JJSRuntimeFactory::javaobject> jsRuntimeFactory,
+    jni::alias_ref<JavaMessageQueueThread::javaobject> jsMessageQueueThread,
+    jni::alias_ref<JavaMessageQueueThread::javaobject> nativeMessageQueueThread,
+    jni::alias_ref<JJavaTimerManager::javaobject> javaTimerManager,
+    jni::alias_ref<JJSTimerExecutor::javaobject> jsTimerExecutor,
+    jni::alias_ref<JReactExceptionManager::javaobject> jReactExceptionManager,
+    jni::alias_ref<JBindingsInstaller::javaobject> jBindingsInstaller,
+    bool isProfiling,
+    jni::alias_ref<JReactHostInspectorTarget::javaobject>
+        jReactHostInspectorTarget) noexcept {
+  // TODO(janzer): Lazily create runtime
+  auto sharedJSMessageQueueThread =
+      std::make_shared<JMessageQueueThread>(jsMessageQueueThread);
+  auto sharedNativeMessageQueueThread =
+      std::make_shared<JMessageQueueThread>(nativeMessageQueueThread);
+
+  // Create the timer manager (for JS timers)
+  auto timerRegistry =
+      std::make_unique<JavaTimerRegistry>(jni::make_global(javaTimerManager));
+  auto timerManager = std::make_shared<TimerManager>(std::move(timerRegistry));
+  jsTimerExecutor->cthis()->setTimerManager(timerManager);
+
+  jReactExceptionManager_ = jni::make_global(jReactExceptionManager);
+  auto onJsError =
+      [weakJReactExceptionManager = jni::make_weak(jReactExceptionManager)](
+          const JsErrorHandler::ParsedError& error) mutable noexcept {
+        if (auto jReactExceptionManager =
+                weakJReactExceptionManager.lockLocal()) {
+          jReactExceptionManager->reportJsException(error);
+        }
+      };
+
+  jBindingsInstaller_ = jni::make_global(jBindingsInstaller);
+
+  instance_ = std::make_unique<ReactInstance>(
+      jsRuntimeFactory->cthis()->createJSRuntime(sharedJSMessageQueueThread),
+      sharedJSMessageQueueThread,
+      timerManager,
+      std::move(onJsError),
+      jReactHostInspectorTarget
+          ? jReactHostInspectorTarget->cthis()->getInspectorTarget()
+          : nullptr);
+
+  auto bufferedRuntimeExecutor = instance_->getBufferedRuntimeExecutor();
+  timerManager->setRuntimeExecutor(bufferedRuntimeExecutor);
+
+  ReactInstance::JSRuntimeFlags options = {.isProfiling = isProfiling};
+  instance_->initializeRuntime(options, [this](jsi::Runtime& runtime) {
+    react::Logger androidLogger =
+        static_cast<void (*)(const std::string&, unsigned int)>(
+            &reactAndroidLoggingHook);
+    react::bindNativeLogger(runtime, androidLogger);
+    if (jBindingsInstaller_ != nullptr) {
+      auto appBindingInstaller =
+          jBindingsInstaller_->cthis()->getBindingsInstallFunc();
+      if (appBindingInstaller != nullptr) {
+        appBindingInstaller(runtime);
+      }
+    }
+  });
+
+  auto unbufferedRuntimeExecutor = instance_->getUnbufferedRuntimeExecutor();
+  // Set up the JS and native modules call invokers (for TurboModules)
+  auto jsInvoker = std::make_unique<RuntimeSchedulerCallInvoker>(
+      instance_->getRuntimeScheduler());
+  jsCallInvokerHolder_ = jni::make_global(
+      CallInvokerHolder::newObjectCxxArgs(std::move(jsInvoker)));
+  auto nativeMethodCallInvoker =
+      std::make_unique<BridgelessNativeMethodCallInvoker>(
+          sharedNativeMessageQueueThread);
+  nativeMethodCallInvokerHolder_ =
+      jni::make_global(NativeMethodCallInvokerHolder::newObjectCxxArgs(
+          std::move(nativeMethodCallInvoker)));
+
+  // Storing this here to make sure the Java reference doesn't get destroyed
+  unbufferedRuntimeExecutor_ = jni::make_global(
+      JRuntimeExecutor::newObjectCxxArgs(unbufferedRuntimeExecutor));
+  bufferedRuntimeExecutor_ = jni::make_global(
+      JRuntimeExecutor::newObjectCxxArgs(bufferedRuntimeExecutor));
+  runtimeScheduler_ = jni::make_global(
+      JRuntimeScheduler::newObjectCxxArgs(instance_->getRuntimeScheduler()));
+}
+
+jni::local_ref<JReactInstance::jhybriddata> JReactInstance::initHybrid(
+    jni::alias_ref<jhybridobject> /* unused */,
+    jni::alias_ref<JJSRuntimeFactory::javaobject> jsRuntimeFactory,
+    jni::alias_ref<JavaMessageQueueThread::javaobject> jsMessageQueueThread,
+    jni::alias_ref<JavaMessageQueueThread::javaobject> nativeMessageQueueThread,
+    jni::alias_ref<JJavaTimerManager::javaobject> javaTimerManager,
+    jni::alias_ref<JJSTimerExecutor::javaobject> jsTimerExecutor,
+    jni::alias_ref<JReactExceptionManager::javaobject> jReactExceptionManager,
+    jni::alias_ref<JBindingsInstaller::javaobject> jBindingsInstaller,
+    bool isProfiling,
+    jni::alias_ref<JReactHostInspectorTarget::javaobject>
+        jReactHostInspectorTarget) {
+  return makeCxxInstance(
+      jsRuntimeFactory,
+      jsMessageQueueThread,
+      nativeMessageQueueThread,
+      javaTimerManager,
+      jsTimerExecutor,
+      jReactExceptionManager,
+      jBindingsInstaller,
+      isProfiling,
+      jReactHostInspectorTarget);
+}
+
+void JReactInstance::loadJSBundleFromAssets(
+    jni::alias_ref<JAssetManager::javaobject> assetManager,
+    const std::string& assetURL) {
+  const int kAssetsLength = 9; // strlen("assets://");
+  auto sourceURL = assetURL.substr(kAssetsLength);
+
+  auto manager = extractAssetManager(assetManager);
+  auto script = loadScriptFromAssets(manager, sourceURL);
+  instance_->loadScript(std::move(script), sourceURL);
+}
+
+void JReactInstance::loadJSBundleFromFile(
+    const std::string& fileName,
+    const std::string& sourceURL) {
+  std::unique_ptr<const JSBigFileString> script;
+  RecoverableError::runRethrowingAsRecoverable<std::system_error>(
+      [&fileName, &script]() { script = JSBigFileString::fromPath(fileName); });
+  instance_->loadScript(std::move(script), sourceURL);
+}
+
+/**
+ * This is needed to initialize TurboModules; in the future this will be
+ * replaced with something similar to runtimeExecutor, which we'll use for
+ * Fabric as well.
+ * TODO T44251068 Replace with runtimeExecutor
+ */
+jni::alias_ref<CallInvokerHolder::javaobject>
+JReactInstance::getJSCallInvokerHolder() {
+  return jsCallInvokerHolder_;
+}
+
+jni::alias_ref<NativeMethodCallInvokerHolder::javaobject>
+JReactInstance::getNativeMethodCallInvokerHolder() {
+  return nativeMethodCallInvokerHolder_;
+}
+
+jni::global_ref<JJSTimerExecutor::javaobject>
+JReactInstance::createJSTimerExecutor(
+    jni::alias_ref<jhybridobject> /* unused */) {
+  return jni::make_global(JJSTimerExecutor::newObjectCxxArgs());
+}
+
+void JReactInstance::callFunctionOnModule(
+    const std::string& moduleName,
+    const std::string& methodName,
+    NativeArray* args) {
+  instance_->callFunctionOnModule(moduleName, methodName, args->consume());
+}
+
+jni::alias_ref<JRuntimeExecutor::javaobject>
+JReactInstance::getUnbufferedRuntimeExecutor() noexcept {
+  return unbufferedRuntimeExecutor_;
+}
+
+jni::alias_ref<JRuntimeExecutor::javaobject>
+JReactInstance::getBufferedRuntimeExecutor() noexcept {
+  return bufferedRuntimeExecutor_;
+}
+
+jni::alias_ref<JRuntimeScheduler::javaobject>
+JReactInstance::getRuntimeScheduler() noexcept {
+  return runtimeScheduler_;
+}
+
+void JReactInstance::registerSegment(
+    int segmentId,
+    const std::string& segmentPath) noexcept {
+  instance_->registerSegment((uint32_t)segmentId, segmentPath);
+}
+
+void JReactInstance::handleMemoryPressureJs(jint level) {
+  instance_->handleMemoryPressureJs(level);
+}
+
+jlong JReactInstance::getJavaScriptContext() {
+  return (jlong)(intptr_t)instance_->getJavaScriptContext();
+}
+
+void JReactInstance::unregisterFromInspector() {
+  instance_->unregisterFromInspector();
+}
+
+void JReactInstance::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", JReactInstance::initHybrid),
+      makeNativeMethod(
+          "createJSTimerExecutor", JReactInstance::createJSTimerExecutor),
+      makeNativeMethod(
+          "loadJSBundleFromAssets", JReactInstance::loadJSBundleFromAssets),
+      makeNativeMethod(
+          "loadJSBundleFromFile", JReactInstance::loadJSBundleFromFile),
+      makeNativeMethod(
+          "getJSCallInvokerHolder", JReactInstance::getJSCallInvokerHolder),
+      makeNativeMethod(
+          "getNativeMethodCallInvokerHolder",
+          JReactInstance::getNativeMethodCallInvokerHolder),
+      makeNativeMethod(
+          "callFunctionOnModule", JReactInstance::callFunctionOnModule),
+      makeNativeMethod(
+          "getUnbufferedRuntimeExecutor",
+          JReactInstance::getUnbufferedRuntimeExecutor),
+      makeNativeMethod(
+          "getBufferedRuntimeExecutor",
+          JReactInstance::getBufferedRuntimeExecutor),
+      makeNativeMethod(
+          "getRuntimeScheduler", JReactInstance::getRuntimeScheduler),
+      makeNativeMethod(
+          "registerSegmentNative", JReactInstance::registerSegment),
+      makeNativeMethod(
+          "handleMemoryPressureJs", JReactInstance::handleMemoryPressureJs),
+      makeNativeMethod(
+          "getJavaScriptContext", JReactInstance::getJavaScriptContext),
+      makeNativeMethod(
+          "unregisterFromInspector", JReactInstance::unregisterFromInspector),
+  });
+}
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactInstance.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactInstance.h
new file mode 100644
index 0000000..d6552a8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JReactInstance.h
@@ -0,0 +1,119 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <ReactCommon/CallInvokerHolder.h>
+#include <ReactCommon/NativeMethodCallInvokerHolder.h>
+#include <ReactCommon/RuntimeExecutor.h>
+#include <fbjni/fbjni.h>
+#include <jni.h>
+#include <jsi/jsi.h>
+#include <react/jni/JMessageQueueThread.h>
+#include <react/jni/JRuntimeExecutor.h>
+#include <react/jni/JRuntimeScheduler.h>
+#include <react/jni/JSLoader.h>
+#include <react/jni/ReadableNativeMap.h>
+#include <react/runtime/JSRuntimeFactory.h>
+#include <react/runtime/PlatformTimerRegistry.h>
+#include <react/runtime/ReactInstance.h>
+
+#include "JBindingsInstaller.h"
+#include "JJSRuntimeFactory.h"
+#include "JJSTimerExecutor.h"
+#include "JJavaTimerManager.h"
+#include "JReactExceptionManager.h"
+#include "JReactHostInspectorTarget.h"
+
+namespace facebook::react {
+
+class JReactInstance : public jni::HybridClass<JReactInstance> {
+ public:
+  constexpr static auto kJavaDescriptor =
+      "Lcom/facebook/react/runtime/ReactInstance;";
+
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jhybridobject>,
+      jni::alias_ref<JJSRuntimeFactory::javaobject> jsRuntimeFactory,
+      jni::alias_ref<JavaMessageQueueThread::javaobject> jsMessageQueueThread,
+      jni::alias_ref<JavaMessageQueueThread::javaobject>
+          nativeMessageQueueThread,
+      jni::alias_ref<JJavaTimerManager::javaobject> javaTimerManager,
+      jni::alias_ref<JJSTimerExecutor::javaobject> jsTimerExecutor,
+      jni::alias_ref<JReactExceptionManager::javaobject> jReactExceptionManager,
+      jni::alias_ref<JBindingsInstaller::javaobject> jBindingsInstaller,
+      bool isProfiling,
+      jni::alias_ref<JReactHostInspectorTarget::javaobject>
+          jReactHostInspectorTarget);
+
+  /*
+   * Instantiates and returns an instance of `JSTimerExecutor`.
+   */
+  static jni::global_ref<JJSTimerExecutor::javaobject> createJSTimerExecutor(
+      jni::alias_ref<jhybridobject> /* unused */);
+
+  static void registerNatives();
+
+  void loadJSBundleFromAssets(
+      jni::alias_ref<JAssetManager::javaobject> assetManager,
+      const std::string& assetURL);
+
+  void loadJSBundleFromFile(
+      const std::string& fileName,
+      const std::string& sourceURL);
+
+  void callFunctionOnModule(
+      const std::string& moduleName,
+      const std::string& methodName,
+      NativeArray* args);
+
+  jni::alias_ref<JRuntimeExecutor::javaobject>
+  getUnbufferedRuntimeExecutor() noexcept;
+  jni::alias_ref<JRuntimeExecutor::javaobject>
+  getBufferedRuntimeExecutor() noexcept;
+  jni::alias_ref<JRuntimeScheduler::javaobject> getRuntimeScheduler() noexcept;
+
+  void registerSegment(int segmentId, const std::string& segmentPath) noexcept;
+
+  void handleMemoryPressureJs(jint level);
+
+  void unregisterFromInspector();
+
+ private:
+  friend HybridBase;
+
+  explicit JReactInstance(
+      jni::alias_ref<JJSRuntimeFactory::javaobject> jsRuntimeFactory,
+      jni::alias_ref<JavaMessageQueueThread::javaobject> jsMessageQueueThread,
+      jni::alias_ref<JavaMessageQueueThread::javaobject>
+          nativeMessageQueueThread,
+      jni::alias_ref<JJavaTimerManager::javaobject> javaTimerManager,
+      jni::alias_ref<JJSTimerExecutor::javaobject> jsTimerExecutor,
+      jni::alias_ref<JReactExceptionManager::javaobject> jReactExceptionManager,
+      jni::alias_ref<JBindingsInstaller::javaobject> jBindingsInstaller,
+      bool isProfiling,
+      jni::alias_ref<JReactHostInspectorTarget::javaobject>
+          jReactHostInspectorTarget) noexcept;
+
+  jni::alias_ref<CallInvokerHolder::javaobject> getJSCallInvokerHolder();
+  jni::alias_ref<NativeMethodCallInvokerHolder::javaobject>
+  getNativeMethodCallInvokerHolder();
+
+  std::unique_ptr<ReactInstance> instance_;
+  jni::global_ref<JRuntimeExecutor::javaobject> unbufferedRuntimeExecutor_;
+  jni::global_ref<JRuntimeExecutor::javaobject> bufferedRuntimeExecutor_;
+  jni::global_ref<JRuntimeScheduler::javaobject> runtimeScheduler_;
+  jni::global_ref<CallInvokerHolder::javaobject> jsCallInvokerHolder_;
+  jni::global_ref<NativeMethodCallInvokerHolder::javaobject>
+      nativeMethodCallInvokerHolder_;
+  jni::global_ref<JReactExceptionManager::javaobject> jReactExceptionManager_;
+  jni::global_ref<JBindingsInstaller::javaobject> jBindingsInstaller_;
+
+  jlong getJavaScriptContext();
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JavaTimerRegistry.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JavaTimerRegistry.cpp
new file mode 100644
index 0000000..842cade
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JavaTimerRegistry.cpp
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "JavaTimerRegistry.h"
+
+namespace facebook::react {
+
+JavaTimerRegistry::JavaTimerRegistry(
+    jni::global_ref<JJavaTimerManager::javaobject> javaTimerManager)
+    : javaTimerManager_(javaTimerManager) {}
+
+void JavaTimerRegistry::createTimer(uint32_t timerID, double delayMS) {
+  javaTimerManager_->createTimer(timerID, delayMS, /* repeat */ false);
+}
+
+void JavaTimerRegistry::createRecurringTimer(uint32_t timerID, double delayMS) {
+  javaTimerManager_->createTimer(timerID, delayMS, /* repeat */ true);
+}
+
+void JavaTimerRegistry::deleteTimer(uint32_t timerID) {
+  javaTimerManager_->deleteTimer(timerID);
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JavaTimerRegistry.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JavaTimerRegistry.h
new file mode 100644
index 0000000..06670e1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/JavaTimerRegistry.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <memory>
+
+#include <fbjni/fbjni.h>
+#include <react/runtime/PlatformTimerRegistry.h>
+
+#include "JJavaTimerManager.h"
+
+namespace facebook::react {
+
+/**
+ * Call into JavaTimerManager.java to schedule and delete timers
+ * with the Platform.
+ */
+class JavaTimerRegistry : public PlatformTimerRegistry {
+ public:
+  JavaTimerRegistry(
+      jni::global_ref<JJavaTimerManager::javaobject> javaTimerManager);
+
+#pragma mark - PlatformTimerRegistry
+
+  void createTimer(uint32_t timerID, double delayMS) override;
+  void createRecurringTimer(uint32_t timerID, double delayMS) override;
+  void deleteTimer(uint32_t timerID) override;
+
+ private:
+  jni::global_ref<JJavaTimerManager::javaobject> javaTimerManager_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/OnLoad.cpp
new file mode 100644
index 0000000..f4dcbfa
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jni/OnLoad.cpp
@@ -0,0 +1,22 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fbjni/fbjni.h>
+#include <react/jni/JReactMarker.h>
+
+#include "JJSTimerExecutor.h"
+#include "JReactHostInspectorTarget.h"
+#include "JReactInstance.h"
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* /*unused*/) {
+  return facebook::jni::initialize(vm, [] {
+    facebook::react::JReactMarker::setLogPerfMarkerIfNeeded();
+    facebook::react::JReactInstance::registerNatives();
+    facebook::react::JJSTimerExecutor::registerNatives();
+    facebook::react::JReactHostInspectorTarget::registerNatives();
+  });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jsc/jni/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jsc/jni/CMakeLists.txt
new file mode 100644
index 0000000..fed3a3c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jsc/jni/CMakeLists.txt
@@ -0,0 +1,22 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-fvisibility=hidden -fexceptions -frtti)
+
+file(GLOB jscinstance_SRC CONFIGURE_DEPENDS "*.cpp")
+add_library(jscinstance SHARED ${jscinstance_SRC})
+
+target_include_directories(jscinstance PUBLIC .)
+
+target_link_libraries(
+        jscinstance
+        bridgeless
+        jscruntime
+        fbjni
+        reactnativejni
+)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jsc/jni/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jsc/jni/OnLoad.cpp
new file mode 100644
index 0000000..e49a55d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/runtime/jsc/jni/OnLoad.cpp
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <cxxreact/MessageQueueThread.h>
+#include <fbjni/fbjni.h>
+#include <jsc/JSCRuntime.h>
+#include <jsi/jsi.h>
+#include <react/jni/ReadableNativeMap.h>
+#include <react/runtime/JSRuntimeFactory.h>
+#include <react/runtime/jni/JJSRuntimeFactory.h>
+
+namespace facebook::react {
+
+class JSCInstance : public jni::HybridClass<JSCInstance, JJSRuntimeFactory> {
+ public:
+  static constexpr auto kJavaDescriptor =
+      "Lcom/facebook/react/runtime/JSCInstance;";
+
+  static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject>) {
+    return makeCxxInstance();
+  }
+
+  static void registerNatives() {
+    registerHybrid({
+        makeNativeMethod("initHybrid", JSCInstance::initHybrid),
+    });
+  }
+
+  std::unique_ptr<JSRuntime> createJSRuntime(
+      std::shared_ptr<MessageQueueThread> msgQueueThread) noexcept {
+    return std::make_unique<JSIRuntimeHolder>(jsc::makeJSCRuntime());
+  }
+
+ private:
+  friend HybridBase;
+  using HybridBase::HybridBase;
+};
+
+} // namespace facebook::react
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
+  return facebook::jni::initialize(
+      vm, [] { facebook::react::JSCInstance::registerNatives(); });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/CMakeLists.txt
new file mode 100644
index 0000000..4c7aeb1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/CMakeLists.txt
@@ -0,0 +1,65 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(
+        -fexceptions
+        -frtti
+        -Wno-unused-lambda-capture
+        -std=c++20)
+
+#########################
+### callinvokerholder ###
+#########################
+
+# TODO This should be exported to its own folder hierarchy
+add_library(
+        callinvokerholder
+        STATIC
+        ReactCommon/CallInvokerHolder.cpp
+        ReactCommon/NativeMethodCallInvokerHolder.cpp
+)
+
+target_include_directories(callinvokerholder
+        PUBLIC
+        ${CMAKE_CURRENT_SOURCE_DIR}
+        )
+
+target_link_libraries(callinvokerholder
+        fb
+        fbjni
+        runtimeexecutor
+        callinvoker
+        reactperfloggerjni)
+
+##################################
+### react_nativemodule_manager ###
+##################################
+
+# TODO: rename to react_nativemodule_manager
+add_library(
+        turbomodulejsijni
+        SHARED
+        ReactCommon/BindingsInstallerHolder.cpp
+        ReactCommon/CompositeTurboModuleManagerDelegate.cpp
+        ReactCommon/OnLoad.cpp
+        ReactCommon/TurboModuleManager.cpp
+)
+
+target_include_directories(
+        turbomodulejsijni
+        PUBLIC
+        ${CMAKE_CURRENT_SOURCE_DIR}
+)
+
+target_link_libraries(turbomodulejsijni
+        fb
+        fbjni
+        jsi
+        react_nativemodule_core
+        callinvokerholder
+        reactperfloggerjni)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CallInvokerHolder.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CallInvokerHolder.cpp
new file mode 100644
index 0000000..9b44821
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CallInvokerHolder.cpp
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "CallInvokerHolder.h"
+
+namespace facebook::react {
+
+CallInvokerHolder::CallInvokerHolder(std::shared_ptr<CallInvoker> callInvoker)
+    : _callInvoker(callInvoker) {}
+
+std::shared_ptr<CallInvoker> CallInvokerHolder::getCallInvoker() {
+  return _callInvoker;
+}
+
+void CallInvokerHolder::registerNatives() {}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CallInvokerHolder.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CallInvokerHolder.h
new file mode 100644
index 0000000..3e4b4f8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CallInvokerHolder.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <ReactCommon/CallInvoker.h>
+#include <fbjni/fbjni.h>
+#include <memory>
+
+namespace facebook::react {
+
+class CallInvokerHolder : public jni::HybridClass<CallInvokerHolder> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/turbomodule/core/CallInvokerHolderImpl;";
+
+  static void registerNatives();
+  std::shared_ptr<CallInvoker> getCallInvoker();
+
+ private:
+  friend HybridBase;
+  CallInvokerHolder(std::shared_ptr<CallInvoker> callInvoker);
+  std::shared_ptr<CallInvoker> _callInvoker;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CompositeTurboModuleManagerDelegate.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CompositeTurboModuleManagerDelegate.cpp
new file mode 100644
index 0000000..a8e37e7
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CompositeTurboModuleManagerDelegate.cpp
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "CompositeTurboModuleManagerDelegate.h"
+
+namespace facebook::react {
+
+jni::local_ref<CompositeTurboModuleManagerDelegate::jhybriddata>
+CompositeTurboModuleManagerDelegate::initHybrid(jni::alias_ref<jhybridobject>) {
+  return makeCxxInstance();
+}
+
+void CompositeTurboModuleManagerDelegate::registerNatives() {
+  registerHybrid({
+      makeNativeMethod(
+          "initHybrid", CompositeTurboModuleManagerDelegate::initHybrid),
+      makeNativeMethod(
+          "addTurboModuleManagerDelegate",
+          CompositeTurboModuleManagerDelegate::addTurboModuleManagerDelegate),
+  });
+}
+
+std::shared_ptr<TurboModule>
+CompositeTurboModuleManagerDelegate::getTurboModule(
+    const std::string& moduleName,
+    const std::shared_ptr<CallInvoker>& jsInvoker) {
+  for (auto delegate : mDelegates_) {
+    if (auto turboModule =
+            delegate->cthis()->getTurboModule(moduleName, jsInvoker)) {
+      return turboModule;
+    }
+  }
+  return nullptr;
+}
+
+std::shared_ptr<TurboModule>
+CompositeTurboModuleManagerDelegate::getTurboModule(
+    const std::string& moduleName,
+    const JavaTurboModule::InitParams& params) {
+  for (auto delegate : mDelegates_) {
+    if (auto turboModule =
+            delegate->cthis()->getTurboModule(moduleName, params)) {
+      return turboModule;
+    }
+  }
+  return nullptr;
+}
+
+void CompositeTurboModuleManagerDelegate::addTurboModuleManagerDelegate(
+    jni::alias_ref<TurboModuleManagerDelegate::javaobject> delegate) {
+  mDelegates_.push_back(jni::make_global(delegate));
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CompositeTurboModuleManagerDelegate.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CompositeTurboModuleManagerDelegate.h
new file mode 100644
index 0000000..52b24cc
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/CompositeTurboModuleManagerDelegate.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModuleManagerDelegate.h>
+#include <fbjni/fbjni.h>
+#include <memory>
+#include <string>
+#include <vector>
+
+namespace facebook::react {
+
+class CompositeTurboModuleManagerDelegate
+    : public jni::HybridClass<
+          CompositeTurboModuleManagerDelegate,
+          TurboModuleManagerDelegate> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/CompositeReactPackageTurboModuleManagerDelegate;";
+
+  static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject>);
+
+  static void registerNatives();
+
+  std::shared_ptr<TurboModule> getTurboModule(
+      const std::string& moduleName,
+      const std::shared_ptr<CallInvoker>& jsInvoker) override;
+
+  std::shared_ptr<TurboModule> getTurboModule(
+      const std::string& moduleName,
+      const JavaTurboModule::InitParams& params) override;
+
+ private:
+  friend HybridBase;
+  using HybridBase::HybridBase;
+  std::vector<jni::global_ref<TurboModuleManagerDelegate::javaobject>>
+      mDelegates_;
+
+  void addTurboModuleManagerDelegate(
+      jni::alias_ref<TurboModuleManagerDelegate::javaobject> delegate);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/NativeMethodCallInvokerHolder.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/NativeMethodCallInvokerHolder.cpp
new file mode 100644
index 0000000..62d9b0d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/NativeMethodCallInvokerHolder.cpp
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include "NativeMethodCallInvokerHolder.h"
+
+namespace facebook::react {
+
+NativeMethodCallInvokerHolder::NativeMethodCallInvokerHolder(
+    std::shared_ptr<NativeMethodCallInvoker> nativeMethodCallInvoker)
+    : _nativeMethodCallInvoker(nativeMethodCallInvoker) {}
+
+std::shared_ptr<NativeMethodCallInvoker>
+NativeMethodCallInvokerHolder::getNativeMethodCallInvoker() {
+  return _nativeMethodCallInvoker;
+}
+
+void NativeMethodCallInvokerHolder::registerNatives() {}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/NativeMethodCallInvokerHolder.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/NativeMethodCallInvokerHolder.h
new file mode 100644
index 0000000..ef8fa3b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/NativeMethodCallInvokerHolder.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <ReactCommon/CallInvoker.h>
+#include <fbjni/fbjni.h>
+#include <memory>
+
+namespace facebook::react {
+
+class NativeMethodCallInvokerHolder
+    : public jni::HybridClass<NativeMethodCallInvokerHolder> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/turbomodule/core/NativeMethodCallInvokerHolderImpl;";
+
+  static void registerNatives();
+  std::shared_ptr<NativeMethodCallInvoker> getNativeMethodCallInvoker();
+
+ private:
+  friend HybridBase;
+  NativeMethodCallInvokerHolder(
+      std::shared_ptr<NativeMethodCallInvoker> nativeMethodCallInvoker);
+  std::shared_ptr<NativeMethodCallInvoker> _nativeMethodCallInvoker;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/OnLoad.cpp
new file mode 100644
index 0000000..013e2ca
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/OnLoad.cpp
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <ReactCommon/TurboModulePerfLogger.h>
+#include <fbjni/fbjni.h>
+#include <reactperflogger/JNativeModulePerfLogger.h>
+
+#include "CompositeTurboModuleManagerDelegate.h"
+#include "TurboModuleManager.h"
+
+void jniEnableCppLogging(
+    facebook::jni::alias_ref<jclass> cls,
+    facebook::jni::alias_ref<
+        facebook::react::JNativeModulePerfLogger::javaobject> perfLogger) {
+  facebook::react::TurboModulePerfLogger::enableLogging(
+      perfLogger->cthis()->get());
+}
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*) {
+  return facebook::jni::initialize(vm, [] {
+    // TODO: dvacca ramanpreet unify this with the way
+    // "ComponentDescriptorFactory" is defined in Fabric
+    facebook::react::TurboModuleManager::registerNatives();
+
+    facebook::react::CompositeTurboModuleManagerDelegate::registerNatives();
+
+    facebook::jni::registerNatives(
+        "com/facebook/react/internal/turbomodule/core/TurboModulePerfLogger",
+        {makeNativeMethod("jniEnableCppLogging", jniEnableCppLogging)});
+  });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/TurboModuleManager.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/TurboModuleManager.cpp
new file mode 100644
index 0000000..d18685d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/TurboModuleManager.cpp
@@ -0,0 +1,351 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <memory>
+#include <stdexcept>
+#include <string>
+
+#include <fbjni/fbjni.h>
+#include <jsi/jsi.h>
+
+#include <ReactCommon/BindingsInstallerHolder.h>
+#include <ReactCommon/CxxTurboModuleUtils.h>
+#include <ReactCommon/JavaInteropTurboModule.h>
+#include <ReactCommon/TurboCxxModule.h>
+#include <ReactCommon/TurboModuleBinding.h>
+#include <ReactCommon/TurboModulePerfLogger.h>
+
+#include "TurboModuleManager.h"
+
+namespace facebook::react {
+
+namespace {
+
+class JMethodDescriptor : public jni::JavaClass<JMethodDescriptor> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/internal/turbomodule/core/TurboModuleInteropUtils$MethodDescriptor;";
+
+  JavaInteropTurboModule::MethodDescriptor toMethodDescriptor() {
+    return JavaInteropTurboModule::MethodDescriptor{
+        .methodName = getMethodName(),
+        .jniSignature = getJNISignature(),
+        .jsiReturnKind = getJSIReturnKind(),
+        .jsArgCount = getJSArgCount(),
+    };
+  }
+
+ private:
+  std::string getMethodName() {
+    static const auto field =
+        javaClassStatic()->getField<jstring>("methodName");
+    return getFieldValue(field)->toStdString();
+  }
+
+  std::string getJNISignature() {
+    static const auto field =
+        javaClassStatic()->getField<jstring>("jniSignature");
+    return getFieldValue(field)->toStdString();
+  }
+
+  TurboModuleMethodValueKind getJSIReturnKind() {
+    static const auto field =
+        javaClassStatic()->getField<jstring>("jsiReturnKind");
+    const std::string jsiReturnKind = getFieldValue(field)->toStdString();
+    if (jsiReturnKind == "VoidKind") {
+      return VoidKind;
+    }
+    if (jsiReturnKind == "BooleanKind") {
+      return BooleanKind;
+    }
+    if (jsiReturnKind == "NumberKind") {
+      return NumberKind;
+    }
+    if (jsiReturnKind == "StringKind") {
+      return StringKind;
+    }
+    if (jsiReturnKind == "ObjectKind") {
+      return ObjectKind;
+    }
+    if (jsiReturnKind == "ArrayKind") {
+      return ArrayKind;
+    }
+    if (jsiReturnKind == "FunctionKind") {
+      return FunctionKind;
+    }
+    if (jsiReturnKind == "PromiseKind") {
+      return PromiseKind;
+    }
+
+    throw new std::runtime_error(
+        std::string("Failed to convert jsiReturnKind \"") + jsiReturnKind +
+        "\" to TurboModuleMethodValueKind");
+  }
+
+  int getJSArgCount() {
+    static const auto field = javaClassStatic()->getField<int>("jsArgCount");
+    return getFieldValue(field);
+  }
+};
+} // namespace
+
+TurboModuleManager::TurboModuleManager(
+    RuntimeExecutor runtimeExecutor,
+    std::shared_ptr<CallInvoker> jsCallInvoker,
+    std::shared_ptr<NativeMethodCallInvoker> nativeMethodCallInvoker,
+    jni::alias_ref<TurboModuleManagerDelegate::javaobject> delegate)
+    : runtimeExecutor_(std::move(runtimeExecutor)),
+      jsCallInvoker_(std::move(jsCallInvoker)),
+      nativeMethodCallInvoker_(std::move(nativeMethodCallInvoker)),
+      delegate_(jni::make_global(delegate)),
+      turboModuleCache_(std::make_shared<ModuleCache>()),
+      legacyModuleCache_(std::make_shared<ModuleCache>()) {}
+
+jni::local_ref<TurboModuleManager::jhybriddata> TurboModuleManager::initHybrid(
+    jni::alias_ref<jhybridobject> /* unused */,
+    jni::alias_ref<JRuntimeExecutor::javaobject> runtimeExecutor,
+    jni::alias_ref<CallInvokerHolder::javaobject> jsCallInvokerHolder,
+    jni::alias_ref<NativeMethodCallInvokerHolder::javaobject>
+        nativeMethodCallInvokerHolder,
+    jni::alias_ref<TurboModuleManagerDelegate::javaobject> delegate) {
+  return makeCxxInstance(
+      runtimeExecutor->cthis()->get(),
+      jsCallInvokerHolder->cthis()->getCallInvoker(),
+      nativeMethodCallInvokerHolder->cthis()->getNativeMethodCallInvoker(),
+      delegate);
+}
+
+void TurboModuleManager::registerNatives() {
+  registerHybrid({
+      makeNativeMethod("initHybrid", TurboModuleManager::initHybrid),
+      makeNativeMethod(
+          "installJSIBindings", TurboModuleManager::installJSIBindings),
+  });
+}
+
+TurboModuleProviderFunctionType TurboModuleManager::createTurboModuleProvider(
+    jni::alias_ref<jhybridobject> javaPart,
+    jsi::Runtime* runtime,
+    bool enableSyncVoidMethods) {
+  return [turboModuleCache_ = std::weak_ptr<ModuleCache>(turboModuleCache_),
+          runtime,
+          jsCallInvoker_ = std::weak_ptr<CallInvoker>(jsCallInvoker_),
+          nativeMethodCallInvoker_ =
+              std::weak_ptr<NativeMethodCallInvoker>(nativeMethodCallInvoker_),
+          weakDelegate = jni::make_weak(delegate_),
+          weakJavaPart = jni::make_weak(javaPart),
+          enableSyncVoidMethods](
+             const std::string& name) -> std::shared_ptr<TurboModule> {
+    auto turboModuleCache = turboModuleCache_.lock();
+    auto jsCallInvoker = jsCallInvoker_.lock();
+    auto nativeMethodCallInvoker = nativeMethodCallInvoker_.lock();
+    auto delegate = weakDelegate.lockLocal();
+    auto javaPart = weakJavaPart.lockLocal();
+
+    if (!turboModuleCache || !jsCallInvoker || !nativeMethodCallInvoker ||
+        !delegate || !javaPart) {
+      return nullptr;
+    }
+
+    const char* moduleName = name.c_str();
+
+    TurboModulePerfLogger::moduleJSRequireBeginningStart(moduleName);
+
+    auto turboModuleLookup = turboModuleCache->find(name);
+    if (turboModuleLookup != turboModuleCache->end()) {
+      TurboModulePerfLogger::moduleJSRequireBeginningCacheHit(moduleName);
+      TurboModulePerfLogger::moduleJSRequireBeginningEnd(moduleName);
+      return turboModuleLookup->second;
+    }
+
+    TurboModulePerfLogger::moduleJSRequireBeginningEnd(moduleName);
+
+    auto cxxModule = delegate->cthis()->getTurboModule(name, jsCallInvoker);
+    if (cxxModule) {
+      turboModuleCache->insert({name, cxxModule});
+      return cxxModule;
+    }
+
+    auto& cxxTurboModuleMapProvider = globalExportedCxxTurboModuleMap();
+    auto it = cxxTurboModuleMapProvider.find(name);
+    if (it != cxxTurboModuleMapProvider.end()) {
+      auto turboModule = it->second(jsCallInvoker);
+      turboModuleCache->insert({name, turboModule});
+      return turboModule;
+    }
+
+    static auto getTurboLegacyCxxModule =
+        javaPart->getClass()
+            ->getMethod<jni::alias_ref<CxxModuleWrapper::javaobject>(
+                const std::string&)>("getTurboLegacyCxxModule");
+    auto legacyCxxModule = getTurboLegacyCxxModule(javaPart.get(), name);
+
+    if (legacyCxxModule) {
+      TurboModulePerfLogger::moduleJSRequireEndingStart(moduleName);
+
+      auto turboModule = std::make_shared<react::TurboCxxModule>(
+          legacyCxxModule->cthis()->getModule(), jsCallInvoker);
+      turboModuleCache->insert({name, turboModule});
+
+      TurboModulePerfLogger::moduleJSRequireEndingEnd(moduleName);
+      return turboModule;
+    }
+
+    static auto getTurboJavaModule =
+        javaPart->getClass()
+            ->getMethod<jni::alias_ref<JTurboModule>(const std::string&)>(
+                "getTurboJavaModule");
+    auto moduleInstance = getTurboJavaModule(javaPart.get(), name);
+
+    if (moduleInstance) {
+      TurboModulePerfLogger::moduleJSRequireEndingStart(moduleName);
+      JavaTurboModule::InitParams params = {
+          .moduleName = name,
+          .instance = moduleInstance,
+          .jsInvoker = jsCallInvoker,
+          .nativeMethodCallInvoker = nativeMethodCallInvoker,
+          .shouldVoidMethodsExecuteSync = enableSyncVoidMethods};
+
+      auto turboModule = delegate->cthis()->getTurboModule(name, params);
+      if (moduleInstance->isInstanceOf(
+              JTurboModuleWithJSIBindings::javaClassStatic())) {
+        static auto getBindingsInstaller =
+            JTurboModuleWithJSIBindings::javaClassStatic()
+                ->getMethod<BindingsInstallerHolder::javaobject()>(
+                    "getBindingsInstaller");
+        auto installer = getBindingsInstaller(moduleInstance);
+        if (installer) {
+          installer->cthis()->installBindings(*runtime);
+        }
+      }
+
+      turboModuleCache->insert({name, turboModule});
+      TurboModulePerfLogger::moduleJSRequireEndingEnd(moduleName);
+      return turboModule;
+    }
+
+    return nullptr;
+  };
+}
+
+TurboModuleProviderFunctionType TurboModuleManager::createLegacyModuleProvider(
+    jni::alias_ref<jhybridobject> javaPart) {
+  return [legacyModuleCache_ = std::weak_ptr<ModuleCache>(legacyModuleCache_),
+          jsCallInvoker_ = std::weak_ptr<CallInvoker>(jsCallInvoker_),
+          nativeMethodCallInvoker_ =
+              std::weak_ptr<NativeMethodCallInvoker>(nativeMethodCallInvoker_),
+          weakDelegate = jni::make_weak(delegate_),
+          weakJavaPart = jni::make_weak(javaPart)](
+             const std::string& name) -> std::shared_ptr<TurboModule> {
+    auto legacyModuleCache = legacyModuleCache_.lock();
+    auto jsCallInvoker = jsCallInvoker_.lock();
+    auto nativeMethodCallInvoker = nativeMethodCallInvoker_.lock();
+    auto delegate = weakDelegate.lockLocal();
+    auto javaPart = weakJavaPart.lockLocal();
+
+    if (!legacyModuleCache || !jsCallInvoker || !nativeMethodCallInvoker ||
+        !delegate || !javaPart) {
+      return nullptr;
+    }
+
+    const char* moduleName = name.c_str();
+
+    TurboModulePerfLogger::moduleJSRequireBeginningStart(moduleName);
+
+    auto legacyModuleLookup = legacyModuleCache->find(name);
+    if (legacyModuleLookup != legacyModuleCache->end()) {
+      TurboModulePerfLogger::moduleJSRequireBeginningCacheHit(moduleName);
+      TurboModulePerfLogger::moduleJSRequireBeginningEnd(moduleName);
+      return legacyModuleLookup->second;
+    }
+
+    TurboModulePerfLogger::moduleJSRequireBeginningEnd(moduleName);
+
+    static auto getLegacyCxxModule =
+        javaPart->getClass()
+            ->getMethod<jni::alias_ref<CxxModuleWrapper::javaobject>(
+                const std::string&)>("getLegacyCxxModule");
+    auto legacyCxxModule = getLegacyCxxModule(javaPart.get(), name);
+
+    if (legacyCxxModule) {
+      TurboModulePerfLogger::moduleJSRequireEndingStart(moduleName);
+
+      auto turboModule = std::make_shared<react::TurboCxxModule>(
+          legacyCxxModule->cthis()->getModule(), jsCallInvoker);
+      legacyModuleCache->insert({name, turboModule});
+
+      TurboModulePerfLogger::moduleJSRequireEndingEnd(moduleName);
+      return turboModule;
+    }
+
+    static auto getLegacyJavaModule =
+        javaPart->getClass()
+            ->getMethod<jni::alias_ref<JNativeModule>(const std::string&)>(
+                "getLegacyJavaModule");
+    auto moduleInstance = getLegacyJavaModule(javaPart.get(), name);
+
+    if (moduleInstance) {
+      TurboModulePerfLogger::moduleJSRequireEndingStart(moduleName);
+      JavaTurboModule::InitParams params = {
+          .moduleName = name,
+          .instance = moduleInstance,
+          .jsInvoker = jsCallInvoker,
+          .nativeMethodCallInvoker = nativeMethodCallInvoker,
+          .shouldVoidMethodsExecuteSync = false};
+
+      static auto getMethodDescriptorsFromModule =
+          javaPart->getClass()
+              ->getStaticMethod<jni::alias_ref<
+                  jni::JList<JMethodDescriptor::javaobject>::javaobject>(
+                  jni::alias_ref<JNativeModule>)>(
+                  "getMethodDescriptorsFromModule");
+
+      auto javaMethodDescriptors =
+          getMethodDescriptorsFromModule(javaPart->getClass(), moduleInstance);
+
+      std::vector<JavaInteropTurboModule::MethodDescriptor> methodDescriptors;
+      for (jni::alias_ref<JMethodDescriptor> javaMethodDescriptor :
+           *javaMethodDescriptors) {
+        methodDescriptors.push_back(javaMethodDescriptor->toMethodDescriptor());
+      }
+
+      auto turboModule =
+          std::make_shared<JavaInteropTurboModule>(params, methodDescriptors);
+
+      legacyModuleCache->insert({name, turboModule});
+      TurboModulePerfLogger::moduleJSRequireEndingEnd(moduleName);
+      return turboModule;
+    }
+
+    return nullptr;
+  };
+}
+
+void TurboModuleManager::installJSIBindings(
+    jni::alias_ref<jhybridobject> javaPart,
+    bool shouldCreateLegacyModules,
+    bool enableSyncVoidMethods) {
+  auto cxxPart = javaPart->cthis();
+  if (cxxPart == nullptr || !cxxPart->jsCallInvoker_) {
+    return; // Runtime doesn't exist when attached to Chrome debugger.
+  }
+
+  cxxPart->runtimeExecutor_([cxxPart,
+                             javaPart = jni::make_global(javaPart),
+                             shouldCreateLegacyModules,
+                             enableSyncVoidMethods](jsi::Runtime& runtime) {
+    TurboModuleBinding::install(
+        runtime,
+        cxxPart->createTurboModuleProvider(
+            javaPart, &runtime, enableSyncVoidMethods),
+        shouldCreateLegacyModules
+            ? cxxPart->createLegacyModuleProvider(javaPart)
+            : nullptr);
+  });
+}
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/TurboModuleManager.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/TurboModuleManager.h
new file mode 100644
index 0000000..49f28da
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/TurboModuleManager.h
@@ -0,0 +1,76 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <ReactCommon/CallInvokerHolder.h>
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/NativeMethodCallInvokerHolder.h>
+#include <ReactCommon/RuntimeExecutor.h>
+#include <ReactCommon/TurboModule.h>
+#include <ReactCommon/TurboModuleManagerDelegate.h>
+#include <fbjni/fbjni.h>
+#include <jsi/jsi.h>
+#include <react/bridging/LongLivedObject.h>
+#include <react/jni/CxxModuleWrapper.h>
+#include <react/jni/JRuntimeExecutor.h>
+#include <memory>
+#include <unordered_map>
+
+namespace facebook::react {
+
+class TurboModuleManager : public jni::HybridClass<TurboModuleManager> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/internal/turbomodule/core/TurboModuleManager;";
+  static jni::local_ref<jhybriddata> initHybrid(
+      jni::alias_ref<jhybridobject> /* unused */,
+      jni::alias_ref<JRuntimeExecutor::javaobject> runtimeExecutor,
+      jni::alias_ref<CallInvokerHolder::javaobject> jsCallInvokerHolder,
+      jni::alias_ref<NativeMethodCallInvokerHolder::javaobject>
+          nativeMethodCallInvokerHolder,
+      jni::alias_ref<TurboModuleManagerDelegate::javaobject> delegate);
+  static void registerNatives();
+
+ private:
+  friend HybridBase;
+  RuntimeExecutor runtimeExecutor_;
+  std::shared_ptr<CallInvoker> jsCallInvoker_;
+  std::shared_ptr<NativeMethodCallInvoker> nativeMethodCallInvoker_;
+  jni::global_ref<TurboModuleManagerDelegate::javaobject> delegate_;
+
+  using ModuleCache =
+      std::unordered_map<std::string, std::shared_ptr<react::TurboModule>>;
+
+  /**
+   * TODO(T48018690):
+   * All modules are currently long-lived.
+   * We need to come up with a mechanism to allow modules to specify whether
+   * they want to be long-lived or short-lived.
+   */
+  std::shared_ptr<ModuleCache> turboModuleCache_;
+  std::shared_ptr<ModuleCache> legacyModuleCache_;
+
+  static void installJSIBindings(
+      jni::alias_ref<jhybridobject> javaPart,
+      bool shouldCreateLegacyModules,
+      bool enableSyncVoidMethods);
+  explicit TurboModuleManager(
+      RuntimeExecutor runtimeExecutor,
+      std::shared_ptr<CallInvoker> jsCallInvoker,
+      std::shared_ptr<NativeMethodCallInvoker> nativeMethodCallInvoker,
+      jni::alias_ref<TurboModuleManagerDelegate::javaobject> delegate);
+
+  TurboModuleProviderFunctionType createTurboModuleProvider(
+      jni::alias_ref<jhybridobject> javaPart,
+      jsi::Runtime* runtime,
+      bool enableSyncVoidMethods);
+  TurboModuleProviderFunctionType createLegacyModuleProvider(
+      jni::alias_ref<jhybridobject> javaPart);
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/TurboModuleManagerDelegate.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/TurboModuleManagerDelegate.h
new file mode 100644
index 0000000..0c38700
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/turbomodule/ReactCommon/TurboModuleManagerDelegate.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#pragma once
+
+#include <ReactCommon/CallInvoker.h>
+#include <ReactCommon/JavaTurboModule.h>
+#include <fbjni/fbjni.h>
+#include <memory>
+#include <string>
+
+namespace facebook::react {
+
+class TurboModuleManagerDelegate
+    : public jni::HybridClass<TurboModuleManagerDelegate> {
+ public:
+  static auto constexpr kJavaDescriptor =
+      "Lcom/facebook/react/internal/turbomodule/core/TurboModuleManagerDelegate;";
+
+  virtual std::shared_ptr<TurboModule> getTurboModule(
+      const std::string& name,
+      const JavaTurboModule::InitParams& params) = 0;
+  virtual std::shared_ptr<TurboModule> getTurboModule(
+      const std::string& name,
+      const std::shared_ptr<CallInvoker>& jsInvoker) = 0;
+
+ private:
+  friend HybridBase;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/uimanager/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/uimanager/CMakeLists.txt
new file mode 100644
index 0000000..ca7c6e0
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/uimanager/CMakeLists.txt
@@ -0,0 +1,27 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-fexceptions -frtti -std=c++20 -Wall -DLOG_TAG=\"ReactNative\")
+
+file(GLOB uimanagerjni_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
+add_library(uimanagerjni SHARED ${uimanagerjni_SRC})
+
+target_include_directories(uimanagerjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
+
+target_link_libraries(uimanagerjni
+        fb
+        fbjni
+        folly_runtime
+        glog
+        glog_init
+        bridgelessnativeviewconfig
+        rrc_native
+        yoga
+        callinvokerholder
+        reactnativejni
+        react_render_componentregistry)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/uimanager/OnLoad.cpp b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/uimanager/OnLoad.cpp
new file mode 100644
index 0000000..d3aa672
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/react/uimanager/OnLoad.cpp
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#include <fbjni/fbjni.h>
+
+#include "ComponentNameResolverBinding.h"
+#include "UIConstantsProviderBinding.h"
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*) {
+  return facebook::jni::initialize(vm, [] {
+    facebook::react::ComponentNameResolverBinding::registerNatives();
+    facebook::react::UIConstantsProviderBinding::registerNatives();
+  });
+}
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/CMakeLists.txt
new file mode 100644
index 0000000..2868624
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/CMakeLists.txt
@@ -0,0 +1,22 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+# These ASM files are picked from the boost release separately,
+# because the react native version does not include anything outside of headers.
+# They are required for Folly futures to compile successfully.
+ENABLE_LANGUAGE(ASM)
+file(GLOB_RECURSE
+        boostasm_SRC
+        CONFIGURE_DEPENDS
+        ${CMAKE_CURRENT_SOURCE_DIR}/asm/${ANDROID_ABI}/*.S)
+add_library(boost STATIC ${boostasm_SRC})
+
+set_target_properties(boost PROPERTIES LINKER_LANGUAGE CXX)
+
+target_include_directories(boost PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/boost_1_83_0)
+
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/arm64-v8a/jump_arm64_aapcs_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/arm64-v8a/jump_arm64_aapcs_elf_gas.S
new file mode 100644
index 0000000..7c0c2fa
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/arm64-v8a/jump_arm64_aapcs_elf_gas.S
@@ -0,0 +1,114 @@
+/*
+       Copyright Edward Nevill + Oliver Kowalke 2015
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+/*******************************************************
+ *                                                     *
+ *  -------------------------------------------------  *
+ *  |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  *
+ *  -------------------------------------------------  *
+ *  | 0x0 | 0x4 | 0x8 | 0xc | 0x10| 0x14| 0x18| 0x1c|  *
+ *  -------------------------------------------------  *
+ *  |    d8     |    d9     |    d10    |    d11    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  8  |  9  |  10 |  11 |  12 |  13 |  14 |  15 |  *
+ *  -------------------------------------------------  *
+ *  | 0x20| 0x24| 0x28| 0x2c| 0x30| 0x34| 0x38| 0x3c|  *
+ *  -------------------------------------------------  *
+ *  |    d12    |    d13    |    d14    |    d15    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  16 |  17 |  18 |  19 |  20 |  21 |  22 |  23 |  *
+ *  -------------------------------------------------  *
+ *  | 0x40| 0x44| 0x48| 0x4c| 0x50| 0x54| 0x58| 0x5c|  *
+ *  -------------------------------------------------  *
+ *  |    x19    |    x20    |    x21    |    x22    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  24 |  25 |  26 |  27 |  28 |  29 |  30 |  31 |  *
+ *  -------------------------------------------------  *
+ *  | 0x60| 0x64| 0x68| 0x6c| 0x70| 0x74| 0x78| 0x7c|  *
+ *  -------------------------------------------------  *
+ *  |    x23    |    x24    |    x25    |    x26    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  32 |  33 |  34 |  35 |  36 |  37 |  38 |  39 |  *
+ *  -------------------------------------------------  *
+ *  | 0x80| 0x84| 0x88| 0x8c| 0x90| 0x94| 0x98| 0x9c|  *
+ *  -------------------------------------------------  *
+ *  |    x27    |    x28    |    FP     |     LR    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  40 |  41 |  42 | 43  |           |           |  *
+ *  -------------------------------------------------  *
+ *  | 0xa0| 0xa4| 0xa8| 0xac|           |           |  *
+ *  -------------------------------------------------  *
+ *  |     PC    |   align   |           |           |  *
+ *  -------------------------------------------------  *
+ *                                                     *
+ *******************************************************/
+
+.cpu    generic+fp+simd
+.text
+.align  2
+.global jump_fcontext
+.type   jump_fcontext, %function
+jump_fcontext:
+    # prepare stack for GP + FPU
+    sub  sp, sp, #0xb0
+
+    # save d8 - d15
+    stp  d8,  d9,  [sp, #0x00]
+    stp  d10, d11, [sp, #0x10]
+    stp  d12, d13, [sp, #0x20]
+    stp  d14, d15, [sp, #0x30]
+
+    # save x19-x30
+    stp  x19, x20, [sp, #0x40]
+    stp  x21, x22, [sp, #0x50]
+    stp  x23, x24, [sp, #0x60]
+    stp  x25, x26, [sp, #0x70]
+    stp  x27, x28, [sp, #0x80]
+    stp  x29, x30, [sp, #0x90]
+
+    # save LR as PC
+    str  x30, [sp, #0xa0]
+
+    # store RSP (pointing to context-data) in X0
+    mov  x4, sp
+
+    # restore RSP (pointing to context-data) from X1
+    mov  sp, x0
+
+    # load d8 - d15
+    ldp  d8,  d9,  [sp, #0x00]
+    ldp  d10, d11, [sp, #0x10]
+    ldp  d12, d13, [sp, #0x20]
+    ldp  d14, d15, [sp, #0x30]
+
+    # load x19-x30
+    ldp  x19, x20, [sp, #0x40]
+    ldp  x21, x22, [sp, #0x50]
+    ldp  x23, x24, [sp, #0x60]
+    ldp  x25, x26, [sp, #0x70]
+    ldp  x27, x28, [sp, #0x80]
+    ldp  x29, x30, [sp, #0x90]
+
+    # return transfer_t from jump
+    # pass transfer_t as first arg in context function
+    # X0 == FCTX, X1 == DATA
+    mov x0, x4
+
+    # load pc
+    ldr  x4, [sp, #0xa0]
+
+    # restore stack from GP + FPU
+    add  sp, sp, #0xb0
+
+    ret x4
+.size   jump_fcontext,.-jump_fcontext
+# Mark that we don't need executable stack.
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/arm64-v8a/make_arm64_aapcs_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/arm64-v8a/make_arm64_aapcs_elf_gas.S
new file mode 100644
index 0000000..e71a91c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/arm64-v8a/make_arm64_aapcs_elf_gas.S
@@ -0,0 +1,85 @@
+/*
+            Copyright Edward Nevill + Oliver Kowalke 2015
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+/*******************************************************
+ *                                                     *
+ *  -------------------------------------------------  *
+ *  |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  *
+ *  -------------------------------------------------  *
+ *  | 0x0 | 0x4 | 0x8 | 0xc | 0x10| 0x14| 0x18| 0x1c|  *
+ *  -------------------------------------------------  *
+ *  |    d8     |    d9     |    d10    |    d11    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  8  |  9  |  10 |  11 |  12 |  13 |  14 |  15 |  *
+ *  -------------------------------------------------  *
+ *  | 0x20| 0x24| 0x28| 0x2c| 0x30| 0x34| 0x38| 0x3c|  *
+ *  -------------------------------------------------  *
+ *  |    d12    |    d13    |    d14    |    d15    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  16 |  17 |  18 |  19 |  20 |  21 |  22 |  23 |  *
+ *  -------------------------------------------------  *
+ *  | 0x40| 0x44| 0x48| 0x4c| 0x50| 0x54| 0x58| 0x5c|  *
+ *  -------------------------------------------------  *
+ *  |    x19    |    x20    |    x21    |    x22    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  24 |  25 |  26 |  27 |  28 |  29 |  30 |  31 |  *
+ *  -------------------------------------------------  *
+ *  | 0x60| 0x64| 0x68| 0x6c| 0x70| 0x74| 0x78| 0x7c|  *
+ *  -------------------------------------------------  *
+ *  |    x23    |    x24    |    x25    |    x26    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  32 |  33 |  34 |  35 |  36 |  37 |  38 |  39 |  *
+ *  -------------------------------------------------  *
+ *  | 0x80| 0x84| 0x88| 0x8c| 0x90| 0x94| 0x98| 0x9c|  *
+ *  -------------------------------------------------  *
+ *  |    x27    |    x28    |    FP     |     LR    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  40 |  41 |  42 | 43  |           |           |  *
+ *  -------------------------------------------------  *
+ *  | 0xa0| 0xa4| 0xa8| 0xac|           |           |  *
+ *  -------------------------------------------------  *
+ *  |     PC    |   align   |           |           |  *
+ *  -------------------------------------------------  *
+ *                                                     *
+ *******************************************************/
+
+.cpu    generic+fp+simd
+.text
+.align  2
+.global make_fcontext
+.type   make_fcontext, %function
+make_fcontext:
+    # shift address in x0 (allocated stack) to lower 16 byte boundary
+    and x0, x0, ~0xF
+
+    # reserve space for context-data on context-stack
+    sub  x0, x0, #0xb0
+
+    # third arg of make_fcontext() == address of context-function
+    # store address as a PC to jump in
+    str  x2, [x0, #0xa0]
+
+    # save address of finish as return-address for context-function
+    # will be entered after context-function returns (LR register)
+    adr  x1, finish
+    str  x1, [x0, #0x98]
+
+    ret  x30 // return pointer to context-data (x0)
+
+finish:
+    # exit code is zero
+    mov  x0, #0
+    # exit application
+    bl  _exit
+
+.size   make_fcontext,.-make_fcontext
+# Mark that we don't need executable stack.
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/arm64-v8a/ontop_arm64_aapcs_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/arm64-v8a/ontop_arm64_aapcs_elf_gas.S
new file mode 100644
index 0000000..7e3b047
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/arm64-v8a/ontop_arm64_aapcs_elf_gas.S
@@ -0,0 +1,113 @@
+/*
+       Copyright Edward Nevill + Oliver Kowalke 2015
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+/*******************************************************
+ *                                                     *
+ *  -------------------------------------------------  *
+ *  |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  *
+ *  -------------------------------------------------  *
+ *  | 0x0 | 0x4 | 0x8 | 0xc | 0x10| 0x14| 0x18| 0x1c|  *
+ *  -------------------------------------------------  *
+ *  |    d8     |    d9     |    d10    |    d11    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  8  |  9  |  10 |  11 |  12 |  13 |  14 |  15 |  *
+ *  -------------------------------------------------  *
+ *  | 0x20| 0x24| 0x28| 0x2c| 0x30| 0x34| 0x38| 0x3c|  *
+ *  -------------------------------------------------  *
+ *  |    d12    |    d13    |    d14    |    d15    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  16 |  17 |  18 |  19 |  20 |  21 |  22 |  23 |  *
+ *  -------------------------------------------------  *
+ *  | 0x40| 0x44| 0x48| 0x4c| 0x50| 0x54| 0x58| 0x5c|  *
+ *  -------------------------------------------------  *
+ *  |    x19    |    x20    |    x21    |    x22    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  24 |  25 |  26 |  27 |  28 |  29 |  30 |  31 |  *
+ *  -------------------------------------------------  *
+ *  | 0x60| 0x64| 0x68| 0x6c| 0x70| 0x74| 0x78| 0x7c|  *
+ *  -------------------------------------------------  *
+ *  |    x23    |    x24    |    x25    |    x26    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  32 |  33 |  34 |  35 |  36 |  37 |  38 |  39 |  *
+ *  -------------------------------------------------  *
+ *  | 0x80| 0x84| 0x88| 0x8c| 0x90| 0x94| 0x98| 0x9c|  *
+ *  -------------------------------------------------  *
+ *  |    x27    |    x28    |    FP     |     LR    |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  40 |  41 |  42 | 43  |           |           |  *
+ *  -------------------------------------------------  *
+ *  | 0xa0| 0xa4| 0xa8| 0xac|           |           |  *
+ *  -------------------------------------------------  *
+ *  |     PC    |   align   |           |           |  *
+ *  -------------------------------------------------  *
+ *                                                     *
+ *******************************************************/
+
+.cpu    generic+fp+simd
+.text
+.align  2
+.global ontop_fcontext
+.type   ontop_fcontext, %function
+ontop_fcontext:
+    # prepare stack for GP + FPU
+    sub  sp, sp, #0xb0
+
+    # save d8 - d15
+    stp  d8,  d9,  [sp, #0x00]
+    stp  d10, d11, [sp, #0x10]
+    stp  d12, d13, [sp, #0x20]
+    stp  d14, d15, [sp, #0x30]
+
+    # save x19-x30
+    stp  x19, x20, [sp, #0x40]
+    stp  x21, x22, [sp, #0x50]
+    stp  x23, x24, [sp, #0x60]
+    stp  x25, x26, [sp, #0x70]
+    stp  x27, x28, [sp, #0x80]
+    stp  x29, x30, [sp, #0x90]
+
+    # save LR as PC
+    str  x30, [sp, #0xa0]
+
+    # store RSP (pointing to context-data) in X5
+    mov  x4, sp
+
+    # restore RSP (pointing to context-data) from X1
+    mov  sp, x0
+
+    # load d8 - d15
+    ldp  d8,  d9,  [sp, #0x00]
+    ldp  d10, d11, [sp, #0x10]
+    ldp  d12, d13, [sp, #0x20]
+    ldp  d14, d15, [sp, #0x30]
+
+    # load x19-x30
+    ldp  x19, x20, [sp, #0x40]
+    ldp  x21, x22, [sp, #0x50]
+    ldp  x23, x24, [sp, #0x60]
+    ldp  x25, x26, [sp, #0x70]
+    ldp  x27, x28, [sp, #0x80]
+    ldp  x29, x30, [sp, #0x90]
+
+    # return transfer_t from jump
+    # pass transfer_t as first arg in context function
+    # X0 == FCTX, X1 == DATA
+    mov x0, x4
+
+    # skip pc
+    # restore stack from GP + FPU
+    add  sp, sp, #0xb0
+
+    # jump to ontop-function
+    ret x2
+.size   ontop_fcontext,.-ontop_fcontext
+# Mark that we don't need executable stack.
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/armeabi-v7a/jump_arm_aapcs_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/armeabi-v7a/jump_arm_aapcs_elf_gas.S
new file mode 100644
index 0000000..d0f7fa2
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/armeabi-v7a/jump_arm_aapcs_elf_gas.S
@@ -0,0 +1,86 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/*******************************************************
+ *                                                     *
+ *  -------------------------------------------------  *
+ *  |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  *
+ *  -------------------------------------------------  *
+ *  | 0x0 | 0x4 | 0x8 | 0xc | 0x10| 0x14| 0x18| 0x1c|  *
+ *  -------------------------------------------------  *
+ *  | s16 | s17 | s18 | s19 | s20 | s21 | s22 | s23 |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  8  |  9  |  10 |  11 |  12 |  13 |  14 |  15 |  *
+ *  -------------------------------------------------  *
+ *  | 0x20| 0x24| 0x28| 0x2c| 0x30| 0x34| 0x38| 0x3c|  *
+ *  -------------------------------------------------  *
+ *  | s24 | s25 | s26 | s27 | s28 | s29 | s30 | s31 |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  16 |  17 |  18 |  19 |  20 |  21 |  22 |  23 |  *
+ *  -------------------------------------------------  *
+ *  | 0x40| 0x44| 0x48| 0x4c| 0x50| 0x54| 0x58| 0x5c|  *
+ *  -------------------------------------------------  *
+ *  |hiddn|  v1 |  v2 |  v3 |  v4 |  v5 |  v6 |  v7 |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  24 |  25 |  26 |  27 |  28 |  29 |  30 |  31 |  *
+ *  -------------------------------------------------  *
+ *  | 0x60| 0x64| 0x68| 0x6c| 0x70| 0x74| 0x78| 0x7c|  *
+ *  -------------------------------------------------  *
+ *  |  v8 |  lr |  pc | FCTX| DATA|                 |  *
+ *  -------------------------------------------------  *
+ *                                                     *
+ *******************************************************/
+
+.text
+.globl jump_fcontext
+.align 2
+.type jump_fcontext,%function
+jump_fcontext:
+    @ save LR as PC
+    push {lr}
+    @ save hidden,V1-V8,LR
+    push {a1,v1-v8,lr}
+
+    @ prepare stack for FPU
+    sub  sp, sp, #64
+#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
+    @ save S16-S31
+    vstmia sp, {d8-d15}
+#endif
+
+    @ store RSP (pointing to context-data) in A1
+    mov  a1, sp
+
+    @ restore RSP (pointing to context-data) from A2
+    mov  sp, a2
+
+#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
+    @ restore S16-S31
+    vldmia  sp, {d8-d15}
+#endif
+    @ prepare stack for FPU
+    add  sp, sp, #64
+
+    @ restore hidden,V1-V8,LR
+    pop {a4,v1-v8,lr}
+
+    @ return transfer_t from jump
+    str  a1, [a4, #0]
+    str  a3, [a4, #4]
+    @ pass transfer_t as first arg in context function
+    @ A1 == FCTX, A2 == DATA
+    mov  a2, a3
+
+    @ restore PC
+    pop {pc}
+.size jump_fcontext,.-jump_fcontext
+
+@ Mark that we don't need executable stack.
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/armeabi-v7a/make_arm_aapcs_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/armeabi-v7a/make_arm_aapcs_elf_gas.S
new file mode 100644
index 0000000..993dac1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/armeabi-v7a/make_arm_aapcs_elf_gas.S
@@ -0,0 +1,79 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/*******************************************************
+ *                                                     *
+ *  -------------------------------------------------  *
+ *  |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  *
+ *  -------------------------------------------------  *
+ *  | 0x0 | 0x4 | 0x8 | 0xc | 0x10| 0x14| 0x18| 0x1c|  *
+ *  -------------------------------------------------  *
+ *  | s16 | s17 | s18 | s19 | s20 | s21 | s22 | s23 |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  8  |  9  |  10 |  11 |  12 |  13 |  14 |  15 |  *
+ *  -------------------------------------------------  *
+ *  | 0x20| 0x24| 0x28| 0x2c| 0x30| 0x34| 0x38| 0x3c|  *
+ *  -------------------------------------------------  *
+ *  | s24 | s25 | s26 | s27 | s28 | s29 | s30 | s31 |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  16 |  17 |  18 |  19 |  20 |  21 |  22 |  23 |  *
+ *  -------------------------------------------------  *
+ *  | 0x40| 0x44| 0x48| 0x4c| 0x50| 0x54| 0x58| 0x5c|  *
+ *  -------------------------------------------------  *
+ *  |hiddn|  v1 |  v2 |  v3 |  v4 |  v5 |  v6 |  v7 |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  24 |  25 |  26 |  27 |  28 |  29 |  30 |  31 |  *
+ *  -------------------------------------------------  *
+ *  | 0x60| 0x64| 0x68| 0x6c| 0x70| 0x74| 0x78| 0x7c|  *
+ *  -------------------------------------------------  *
+ *  |  v8 |  lr |  pc | FCTX| DATA|                 |  *
+ *  -------------------------------------------------  *
+ *                                                     *
+ *******************************************************/
+
+.text
+.globl make_fcontext
+.align 2
+.type make_fcontext,%function
+make_fcontext:
+    @ shift address in A1 to lower 16 byte boundary
+    bic  a1, a1, #15
+
+    @ reserve space for context-data on context-stack
+    sub  a1, a1, #128
+
+    @ third arg of make_fcontext() == address of context-function
+    str  a3, [a1, #104]
+
+    @ compute address of returned transfer_t
+    add  a2, a1, #108
+    mov  a3, a2
+    str  a3, [a1, #64]
+
+    @ compute abs address of label finish
+    adr  a2, finish
+    @ save address of finish as return-address for context-function
+    @ will be entered after context-function returns
+    str  a2, [a1, #100]
+
+#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
+#endif
+
+    bx  lr @ return pointer to context-data
+
+finish:
+    @ exit code is zero
+    mov  a1, #0
+    @ exit application
+    bl  _exit@PLT
+.size make_fcontext,.-make_fcontext
+
+@ Mark that we don't need executable stack.
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/armeabi-v7a/ontop_arm_aapcs_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/armeabi-v7a/ontop_arm_aapcs_elf_gas.S
new file mode 100644
index 0000000..9d9198f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/armeabi-v7a/ontop_arm_aapcs_elf_gas.S
@@ -0,0 +1,91 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/*******************************************************
+ *                                                     *
+ *  -------------------------------------------------  *
+ *  |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  *
+ *  -------------------------------------------------  *
+ *  | 0x0 | 0x4 | 0x8 | 0xc | 0x10| 0x14| 0x18| 0x1c|  *
+ *  -------------------------------------------------  *
+ *  | s16 | s17 | s18 | s19 | s20 | s21 | s22 | s23 |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  8  |  9  |  10 |  11 |  12 |  13 |  14 |  15 |  *
+ *  -------------------------------------------------  *
+ *  | 0x20| 0x24| 0x28| 0x2c| 0x30| 0x34| 0x38| 0x3c|  *
+ *  -------------------------------------------------  *
+ *  | s24 | s25 | s26 | s27 | s28 | s29 | s30 | s31 |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  16 |  17 |  18 |  19 |  20 |  21 |  22 |  23 |  *
+ *  -------------------------------------------------  *
+ *  | 0x40| 0x44| 0x48| 0x4c| 0x50| 0x54| 0x58| 0x5c|  *
+ *  -------------------------------------------------  *
+ *  |hiddn|  v1 |  v2 |  v3 |  v4 |  v5 |  v6 |  v7 |  *
+ *  -------------------------------------------------  *
+ *  -------------------------------------------------  *
+ *  |  24 |  25 |  26 |  27 |  28 |  29 |  30 |  31 |  *
+ *  -------------------------------------------------  *
+ *  | 0x60| 0x64| 0x68| 0x6c| 0x70| 0x74| 0x78| 0x7c|  *
+ *  -------------------------------------------------  *
+ *  |  v8 |  lr |  pc | FCTX| DATA|                 |  *
+ *  -------------------------------------------------  *
+ *                                                     *
+ *******************************************************/
+
+.text
+.globl ontop_fcontext
+.align 2
+.type ontop_fcontext,%function
+ontop_fcontext:
+    @ save LR as PC
+    push {lr}
+    @ save hidden,V1-V8,LR
+    push {a1,v1-v8,lr}
+
+    @ prepare stack for FPU
+    sub  sp, sp, #64
+#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
+    @ save S16-S31
+    vstmia sp, {d8-d15}
+#endif
+
+    @ store RSP (pointing to context-data) in A1
+    mov  a1, sp
+
+    @ restore RSP (pointing to context-data) from A2
+    mov  sp, a2
+
+    @ store parent context in A2
+    mov  a2, a1
+
+#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
+    @ restore S16-S31
+    vldmia  sp, {d8-d15}
+#endif
+    @ prepare stack for FPU
+    add  sp, sp, #64
+
+    @ restore hidden,V1-V8,LR
+    pop {a1,v1-v8,lr}
+
+    @ return transfer_t from jump
+    str  a2, [a1, #0]
+    str  a3, [a1, #4]
+    @ pass transfer_t as first arg in context function
+    @ A1 == hidden, A2 == FCTX, A3 == DATA
+
+    @ skip PC
+    add  sp, sp, #4
+
+    @ jump to ontop-function
+    bx  a4
+.size ontop_fcontext,.-ontop_fcontext
+
+@ Mark that we don't need executable stack.
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86/jump_i386_sysv_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86/jump_i386_sysv_elf_gas.S
new file mode 100644
index 0000000..25f01db
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86/jump_i386_sysv_elf_gas.S
@@ -0,0 +1,78 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/****************************************************************************************
+ *                                                                                      *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|   EDI   |   ESI   |   EBX    |   EBP   |   EIP   |  hidden |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    8    |    9    |    10   |    11   |    12    |    13   |    14   |    15   |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x20  |   0x24  |                                                            |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    to   |   data  |                                                            |  *
+ *  ----------------------------------------------------------------------------------  *
+ *                                                                                      *
+ ****************************************************************************************/
+
+.text
+.globl jump_fcontext
+.align 2
+.type jump_fcontext,@function
+jump_fcontext:
+    leal  -0x18(%esp), %esp  /* prepare stack */
+
+    stmxcsr  (%esp)     /* save MMX control- and status-word */
+    fnstcw   0x4(%esp)  /* save x87 control-word */
+
+    movl  %edi, 0x8(%esp)  /* save EDI */
+    movl  %esi, 0xc(%esp)  /* save ESI */
+    movl  %ebx, 0x10(%esp)  /* save EBX */
+    movl  %ebp, 0x14(%esp)  /* save EBP */
+
+    /* store ESP (pointing to context-data) in ECX */
+    movl  %esp, %ecx
+
+    /* first arg of jump_fcontext() == fcontext to jump to */
+    movl  0x20(%esp), %eax
+
+    /* second arg of jump_fcontext() == data to be transferred */
+    movl  0x24(%esp), %edx
+
+    /* restore ESP (pointing to context-data) from EAX */
+    movl  %eax, %esp
+
+    /* address of returned transport_t */
+    movl 0x1c(%esp), %eax
+    /* return parent fcontext_t */
+    movl  %ecx, (%eax)
+    /* return data */
+    movl %edx, 0x4(%eax)
+
+    movl  0x18(%esp), %ecx  /* restore EIP */
+
+    ldmxcsr  (%esp)     /* restore MMX control- and status-word */
+    fldcw    0x4(%esp)  /* restore x87 control-word */
+
+    movl  0x8(%esp), %edi  /* restore EDI */
+    movl  0xc(%esp), %esi  /* restore ESI */
+    movl  0x10(%esp), %ebx  /* restore EBX */
+    movl  0x14(%esp), %ebp  /* restore EBP */
+
+    leal  0x20(%esp), %esp  /* prepare stack */
+
+    /* jump to context */
+    jmp *%ecx
+.size jump_fcontext,.-jump_fcontext
+
+/* Mark that we don't need executable stack.  */
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86/make_i386_sysv_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86/make_i386_sysv_elf_gas.S
new file mode 100644
index 0000000..de77e88
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86/make_i386_sysv_elf_gas.S
@@ -0,0 +1,106 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/****************************************************************************************
+ *                                                                                      *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|   EDI   |   ESI   |   EBX    |   EBP   |   EIP   |  hidden |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    8    |    9    |    10   |    11   |    12    |    13   |    14   |    15   |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x20  |   0x24  |                                                            |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    to   |   data  |                                                            |  *
+ *  ----------------------------------------------------------------------------------  *
+ *                                                                                      *
+ ****************************************************************************************/
+
+.text
+.globl make_fcontext
+.align 2
+.type make_fcontext,@function
+make_fcontext:
+    /* first arg of make_fcontext() == top of context-stack */
+    movl  0x4(%esp), %eax
+
+    /* reserve space for first argument of context-function
+       eax might already point to a 16byte border */
+    leal  -0x8(%eax), %eax
+
+    /* shift address in EAX to lower 16 byte boundary */
+    andl  $-16, %eax
+
+    /* reserve space for context-data on context-stack */
+    leal  -0x28(%eax), %eax
+
+    /* third arg of make_fcontext() == address of context-function */
+    /* stored in EBX */
+    movl  0xc(%esp), %ecx
+    movl  %ecx, 0x10(%eax)
+
+    /* save MMX control- and status-word */
+    stmxcsr (%eax)
+    /* save x87 control-word */
+    fnstcw  0x4(%eax)
+
+    /* return transport_t */
+    /* FCTX == EDI, DATA == ESI */
+    leal  0x8(%eax), %ecx
+    movl  %ecx, 0x1c(%eax)
+
+    /* compute abs address of label trampoline */
+    call  1f
+    /* address of trampoline 1 */
+1:  popl  %ecx
+    /* compute abs address of label trampoline */
+    addl  $trampoline-1b, %ecx
+    /* save address of trampoline as return address */
+    /* will be entered after calling jump_fcontext() first time */
+    movl  %ecx, 0x18(%eax)
+
+    /* compute abs address of label finish */
+    call  2f
+    /* address of label 2 */
+2:  popl  %ecx
+    /* compute abs address of label finish */
+    addl  $finish-2b, %ecx
+    /* save address of finish as return-address for context-function */
+    /* will be entered after context-function returns */
+    movl  %ecx, 0x14(%eax) 
+
+    ret /* return pointer to context-data */
+
+trampoline:
+    /* move transport_t for entering context-function */
+    movl  %edi, (%esp)
+    movl  %esi, 0x4(%esp)
+    pushl %ebp
+    /* jump to context-function */
+    jmp *%ebx
+
+finish:
+    call  3f
+    /* address of label 3 */
+3:  popl  %ebx
+    /* compute address of GOT and store it in EBX */
+    addl  $_GLOBAL_OFFSET_TABLE_+[.-3b], %ebx
+
+    /* exit code is zero */
+    xorl  %eax, %eax
+    movl  %eax, (%esp)
+    /* exit application */
+    call  _exit@PLT
+    hlt
+.size make_fcontext,.-make_fcontext
+
+/* Mark that we don't need executable stack.  */
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86/ontop_i386_sysv_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86/ontop_i386_sysv_elf_gas.S
new file mode 100644
index 0000000..d3a6692
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86/ontop_i386_sysv_elf_gas.S
@@ -0,0 +1,85 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/****************************************************************************************
+ *                                                                                      *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|   EDI   |   ESI   |   EBX    |   EBP   |   EIP   |  hidden |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    8    |    9    |    10   |    11   |    12    |    13   |    14   |    15   |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x20  |   0x24  |                                                            |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    to   |   data  |                                                            |  *
+ *  ----------------------------------------------------------------------------------  *
+ *                                                                                      *
+ ****************************************************************************************/
+
+.text
+.globl ontop_fcontext
+.align 2
+.type ontop_fcontext,@function
+ontop_fcontext:
+    leal  -0x18(%esp), %esp  /* prepare stack */
+
+    stmxcsr  (%esp)     /* save MMX control- and status-word */
+    fnstcw   0x4(%esp)  /* save x87 control-word */
+
+    movl  %edi, 0x8(%esp)  /* save EDI */
+    movl  %esi, 0xc(%esp)  /* save ESI */
+    movl  %ebx, 0x10(%esp)  /* save EBX */
+    movl  %ebp, 0x14(%esp)  /* save EBP */
+
+    /* store ESP (pointing to context-data) in ECX */
+    movl  %esp, %ecx
+
+    /* first arg of ontop_fcontext() == fcontext to jump to */
+    movl  0x20(%esp), %eax
+
+    /* pass parent fcontext_t */
+    movl  %ecx, 0x20(%eax)
+
+    /* second arg of ontop_fcontext() == data to be transferred */
+    movl  0x24(%esp), %ecx
+
+    /* pass data */
+    movl %ecx, 0x24(%eax)
+
+    /* third arg of ontop_fcontext() == ontop-function */
+    movl  0x28(%esp), %ecx
+
+    /* restore ESP (pointing to context-data) from EAX */
+    movl  %eax, %esp
+
+    /* address of returned transport_t */
+    movl 0x1c(%esp), %eax
+    /* return parent fcontext_t */
+    movl  %ecx, (%eax)
+    /* return data */
+    movl %edx, 0x4(%eax)
+
+    ldmxcsr  (%esp)     /* restore MMX control- and status-word */
+    fldcw    0x4(%esp)  /* restore x87 control-word */
+
+    movl  0x8(%esp), %edi  /* restore EDI */
+    movl  0xc(%esp), %esi  /* restore ESI */
+    movl  0x10(%esp), %ebx  /* restore EBX */
+    movl  0x14(%esp), %ebp  /* restore EBP */
+
+    leal  0x18(%esp), %esp  /* prepare stack */
+
+    /* jump to context */
+    jmp *%ecx
+.size ontop_fcontext,.-ontop_fcontext
+
+/* Mark that we don't need executable stack.  */
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86_64/jump_x86_64_sysv_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86_64/jump_x86_64_sysv_elf_gas.S
new file mode 100644
index 0000000..0194238
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86_64/jump_x86_64_sysv_elf_gas.S
@@ -0,0 +1,76 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+            http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/****************************************************************************************
+ *                                                                                      *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|        R12        |         R13        |        R14        |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    8    |    9    |   10    |   11    |    12    |    13   |    14   |    15   |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x20  |   0x24  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |        R15        |        RBX        |         RBP        |        RIP        |  *
+ *  ----------------------------------------------------------------------------------  *
+ *                                                                                      *
+ ****************************************************************************************/
+
+.text
+.globl jump_fcontext
+.type jump_fcontext,@function
+.align 16
+jump_fcontext:
+    leaq  -0x38(%rsp), %rsp /* prepare stack */
+
+    stmxcsr  (%rsp)     /* save MMX control- and status-word */
+    fnstcw   0x4(%rsp)  /* save x87 control-word */
+
+    movq  %r12, 0x8(%rsp)  /* save R12 */
+    movq  %r13, 0x10(%rsp)  /* save R13 */
+    movq  %r14, 0x18(%rsp)  /* save R14 */
+    movq  %r15, 0x20(%rsp)  /* save R15 */
+    movq  %rbx, 0x28(%rsp)  /* save RBX */
+    movq  %rbp, 0x30(%rsp)  /* save RBP */
+
+    /* store RSP (pointing to context-data) in RAX */
+    movq  %rsp, %rax
+
+    /* restore RSP (pointing to context-data) from RDI */
+    movq  %rdi, %rsp
+
+    movq  0x38(%rsp), %r8  /* restore return-address */
+
+    ldmxcsr  (%rsp)     /* restore MMX control- and status-word */
+    fldcw    0x4(%rsp)  /* restore x87 control-word */
+
+    movq  0x8(%rsp), %r12  /* restore R12 */
+    movq  0x10(%rsp), %r13  /* restore R13 */
+    movq  0x18(%rsp), %r14  /* restore R14 */
+    movq  0x20(%rsp), %r15  /* restore R15 */
+    movq  0x28(%rsp), %rbx  /* restore RBX */
+    movq  0x30(%rsp), %rbp  /* restore RBP */
+
+    leaq  0x40(%rsp), %rsp /* prepare stack */
+
+    /* return transfer_t from jump */
+    /* RAX == fctx, RDX == data */
+    movq  %rsi, %rdx
+    /* pass transfer_t as first arg in context function */
+    /* RDI == fctx, RSI == data */
+    movq  %rax, %rdi
+
+    /* indirect jump to context */
+    jmp  *%r8
+.size jump_fcontext,.-jump_fcontext
+
+/* Mark that we don't need executable stack.  */
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86_64/make_x86_64_sysv_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86_64/make_x86_64_sysv_elf_gas.S
new file mode 100644
index 0000000..25a0c00
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86_64/make_x86_64_sysv_elf_gas.S
@@ -0,0 +1,81 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+            http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/****************************************************************************************
+ *                                                                                      *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|        R12        |         R13        |        R14        |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    8    |    9    |   10    |   11    |    12    |    13   |    14   |    15   |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x20  |   0x24  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |        R15        |        RBX        |         RBP        |        RIP        |  *
+ *  ----------------------------------------------------------------------------------  *
+ *                                                                                      *
+ ****************************************************************************************/
+
+.text
+.globl make_fcontext
+.type make_fcontext,@function
+.align 16
+make_fcontext:
+    /* first arg of make_fcontext() == top of context-stack */
+    movq  %rdi, %rax
+
+    /* shift address in RAX to lower 16 byte boundary */
+    andq  $-16, %rax
+
+    /* reserve space for context-data on context-stack */
+    /* on context-function entry: (RSP -0x8) % 16 == 0 */
+    leaq  -0x40(%rax), %rax
+
+    /* third arg of make_fcontext() == address of context-function */
+    /* stored in RBX */
+    movq  %rdx, 0x28(%rax)
+
+    /* save MMX control- and status-word */
+    stmxcsr  (%rax)
+    /* save x87 control-word */
+    fnstcw   0x4(%rax)
+
+    /* compute abs address of label trampoline */
+    leaq  trampoline(%rip), %rcx
+    /* save address of trampoline as return-address for context-function */
+    /* will be entered after calling jump_fcontext() first time */
+    movq  %rcx, 0x38(%rax)
+
+    /* compute abs address of label finish */
+    leaq  finish(%rip), %rcx
+    /* save address of finish as return-address for context-function */
+    /* will be entered after context-function returns */
+    movq  %rcx, 0x30(%rax)
+
+    ret /* return pointer to context-data */
+
+trampoline:
+    /* store return address on stack */
+    /* fix stack alignment */
+    push %rbp
+    /* jump to context-function */
+    jmp *%rbx
+
+finish:
+    /* exit code is zero */
+    xorq  %rdi, %rdi
+    /* exit application */
+    call  _exit@PLT
+    hlt
+.size make_fcontext,.-make_fcontext
+
+/* Mark that we don't need executable stack. */
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86_64/ontop_x86_64_sysv_elf_gas.S b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86_64/ontop_x86_64_sysv_elf_gas.S
new file mode 100644
index 0000000..d2a9373
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/boost/asm/x86_64/ontop_x86_64_sysv_elf_gas.S
@@ -0,0 +1,79 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+            http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/****************************************************************************************
+ *                                                                                      *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|        R12        |         R13        |        R14        |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    8    |    9    |   10    |   11    |    12    |    13   |    14   |    15   |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |   0x20  |   0x24  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |        R15        |        RBX        |         RBP        |        RIP        |  *
+ *  ----------------------------------------------------------------------------------  *
+ *                                                                                      *
+ ****************************************************************************************/
+
+.text
+.globl ontop_fcontext
+.type ontop_fcontext,@function
+.align 16
+ontop_fcontext:
+    /* preserve ontop-function in R8 */
+    movq  %rdx, %r8
+
+    leaq  -0x38(%rsp), %rsp /* prepare stack */
+
+    stmxcsr  (%rsp)     /* save MMX control- and status-word */
+    fnstcw   0x4(%rsp)  /* save x87 control-word */
+
+    movq  %r12, 0x8(%rsp)  /* save R12 */
+    movq  %r13, 0x10(%rsp)  /* save R13 */
+    movq  %r14, 0x18(%rsp)  /* save R14 */
+    movq  %r15, 0x20(%rsp)  /* save R15 */
+    movq  %rbx, 0x28(%rsp)  /* save RBX */
+    movq  %rbp, 0x30(%rsp)  /* save RBP */
+
+    /* store RSP (pointing to context-data) in RAX */
+    movq  %rsp, %rax
+
+    /* restore RSP (pointing to context-data) from RDI */
+    movq  %rdi, %rsp
+
+    ldmxcsr  (%rsp)     /* restore MMX control- and status-word */
+    fldcw    0x4(%rsp)  /* restore x87 control-word */
+
+    movq  0x8(%rsp), %r12  /* restore R12 */
+    movq  0x10(%rsp), %r13  /* restore R13 */
+    movq  0x18(%rsp), %r14  /* restore R14 */
+    movq  0x20(%rsp), %r15  /* restore R15 */
+    movq  0x28(%rsp), %rbx  /* restore RBX */
+    movq  0x30(%rsp), %rbp  /* restore RBP */
+
+    leaq  0x38(%rsp), %rsp /* prepare stack */
+
+    /* return transfer_t from jump */
+    /* RAX == fctx, RDX == data */
+    movq  %rsi, %rdx
+    /* pass transfer_t as first arg in context function */
+    /* RDI == fctx, RSI == data */
+    movq  %rax, %rdi
+
+    /* keep return-address on stack */
+
+    /* indirect jump to context */
+    jmp  *%r8
+.size ontop_fcontext,.-ontop_fcontext
+
+/* Mark that we don't need executable stack.  */
+.section .note.GNU-stack,"",%progbits
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/double-conversion/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/double-conversion/CMakeLists.txt
new file mode 100644
index 0000000..d32b34c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/double-conversion/CMakeLists.txt
@@ -0,0 +1,23 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-Wno-unused-variable -Wno-unused-local-typedefs)
+
+add_library(double-conversion
+        STATIC
+        double-conversion/bignum.cc
+        double-conversion/bignum-dtoa.cc
+        double-conversion/cached-powers.cc
+        double-conversion/diy-fp.cc
+        double-conversion/double-conversion.cc
+        double-conversion/fast-dtoa.cc
+        double-conversion/fixed-dtoa.cc
+        double-conversion/strtod.cc)
+
+target_include_directories(double-conversion PUBLIC .)
+
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/fmt/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/fmt/CMakeLists.txt
new file mode 100644
index 0000000..65d6a74
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/fmt/CMakeLists.txt
@@ -0,0 +1,13 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(-std=c++20 -fexceptions)
+
+add_library(fmt STATIC src/format.cc)
+
+target_include_directories(fmt PUBLIC include)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/folly/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/folly/CMakeLists.txt
new file mode 100644
index 0000000..9cef8e8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/folly/CMakeLists.txt
@@ -0,0 +1,70 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+SET(folly_FLAGS
+        -DFOLLY_NO_CONFIG=1
+        -DFOLLY_HAVE_CLOCK_GETTIME=1
+        -DFOLLY_USE_LIBCPP=1
+        -DFOLLY_CFG_NO_COROUTINES=1
+        -DFOLLY_MOBILE=1
+        -DFOLLY_HAVE_RECVMMSG=1
+        -DFOLLY_HAVE_PTHREAD=1
+        # If APP_PLATFORM in Application.mk targets android-23 above, please comment
+        # the following line. NDK uses GNU style stderror_r() after API 23.
+        -DFOLLY_HAVE_XSI_STRERROR_R=1
+        )
+
+##################
+### folly_runtime ###
+##################
+
+SET(folly_runtime_SRC
+        folly/Conv.cpp
+        folly/Demangle.cpp
+        folly/dynamic.cpp
+        folly/FileUtil.cpp
+        folly/Format.cpp
+        folly/json_pointer.cpp
+        folly/json.cpp
+        folly/ScopeGuard.cpp
+        folly/SharedMutex.cpp
+        folly/String.cpp
+        folly/Unicode.cpp
+        folly/concurrency/CacheLocality.cpp
+        folly/container/detail/F14Table.cpp
+        folly/detail/FileUtilDetail.cpp
+        folly/detail/Futex.cpp
+        folly/detail/SplitStringSimd.cpp
+        folly/detail/UniqueInstance.cpp
+        folly/hash/SpookyHashV2.cpp
+        folly/lang/CString.cpp
+        folly/lang/SafeAssert.cpp
+        folly/lang/ToAscii.cpp
+        folly/memory/detail/MallocImpl.cpp
+        folly/net/NetOps.cpp
+        folly/portability/SysUio.cpp
+        folly/synchronization/SanitizeThread.cpp
+        folly/synchronization/ParkingLot.cpp
+        folly/system/AtFork.cpp
+        folly/system/ThreadId.cpp
+        folly/system/ThreadName.cpp)
+
+add_library(folly_runtime SHARED ${folly_runtime_SRC})
+
+target_compile_options(folly_runtime
+        PRIVATE
+        -fexceptions
+        -fno-omit-frame-pointer
+        -frtti
+        -Wno-sign-compare
+        ${folly_FLAGS})
+
+target_compile_options(folly_runtime PUBLIC ${folly_FLAGS})
+
+target_include_directories(folly_runtime PUBLIC .)
+target_link_libraries(folly_runtime glog double-conversion boost fmt)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/glog/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/glog/CMakeLists.txt
new file mode 100644
index 0000000..4f07a4e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/glog/CMakeLists.txt
@@ -0,0 +1,35 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_compile_options(
+        -Wwrite-strings
+        -Woverloaded-virtual
+        -Wno-sign-compare
+        -DNDEBUG
+        -g
+        -O2
+        -DHAVE_PREAD=1
+)
+
+add_library(glog
+        SHARED
+        glog-0.3.5/src/demangle.cc
+        glog-0.3.5/src/logging.cc
+        glog-0.3.5/src/raw_logging.cc
+        glog-0.3.5/src/signalhandler.cc
+        glog-0.3.5/src/symbolize.cc
+        glog-0.3.5/src/utilities.cc
+        glog-0.3.5/src/vlog_is_on.cc
+        )
+
+# For private compilation, we include all the headers.
+# config.h is also there.
+target_include_directories(glog PRIVATE .)
+# For consumer, we set the `exported` dir as the
+# include folder.
+target_include_directories(glog PUBLIC exported)
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/glog/config.h b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/glog/config.h
new file mode 100644
index 0000000..ab05c5a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/glog/config.h
@@ -0,0 +1,182 @@
+/* src/config.h.  Generated from config.h.in by configure.  */
+/* src/config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* define if glog doesn't use RTTI */
+#define DISABLE_RTTI 1
+
+/* Namespace for Google classes */
+#define GOOGLE_NAMESPACE google
+
+/* Define if you have the `dladdr' function */
+#define HAVE_DLADDR 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#define HAVE_DLFCN_H 1
+
+/* Define to 1 if you have the <execinfo.h> header file. */
+/* #undef HAVE_EXECINFO_H */
+
+/* Define if you have the `fcntl' function */
+#define HAVE_FCNTL 1
+
+/* Define to 1 if you have the <glob.h> header file. */
+/* #undef HAVE_GLOB_H */
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#define HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the `pthread' library (-lpthread). */
+/* #undef HAVE_LIBPTHREAD */
+
+/* Define to 1 if you have the <libunwind.h> header file. */
+/* #undef HAVE_LIBUNWIND_H */
+
+/* define if you have google gflags library */
+/* #undef HAVE_LIB_GFLAGS */
+
+/* define if you have google gmock library */
+/* #undef HAVE_LIB_GMOCK */
+
+/* define if you have google gtest library */
+/* #undef HAVE_LIB_GTEST */
+
+/* define if you have libunwind */
+/* #undef HAVE_LIB_UNWIND */
+
+/* Define to 1 if you have the <memory.h> header file. */
+#define HAVE_MEMORY_H 1
+
+/* define if the compiler implements namespaces */
+#define HAVE_NAMESPACES 1
+
+/* NDK android-16 provides ssize_t pread(int, void*, size_t, off_t) */
+#define HAVE_PREAD 1
+
+/* Define if you have POSIX threads libraries and header files. */
+#define HAVE_PTHREAD 1
+
+/* Define to 1 if you have the <pwd.h> header file. */
+#define HAVE_PWD_H 1
+
+/* define if the compiler implements pthread_rwlock_* */
+#define HAVE_RWLOCK 1
+
+/* Define if you have the `sigaltstack' function */
+#define HAVE_SIGALTSTACK 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#define HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#define HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#define HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#define HAVE_STRING_H 1
+
+/* Define to 1 if you have the <syscall.h> header file. */
+/* #undef HAVE_SYSCALL_H */
+
+/* Define to 1 if you have the <syslog.h> header file. */
+#define HAVE_SYSLOG_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#define HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/syscall.h> header file. */
+#define HAVE_SYS_SYSCALL_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#define HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <sys/ucontext.h> header file. */
+/* #undef HAVE_SYS_UCONTEXT_H */
+
+/* Define to 1 if you have the <sys/utsname.h> header file. */
+#define HAVE_SYS_UTSNAME_H 1
+
+/* Define to 1 if you have the <ucontext.h> header file. */
+/* #undef HAVE_UCONTEXT_H */
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#define HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the <unwind.h> header file. */
+#define HAVE_UNWIND_H 1
+
+/* define if the compiler supports using expression for operator */
+#define HAVE_USING_OPERATOR 1
+
+/* define if your compiler has __attribute__ */
+#define HAVE___ATTRIBUTE__ 1
+
+/* define if your compiler has __builtin_expect */
+#define HAVE___BUILTIN_EXPECT 1
+
+/* define if your compiler has __sync_val_compare_and_swap */
+#define HAVE___SYNC_VAL_COMPARE_AND_SWAP 1
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#define LT_OBJDIR ".libs/"
+
+/* Name of package */
+#define PACKAGE "glog"
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "opensource@google.com"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "glog"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "glog 0.3.5"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "glog"
+
+/* Define to the home page for this package. */
+#define PACKAGE_URL ""
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "0.3.5"
+
+/* How to access the PC from a struct ucontext */
+/* #undef PC_FROM_UCONTEXT */
+
+/* Define to necessary symbol if this constant uses a non-standard name on
+   your system. */
+/* #undef PTHREAD_CREATE_JOINABLE */
+
+/* The size of `void *', as computed by sizeof. */
+#define SIZEOF_VOID_P 4
+
+/* Define to 1 if you have the ANSI C header files. */
+/* #undef STDC_HEADERS */
+
+/* the namespace where STL code like vector<> is defined */
+#define STL_NAMESPACE std
+
+/* location of source code */
+#define TEST_SRC_DIR "."
+
+/* Version number of package */
+#define VERSION "0.3.5"
+
+/* Stops putting the code inside the Google namespace */
+#define _END_GOOGLE_NAMESPACE_ }
+
+/* Puts following code inside the Google namespace */
+#define _START_GOOGLE_NAMESPACE_ namespace google {
+
+
+/* TODO(vjn/dreiss): revisit these when use the android-21 (or newer) NDK platform. */
+#undef HAVE_SYSCALL_H
+#undef HAVE_SYS_SYSCALL_H
+#undef OS_LINUX
+#undef OS_MACOSX
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/jsc/CMakeLists.txt b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/jsc/CMakeLists.txt
new file mode 100644
index 0000000..4f72ace
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/jni/third-party/jsc/CMakeLists.txt
@@ -0,0 +1,15 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+add_library(jsc SHARED IMPORTED GLOBAL)
+set_target_properties(jsc
+        PROPERTIES
+        IMPORTED_LOCATION
+        ${CMAKE_CURRENT_SOURCE_DIR}/jni/${ANDROID_ABI}/libjsc.so)
+
+target_include_directories(jsc INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/anim/catalyst_push_up_in.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/anim/catalyst_push_up_in.xml
new file mode 100644
index 0000000..aef91bc
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/anim/catalyst_push_up_in.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+     <translate
+          android:fromYDelta="100%p"
+          android:toYDelta="0"
+          android:duration="@android:integer/config_shortAnimTime"
+          />
+     <alpha
+          android:fromAlpha="0.0"
+          android:toAlpha="1.0"
+          android:duration="@android:integer/config_shortAnimTime"
+          />
+</set>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/anim/catalyst_push_up_out.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/anim/catalyst_push_up_out.xml
new file mode 100644
index 0000000..790e275
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/anim/catalyst_push_up_out.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<set xmlns:android="http://schemas.android.com/apk/res/android">
+     <translate
+          android:fromYDelta="0"
+          android:toYDelta="-100%p"
+          android:duration="@android:integer/config_shortAnimTime"
+          />
+     <alpha
+          android:fromAlpha="1.0"
+          android:toAlpha="0.0"
+          android:duration="@android:integer/config_shortAnimTime"
+          />
+</set>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/drawable/redbox_top_border_background.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/drawable/redbox_top_border_background.xml
new file mode 100644
index 0000000..84ca146
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/drawable/redbox_top_border_background.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item>
+        <shape android:shape="rectangle" >
+            <solid android:color="#1A1A1A" />
+        </shape>
+    </item>
+
+    <item android:bottom="-2dp" android:right="-2dp" android:left="-2dp">
+        <shape>
+            <solid android:color="@android:color/transparent" />
+            <stroke
+                android:width="1dp"
+                android:color="#B3B3B3"
+                />
+        </shape>
+    </item>
+</layer-list>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/dev_loading_view.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/dev_loading_view.xml
new file mode 100644
index 0000000..b7e6b8c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/dev_loading_view.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<TextView
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  android:layout_width="match_parent"
+  android:layout_height="wrap_content"
+  android:background="#404040"
+  android:ellipsize="end"
+  android:gravity="center"
+  android:paddingTop="5dp"
+  android:paddingBottom="5dp"
+  android:paddingStart="8dp"
+  android:paddingEnd="8dp"
+  android:maxLines="1"
+  android:textColor="@android:color/white"
+  android:textSize="12sp"
+  />
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/fps_view.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/fps_view.xml
new file mode 100644
index 0000000..468caa9
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/fps_view.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<merge
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    >
+  <TextView
+      android:id="@+id/fps_text"
+      android:layout_width="wrap_content"
+      android:layout_height="wrap_content"
+      android:layout_margin="3dp"
+      android:background="#a4141823"
+      android:gravity="right"
+      android:layout_gravity="top|right"
+      android:padding="3dp"
+      android:textColor="@android:color/white"
+      android:textSize="11sp"
+      />
+</merge>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/redbox_item_frame.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/redbox_item_frame.xml
new file mode 100644
index 0000000..98d8080
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/redbox_item_frame.xml
@@ -0,0 +1,26 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+  android:layout_width="match_parent"
+  android:layout_height="match_parent"
+  android:orientation="vertical"
+  android:paddingTop="8dp"
+  android:paddingBottom="8dp"
+  android:paddingLeft="16dp"
+  android:paddingRight="16dp"
+    >
+  <TextView
+    android:id="@+id/rn_frame_method"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:textColor="@android:color/white"
+    android:textSize="14sp"
+    android:fontFamily="monospace"
+    />
+  <TextView
+    android:id="@+id/rn_frame_file"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:textColor="#B3B3B3"
+    android:textSize="12sp"
+    android:fontFamily="monospace"
+    />
+</LinearLayout>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/redbox_item_title.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/redbox_item_title.xml
new file mode 100644
index 0000000..9736037
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/redbox_item_title.xml
@@ -0,0 +1,11 @@
+<TextView xmlns:android="http://schemas.android.com/apk/res/android"
+  android:id="@+id/catalyst_redbox_title"
+  android:layout_width="match_parent"
+  android:layout_height="wrap_content"
+  android:padding="16dp"
+  android:gravity="center_vertical"
+  android:textColor="@android:color/white"
+  android:textSize="16sp"
+  android:textStyle="bold"
+  android:background="#D01926"
+  />
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/redbox_view.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/redbox_view.xml
new file mode 100644
index 0000000..514d39d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/layout/redbox_view.xml
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:background="#1A1A1A"
+    >
+    <ListView
+        android:id="@+id/rn_redbox_stack"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:divider="@null"
+        android:dividerHeight="0dp"
+        />
+    <View
+        android:id="@+id/rn_redbox_line_separator"
+        android:layout_width="match_parent"
+        android:layout_height="1dp"
+        android:background="@android:color/darker_gray"
+        android:visibility="gone"
+        />
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        >
+        <ProgressBar
+            android:id="@+id/rn_redbox_loading_indicator"
+            android:layout_width="wrap_content"
+            android:layout_height="match_parent"
+            style="@android:style/Widget.ProgressBar.Small"
+            android:indeterminateOnly="true"
+            android:visibility="gone"
+            android:paddingLeft="16dp"
+            />
+        <TextView
+            android:id="@+id/rn_redbox_report_label"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:textColor="@android:color/white"
+            android:textSize="14sp"
+            android:fontFamily="monospace"
+            android:visibility="gone"
+            android:paddingTop="16dp"
+            android:paddingBottom="16dp"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp"
+            android:lineSpacingExtra="4dp"
+            />
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:background="@drawable/redbox_top_border_background"
+        >
+        <Button
+            android:id="@+id/rn_redbox_dismiss_button"
+            android:text="@string/catalyst_dismiss_button"
+            style="@style/redboxButton"
+            />
+        <Button
+            android:id="@+id/rn_redbox_reload_button"
+            android:text="@string/catalyst_reload_button"
+            style="@style/redboxButton"
+            />
+        <Button
+            android:id="@+id/rn_redbox_report_button"
+            android:text="@string/catalyst_report_button"
+            android:visibility="gone"
+            style="@style/redboxButton"
+            />
+    </LinearLayout>
+</LinearLayout>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-af/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-af/strings.xml
new file mode 100644
index 0000000..24e1b69
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-af/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: af_ZA -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ar/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ar/strings.xml
new file mode 100644
index 0000000..9ee5b12
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ar/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ar_AR -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-az/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-az/strings.xml
new file mode 100644
index 0000000..8d1df47
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-az/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: az_AZ -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-be/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-be/strings.xml
new file mode 100644
index 0000000..ce84b2a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-be/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: be_BY -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-bg/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-bg/strings.xml
new file mode 100644
index 0000000..09b7b31
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-bg/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: bg_BG -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-bn/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-bn/strings.xml
new file mode 100644
index 0000000..b5d5166
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-bn/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: bn_IN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ca/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ca/strings.xml
new file mode 100644
index 0000000..d839c0b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ca/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ca_ES -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-cs/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-cs/strings.xml
new file mode 100644
index 0000000..b556b85
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-cs/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: cs_CZ -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-da/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-da/strings.xml
new file mode 100644
index 0000000..1fd6723
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-da/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: da_DK -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-de/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-de/strings.xml
new file mode 100644
index 0000000..b4629c9
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-de/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: de_DE -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-el/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-el/strings.xml
new file mode 100644
index 0000000..0604fa1
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-el/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: el_GR -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-en-rGB/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-en-rGB/strings.xml
new file mode 100644
index 0000000..4914778
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-en-rGB/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: en_GB -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-es-rES/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-es-rES/strings.xml
new file mode 100644
index 0000000..025a080
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-es-rES/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: es_ES -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-es/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-es/strings.xml
new file mode 100644
index 0000000..bfb1514
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-es/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: es_LA -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-et/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-et/strings.xml
new file mode 100644
index 0000000..e17476d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-et/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: et_EE -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fa/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fa/strings.xml
new file mode 100644
index 0000000..72270d9
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fa/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fa_IR -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fi/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fi/strings.xml
new file mode 100644
index 0000000..7c49d51
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fi/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fi_FI -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fr-rCA/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fr-rCA/strings.xml
new file mode 100644
index 0000000..d5fe3fb
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fr-rCA/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fr_CA -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fr/strings.xml
new file mode 100644
index 0000000..64b98fc
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-fr/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fr_FR -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-gu/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-gu/strings.xml
new file mode 100644
index 0000000..2a2946b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-gu/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: gu_IN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hi/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hi/strings.xml
new file mode 100644
index 0000000..3bca368
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hi/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hi_IN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hr/strings.xml
new file mode 100644
index 0000000..97250a3
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hr/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hr_HR -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hu/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hu/strings.xml
new file mode 100644
index 0000000..7c28e05
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hu/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hu_HU -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hy/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hy/strings.xml
new file mode 100644
index 0000000..9fc19db
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-hy/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hy_AM -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-is/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-is/strings.xml
new file mode 100644
index 0000000..e4a30ca
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-is/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: is_IS -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-it/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-it/strings.xml
new file mode 100644
index 0000000..89dcf44
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-it/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: it_IT -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-iw/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-iw/strings.xml
new file mode 100644
index 0000000..dcca08e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-iw/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: he_IL -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ja/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ja/strings.xml
new file mode 100644
index 0000000..437a25f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ja/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ja_JP -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ka/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ka/strings.xml
new file mode 100644
index 0000000..1c2a251
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ka/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ka_GE -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-kk/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-kk/strings.xml
new file mode 100644
index 0000000..f2afa03
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-kk/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: kk_KZ -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-km/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-km/strings.xml
new file mode 100644
index 0000000..d6ed5fa
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-km/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: km_KH -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-kn/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-kn/strings.xml
new file mode 100644
index 0000000..b4a93b3
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-kn/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: kn_IN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ko/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ko/strings.xml
new file mode 100644
index 0000000..ba31001
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ko/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ko_KR -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ky/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ky/strings.xml
new file mode 100644
index 0000000..8bdeee4
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ky/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ky_KG -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-lo/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-lo/strings.xml
new file mode 100644
index 0000000..d35f4bd
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-lo/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: lo_LA -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-lt/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-lt/strings.xml
new file mode 100644
index 0000000..c3177bb
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-lt/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: lt_LT -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-lv/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-lv/strings.xml
new file mode 100644
index 0000000..a66be9d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-lv/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: lv_LV -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-mk/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-mk/strings.xml
new file mode 100644
index 0000000..1c76e1b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-mk/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: mk_MK -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ml/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ml/strings.xml
new file mode 100644
index 0000000..5d568f3
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ml/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ml_IN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-mn/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-mn/strings.xml
new file mode 100644
index 0000000..2f27b04
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-mn/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: mn_MN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-mr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-mr/strings.xml
new file mode 100644
index 0000000..ad23922
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-mr/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: mr_IN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ms/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ms/strings.xml
new file mode 100644
index 0000000..443eca7
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ms/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ms_MY -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-my/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-my/strings.xml
new file mode 100644
index 0000000..65abfdb
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-my/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: my_MM -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ne/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ne/strings.xml
new file mode 100644
index 0000000..47a8e78
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ne/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ne_NP -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-nl/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-nl/strings.xml
new file mode 100644
index 0000000..75355cf
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-nl/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: nl_NL -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pa/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pa/strings.xml
new file mode 100644
index 0000000..ea45e68
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pa/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pa_IN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pl/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pl/strings.xml
new file mode 100644
index 0000000..4f53d3e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pl/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pl_PL -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pt-rPT/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pt-rPT/strings.xml
new file mode 100644
index 0000000..a0d4564
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pt-rPT/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pt_PT -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pt/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pt/strings.xml
new file mode 100644
index 0000000..3a24466
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-pt/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pt_BR -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ro/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ro/strings.xml
new file mode 100644
index 0000000..445f1af
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ro/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ro_RO -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ru/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ru/strings.xml
new file mode 100644
index 0000000..1105ec0
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ru/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ru_RU -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-si/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-si/strings.xml
new file mode 100644
index 0000000..2153d88
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-si/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: si_LK -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sk/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sk/strings.xml
new file mode 100644
index 0000000..2d1768d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sk/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sk_SK -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sl/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sl/strings.xml
new file mode 100644
index 0000000..a8d2a68
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sl/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sl_SI -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sq/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sq/strings.xml
new file mode 100644
index 0000000..a225539
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sq/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sq_AL -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sr/strings.xml
new file mode 100644
index 0000000..47782d7
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sr/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sr_RS -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sv/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sv/strings.xml
new file mode 100644
index 0000000..2eed928
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sv/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sv_SE -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sw/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sw/strings.xml
new file mode 100644
index 0000000..6dea5b8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-sw/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sw_KE -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ta/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ta/strings.xml
new file mode 100644
index 0000000..f8bfd1c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ta/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ta_IN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-te/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-te/strings.xml
new file mode 100644
index 0000000..241b213
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-te/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: te_IN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-th/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-th/strings.xml
new file mode 100644
index 0000000..a420650
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-th/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: th_TH -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-tr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-tr/strings.xml
new file mode 100644
index 0000000..755cf86
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-tr/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: tr_TR -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-uk/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-uk/strings.xml
new file mode 100644
index 0000000..bf3cc46
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-uk/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: uk_UA -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ur/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ur/strings.xml
new file mode 100644
index 0000000..6d76f39
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-ur/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ur_PK -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-vi/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-vi/strings.xml
new file mode 100644
index 0000000..706622a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-vi/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: vi_VN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zh-rCN/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zh-rCN/strings.xml
new file mode 100644
index 0000000..c50c06c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zh-rCN/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zh_CN -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zh-rHK/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zh-rHK/strings.xml
new file mode 100644
index 0000000..067865f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zh-rHK/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zh_HK -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zh-rTW/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zh-rTW/strings.xml
new file mode 100644
index 0000000..c56baa9
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zh-rTW/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zh_TW -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zu/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zu/strings.xml
new file mode 100644
index 0000000..44cf81d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values-zu/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zu_ZA -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values/colors.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values/colors.xml
new file mode 100644
index 0000000..8ac1a13
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values/colors.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <color name="catalyst_redbox_background">#eecc0000</color>
+  <color name="catalyst_logbox_background">#ffffffff</color>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values/strings.xml
new file mode 100644
index 0000000..7065f16
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values/strings.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string name="catalyst_reload" project="catalyst" translatable="false">Reload</string>
+  <string name="catalyst_reload_error" project="catalyst" translatable="false">Failed to load bundle. Try restarting the bundler or reconnecting your device.</string>
+  <string name="catalyst_change_bundle_location" project="catalyst" translatable="false">Change Bundle Location</string>
+  <string name="catalyst_open_debugger_error" project="catalyst" translatable="false">Failed to open debugger. Please check that the dev server is running and reload the app.</string>
+  <string name="catalyst_debug_open" project="catalyst" translatable="false">Open Debugger</string>
+  <string name="catalyst_debug_open_disabled" project="catalyst" translatable="false">Connect to the bundler to debug JavaScript</string>
+  <string name="catalyst_debug_connecting" project="catalyst" translatable="false">Connecting to debugger...</string>
+  <string name="catalyst_debug_error" project="catalyst" translatable="false">Failed to connect to debugger!</string>
+  <string name="catalyst_hot_reloading" project="catalyst" translatable="false">Enable Fast Refresh</string>
+  <string name="catalyst_hot_reloading_stop" project="catalyst" translatable="false">Disable Fast Refresh</string>
+  <string name="catalyst_hot_reloading_auto_disable" project="catalyst" translatable="false">Disabling Fast Refresh because it requires a development bundle.</string>
+  <string name="catalyst_hot_reloading_auto_enable" project="catalyst" translatable="false">Switching to development bundle in order to enable Fast Refresh.</string>
+  <string name="catalyst_inspector_toggle" project="catalyst" translatable="false">Toggle Element Inspector</string>
+  <string name="catalyst_perf_monitor" project="catalyst" translatable="false">Show Perf Monitor</string>
+  <string name="catalyst_perf_monitor_stop" project="catalyst" translatable="false">Hide Perf Monitor</string>
+  <string name="catalyst_settings" project="catalyst" translatable="false">Settings</string>
+  <string name="catalyst_settings_title" project="catalyst" translatable="false">Debug Settings</string>
+  <string name="catalyst_heap_capture" project="catalyst" translatable="false">Capture Heap</string>
+  <string name="catalyst_dismiss_button" project="catalyst" translatable="false">Dismiss\n(ESC)</string>
+  <string name="catalyst_reload_button" project="catalyst" translatable="false">Reload\n(R,\u00A0R)</string>
+  <string name="catalyst_copy_button" project="catalyst" translatable="false">Copy\n</string>
+  <string name="catalyst_report_button" project="catalyst" translatable="false">Report</string>
+  <string name="catalyst_loading_from_url" project="catalyst" translatable="false">Loading from %1$s…</string>
+  <string name="catalyst_sample_profiler_toggle" project="catalyst" translatable="false">Toggle Sampling Profiler</string>
+  <string name="catalyst_dev_menu_header" project="catalyst" translatable="false">React Native Dev Menu (%1$s)</string>
+  <string name="catalyst_dev_menu_sub_header" project="catalyst" translatable="false">Running %1$s</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values/styles.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values/styles.xml
new file mode 100644
index 0000000..85d0453
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/values/styles.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <style name="Theme" />
+  <style name="Theme.Catalyst"/>
+  <style name="Theme.Catalyst.RedBox">
+    <item name="android:windowBackground">@color/catalyst_redbox_background</item>
+    <item name="android:windowAnimationStyle">@style/Animation.Catalyst.RedBox</item>
+    <item name="android:inAnimation">@android:anim/fade_in</item>
+    <item name="android:outAnimation">@android:anim/fade_out</item>
+    <item name="android:textColor">@android:color/white</item>
+  </style>
+  <style name="Theme.Catalyst.LogBox">
+    <item name="android:windowTranslucentStatus">true</item>
+    <item name="android:windowTranslucentNavigation">false</item>
+    <item name="android:windowBackground">@android:color/transparent</item>
+    <item name="android:windowAnimationStyle">@style/Animation.Catalyst.LogBox</item>
+    <item name="android:inAnimation">@android:anim/fade_in</item>
+    <item name="android:outAnimation">@android:anim/fade_out</item>
+    <item name="android:textColor">@android:color/white</item>
+  </style>
+  <style name="Animation.Catalyst.RedBox" parent="@android:style/Animation">
+    <item name="android:windowEnterAnimation">@anim/catalyst_push_up_in</item>
+    <item name="android:windowExitAnimation">@anim/catalyst_push_up_out</item>
+  </style>
+  <style name="Animation.Catalyst.LogBox" parent="@android:style/Animation">
+    <item name="android:windowEnterAnimation">@anim/catalyst_push_up_in</item>
+    <item name="android:windowExitAnimation">@anim/catalyst_push_up_out</item>
+  </style>
+  <style name="redboxButton">
+    <item name="android:layout_width">0dp</item>
+    <item name="android:layout_height">wrap_content</item>
+    <item name="android:layout_weight">1</item>
+    <item name="android:layout_margin">4dp</item>
+    <item name="android:background">@null</item>
+    <item name="android:gravity">center</item>
+    <item name="android:textColor">#dddddd</item>
+    <item name="android:textSize">14sp</item>
+  </style>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/xml/rn_dev_preferences.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/xml/rn_dev_preferences.xml
new file mode 100644
index 0000000..f057bff
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/devsupport/xml/rn_dev_preferences.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+  <PreferenceCategory
+      android:key="catalyst_perf"
+      android:title="Performance"
+      >
+    <CheckBoxPreference
+        android:key="js_dev_mode_debug"
+        android:title="JS Dev Mode"
+        android:summary="Load JavaScript bundle with __DEV__ = true for easier debugging. Disable for performance testing. Reload for the change to take effect."
+        android:defaultValue="true"
+        />
+    <CheckBoxPreference
+        android:key="js_minify_debug"
+        android:title="JS Minify"
+        android:summary="Load JavaScript bundle with minify=true for debugging minification issues."
+        android:defaultValue="false"
+        />
+    <CheckBoxPreference
+        android:key="animations_debug"
+        android:title="Animations FPS Summaries"
+        android:summary="At the end of animations, Toasts and logs to logcat debug information about the FPS during that transition. Currently only supported for transitions (animated navigations)."
+        android:defaultValue="false"
+        />
+  </PreferenceCategory>
+  <PreferenceCategory
+      android:key="pref_key_catalyst_debug"
+      android:title="Debugging"
+      >
+    <EditTextPreference
+        android:key="debug_http_host"
+        android:title="Debug server host &amp; port for device"
+        android:summary="Debug server host &amp; port for downloading JS bundle or communicating with JS debugger. With this setting empty launcher should work fine when running on emulator (or genymotion) and connection to debug server running on emulator's host."
+        android:defaultValue=""
+        />
+    <CheckBoxPreference
+        android:key="start_sampling_profiler_on_init"
+        android:title="Start Sampling Profiler on init"
+        android:summary="If true the Sampling Profiler will start on initialization of JS. Useful for profiling startup of the app. Reload JS or restart the app after changing this setting."
+        android:defaultValue="0"
+        />
+  </PreferenceCategory>
+</PreferenceScreen>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/shell/values/styles.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/shell/values/styles.xml
new file mode 100644
index 0000000..34c0a01
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/shell/values/styles.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <style name="Theme.ReactNative.AppCompat.Light" parent="@style/Theme.AppCompat.Light.NoActionBar">
+        <item name="android:textColor">@android:color/black</item>
+    </style>
+    <style name="Theme.ReactNative.AppCompat.Light.NoActionBar.FullScreen"
+           parent="@style/Theme.ReactNative.AppCompat.Light"
+           >
+        <item name="android:windowNoTitle">true</item>
+        <item name="windowActionBar">false</item>
+        <item name="android:windowFullscreen">true</item>
+        <item name="android:windowContentOverlay">@null</item>
+    </style>
+
+    <style name="SpinnerDatePickerDialog" parent="Theme.AppCompat.Light.Dialog" tools:targetApi="lollipop">
+        <item name="android:datePickerStyle">@style/SpinnerDatePickerStyle</item>
+    </style>
+
+    <style name="SpinnerDatePickerStyle" parent="android:Widget.Material.Light.DatePicker" tools:targetApi="lollipop">
+        <item name="android:datePickerMode">spinner</item>
+    </style>
+
+    <style name="CalendarDatePickerDialog" parent="android:Theme.Material.Dialog.Alert" tools:targetApi="lollipop">
+        <item name="android:datePickerStyle">@style/CalendarDatePickerStyle</item>
+        <item name="android:windowIsFloating">true</item>
+    </style>
+
+    <style name="CalendarDatePickerStyle" parent="android:Widget.Material.DatePicker" tools:targetApi="lollipop">
+        <item name="android:datePickerMode">calendar</item>
+    </style>
+
+    <style name="Theme.ReactNative.TextInput.DefaultBackground" parent="android:Widget.EditText">
+      <item name="android:editTextBackground">@drawable/abc_edit_text_material</item>
+    </style>
+
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/systeminfo/values/values.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/systeminfo/values/values.xml
new file mode 100644
index 0000000..7d52389
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/systeminfo/values/values.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <integer name="react_native_dev_server_port">8081</integer>
+  <integer name="react_native_inspector_proxy_port">@integer/react_native_dev_server_port</integer>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_fade_in.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_fade_in.xml
new file mode 100644
index 0000000..7fe329f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_fade_in.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<alpha xmlns:android="http://schemas.android.com/apk/res/android"
+           android:duration="@android:integer/config_shortAnimTime"
+           android:interpolator="@android:anim/accelerate_interpolator"
+           android:fromAlpha="0.0"
+           android:toAlpha="1.0"
+    />
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_fade_out.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_fade_out.xml
new file mode 100644
index 0000000..4919eda
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_fade_out.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<alpha xmlns:android="http://schemas.android.com/apk/res/android"
+           android:duration="@android:integer/config_shortAnimTime"
+           android:interpolator="@android:anim/accelerate_interpolator"
+           android:fromAlpha="1.0"
+           android:toAlpha="0.0"
+  />
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_slide_down.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_slide_down.xml
new file mode 100644
index 0000000..01876e5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_slide_down.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+           android:duration="@android:integer/config_shortAnimTime"
+           android:fromYDelta="0%p"
+           android:toYDelta="100%p"
+    />
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_slide_up.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_slide_up.xml
new file mode 100644
index 0000000..6c96f69
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/anim/catalyst_slide_up.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<translate xmlns:android="http://schemas.android.com/apk/res/android"
+           android:duration="@android:integer/config_shortAnimTime"
+           android:fromYDelta="100%p"
+           android:toYDelta="0%p"
+    />
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/values/themes.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/values/themes.xml
new file mode 100644
index 0000000..24d5b63
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/modal/values/themes.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+
+  <style name="Theme.FullScreenDialog">
+    <item name="android:windowNoTitle">true</item>
+    <item name="android:windowIsFloating">false</item>
+    <item name="android:windowBackground">@android:color/transparent</item>
+    <item name="android:windowDrawsSystemBarBackgrounds">true</item>
+    <item name="android:statusBarColor">@android:color/transparent</item>
+  </style>
+
+  <style name="Theme.FullScreenDialogAnimatedSlide" parent="Theme.FullScreenDialog">
+    <item name="android:windowAnimationStyle">@style/DialogAnimationSlide</item>
+  </style>
+
+  <style name="Theme.FullScreenDialogAnimatedFade" parent="Theme.FullScreenDialog">
+    <item name="android:windowAnimationStyle">@style/DialogAnimationFade</item>
+  </style>
+
+  <style name="DialogAnimationSlide">
+    <item name="android:windowEnterAnimation">@anim/catalyst_slide_up</item>
+    <item name="android:windowExitAnimation">@anim/catalyst_slide_down</item>
+  </style>
+
+  <style name="DialogAnimationFade">
+    <item name="android:windowEnterAnimation">@anim/catalyst_fade_in</item>
+    <item name="android:windowExitAnimation">@anim/catalyst_fade_out</item>
+  </style>
+
+
+
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-af/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-af/strings.xml
new file mode 100644
index 0000000..82932ee
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-af/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: af_ZA -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Skakel</string>
+    <string name="image_description" gender="unknown">Prent</string>
+    <string name="imagebutton_description" gender="unknown">Knoppie, prent</string>
+    <string name="header_description" gender="unknown">Opskrif</string>
+    <string name="alert_description" gender="unknown">Opletnota</string>
+    <string name="combobox_description" gender="unknown">Kombinasiekassie</string>
+    <string name="menu_description" gender="unknown">Kieslys</string>
+    <string name="menubar_description" gender="unknown">Kieslysbalk</string>
+    <string name="menuitem_description" gender="unknown">Kieslysitem</string>
+    <string name="progressbar_description" gender="unknown">Vorderingbalk</string>
+    <string name="radiogroup_description" gender="unknown">Radiogroep</string>
+    <string name="scrollbar_description" gender="unknown">Rolleesbalk</string>
+    <string name="spinbutton_description" gender="unknown">Tolknoppie</string>
+    <string name="rn_tab_description" gender="unknown">Oortjie</string>
+    <string name="tablist_description" gender="unknown">Oortjielys</string>
+    <string name="timer_description" gender="unknown">Afteller</string>
+    <string name="toolbar_description" gender="unknown">Nutsbalk</string>
+    <string name="summary_description" gender="unknown">Opsomming</string>
+    <string name="state_busy_description" gender="unknown">besig</string>
+    <string name="state_expanded_description" gender="unknown">is uitgevou</string>
+    <string name="state_collapsed_description" gender="unknown">is ingevou</string>
+    <string name="state_unselected_description" gender="unknown">ontkies</string>
+    <string name="state_on_description" gender="unknown">aan</string>
+    <string name="state_off_description" gender="unknown">af</string>
+    <string name="state_mixed_description" gender="unknown">is gemeng</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ar/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ar/strings.xml
new file mode 100644
index 0000000..0960642
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ar/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ar_AR -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">رابط</string>
+    <string name="image_description" gender="unknown">صورة</string>
+    <string name="imagebutton_description" gender="unknown">زر، صورة</string>
+    <string name="header_description" gender="unknown">العنوان</string>
+    <string name="alert_description" gender="unknown">تنبيه</string>
+    <string name="combobox_description" gender="unknown">مربع تحرير وسرد</string>
+    <string name="menu_description" gender="unknown">القائمة</string>
+    <string name="menubar_description" gender="unknown">شريط القائمة</string>
+    <string name="menuitem_description" gender="unknown">عنصر القائمة</string>
+    <string name="progressbar_description" gender="unknown">شريط التقدم</string>
+    <string name="radiogroup_description" gender="unknown">مجموعة أزرار اختيار</string>
+    <string name="scrollbar_description" gender="unknown">شريط التمرير</string>
+    <string name="spinbutton_description" gender="unknown">زر زيادة ونقصان</string>
+    <string name="rn_tab_description" gender="unknown">علامة التبويب</string>
+    <string name="tablist_description" gender="unknown">قائمة علامات التبويب</string>
+    <string name="timer_description" gender="unknown">مؤقِت</string>
+    <string name="toolbar_description" gender="unknown">شريط الأدوات</string>
+    <string name="summary_description" gender="unknown">ملخص</string>
+    <string name="state_busy_description" gender="unknown">مشغول</string>
+    <string name="state_expanded_description" gender="unknown">موسع</string>
+    <string name="state_collapsed_description" gender="unknown">مطوي</string>
+    <string name="state_unselected_description" gender="unknown">غير محدَد</string>
+    <string name="state_on_description" gender="unknown">تشغيل</string>
+    <string name="state_off_description" gender="unknown">إيقاف تشغيل</string>
+    <string name="state_mixed_description" gender="unknown">مختلط</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-az/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-az/strings.xml
new file mode 100644
index 0000000..01f8b9a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-az/strings.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: az_AZ -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Keçid</string>
+    <string name="image_description" gender="unknown">Şəkil</string>
+    <string name="imagebutton_description" gender="unknown">Düymə, şəkil</string>
+    <string name="combobox_description" gender="unknown">Kombo siyahısı</string>
+    <string name="menu_description" gender="unknown">Menyu</string>
+    <string name="state_on_description" gender="unknown">aktivdir</string>
+    <string name="state_off_description" gender="unknown">deaktiv</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-be/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-be/strings.xml
new file mode 100644
index 0000000..3224e13
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-be/strings.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: be_BY -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Спасылка</string>
+    <string name="image_description" gender="unknown">Відарыс</string>
+    <string name="imagebutton_description" gender="unknown">Кнопка, відарыс</string>
+    <string name="combobox_description" gender="unknown">Камбінаваны спіс</string>
+    <string name="menu_description" gender="unknown">Меню</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-bg/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-bg/strings.xml
new file mode 100644
index 0000000..a50ed82
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-bg/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: bg_BG -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Връзка</string>
+    <string name="image_description" gender="unknown">Изображение</string>
+    <string name="imagebutton_description" gender="unknown">Бутон, изображение</string>
+    <string name="header_description" gender="unknown">Заглавие</string>
+    <string name="alert_description" gender="unknown">Сигнал</string>
+    <string name="combobox_description" gender="unknown">Комбинирана кутия</string>
+    <string name="menu_description" gender="unknown">Меню</string>
+    <string name="menubar_description" gender="unknown">Лента с менюта</string>
+    <string name="menuitem_description" gender="unknown">Елемент от меню</string>
+    <string name="progressbar_description" gender="unknown">Лента за напредък</string>
+    <string name="radiogroup_description" gender="unknown">Радио група</string>
+    <string name="scrollbar_description" gender="unknown">Лента за превъртане</string>
+    <string name="spinbutton_description" gender="unknown">Бутон за завъртане</string>
+    <string name="rn_tab_description" gender="unknown">Раздел</string>
+    <string name="tablist_description" gender="unknown">Списък с раздели</string>
+    <string name="timer_description" gender="unknown">Таймер</string>
+    <string name="toolbar_description" gender="unknown">Лента с инструменти</string>
+    <string name="summary_description" gender="unknown">Обобщение</string>
+    <string name="state_busy_description" gender="unknown">заето</string>
+    <string name="state_expanded_description" gender="unknown">разширено</string>
+    <string name="state_collapsed_description" gender="unknown">свито</string>
+    <string name="state_unselected_description" gender="unknown">неизбрано</string>
+    <string name="state_on_description" gender="unknown">включено</string>
+    <string name="state_off_description" gender="unknown">изключено</string>
+    <string name="state_mixed_description" gender="unknown">смесено</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-bn/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-bn/strings.xml
new file mode 100644
index 0000000..1f097ed
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-bn/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: bn_IN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">লিঙ্ক</string>
+    <string name="image_description" gender="unknown">ইমেজ</string>
+    <string name="imagebutton_description" gender="unknown">বোতাম, ছবি</string>
+    <string name="header_description" gender="unknown">শিরোনাম</string>
+    <string name="alert_description" gender="unknown">অ্যালার্ট</string>
+    <string name="combobox_description" gender="unknown">কম্বো বক্স</string>
+    <string name="menu_description" gender="unknown">মেনু</string>
+    <string name="menubar_description" gender="unknown">মেনু বার</string>
+    <string name="menuitem_description" gender="unknown">মেনু আইটেম</string>
+    <string name="progressbar_description" gender="unknown">প্রোগ্রেস বার</string>
+    <string name="radiogroup_description" gender="unknown">রেডিও গ্রুপ</string>
+    <string name="scrollbar_description" gender="unknown">স্ক্রোল বার</string>
+    <string name="spinbutton_description" gender="unknown">স্পিন বোতাম</string>
+    <string name="rn_tab_description" gender="unknown">ট্যাব</string>
+    <string name="tablist_description" gender="unknown">ট্যাব লিস্ট</string>
+    <string name="timer_description" gender="unknown">টাইমার</string>
+    <string name="toolbar_description" gender="unknown">টুল বার</string>
+    <string name="summary_description" gender="unknown">সারসংক্ষেপ</string>
+    <string name="state_busy_description" gender="unknown">ব্যস্ত</string>
+    <string name="state_expanded_description" gender="unknown">বাড়ানো হয়েছে</string>
+    <string name="state_collapsed_description" gender="unknown">ছোট করা হয়েছে</string>
+    <string name="state_unselected_description" gender="unknown">আনসিলেক্ট করা হয়েছে</string>
+    <string name="state_on_description" gender="unknown">চালু আছে</string>
+    <string name="state_off_description" gender="unknown">বন্ধ আছে</string>
+    <string name="state_mixed_description" gender="unknown">মিশ্র</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ca/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ca/strings.xml
new file mode 100644
index 0000000..d839c0b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ca/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ca_ES -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-cs/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-cs/strings.xml
new file mode 100644
index 0000000..53b972b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-cs/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: cs_CZ -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Odkaz</string>
+    <string name="image_description" gender="unknown">Obrázek</string>
+    <string name="imagebutton_description" gender="unknown">Tlačítko, obrázek</string>
+    <string name="header_description" gender="unknown">Nadpis</string>
+    <string name="alert_description" gender="unknown">Výstraha</string>
+    <string name="combobox_description" gender="unknown">Kombinované pole</string>
+    <string name="menu_description" gender="unknown">Nabídka</string>
+    <string name="menubar_description" gender="unknown">Panel nabídky</string>
+    <string name="menuitem_description" gender="unknown">Položka nabídky</string>
+    <string name="progressbar_description" gender="unknown">Ukazatel postupu</string>
+    <string name="radiogroup_description" gender="unknown">Skupina přepínačů</string>
+    <string name="scrollbar_description" gender="unknown">Posuvník</string>
+    <string name="spinbutton_description" gender="unknown">Číselník</string>
+    <string name="rn_tab_description" gender="unknown">Karta</string>
+    <string name="tablist_description" gender="unknown">Seznam karet</string>
+    <string name="timer_description" gender="unknown">Časovač</string>
+    <string name="toolbar_description" gender="unknown">Panel nástrojů</string>
+    <string name="summary_description" gender="unknown">Přehled</string>
+    <string name="state_busy_description" gender="unknown">zaneprázdněno</string>
+    <string name="state_expanded_description" gender="unknown">rozbaleno</string>
+    <string name="state_collapsed_description" gender="unknown">sbaleno</string>
+    <string name="state_unselected_description" gender="unknown">nevybráno</string>
+    <string name="state_on_description" gender="unknown">zap</string>
+    <string name="state_off_description" gender="unknown">vyp</string>
+    <string name="state_mixed_description" gender="unknown">oboje</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-da/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-da/strings.xml
new file mode 100644
index 0000000..6c51adb
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-da/strings.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: da_DK -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="image_description" gender="unknown">Billede</string>
+    <string name="imagebutton_description" gender="unknown">Knap, billede</string>
+    <string name="header_description" gender="unknown">Overskrift</string>
+    <string name="alert_description" gender="unknown">Underretning</string>
+    <string name="combobox_description" gender="unknown">Kombinationsboks</string>
+    <string name="menubar_description" gender="unknown">Menulinje</string>
+    <string name="menuitem_description" gender="unknown">Menupunkt</string>
+    <string name="progressbar_description" gender="unknown">Statuslinje</string>
+    <string name="radiogroup_description" gender="unknown">Radiogruppe</string>
+    <string name="scrollbar_description" gender="unknown">Rullelinje</string>
+    <string name="spinbutton_description" gender="unknown">Snurreknap</string>
+    <string name="rn_tab_description" gender="unknown">Fane</string>
+    <string name="tablist_description" gender="unknown">Liste over faner</string>
+    <string name="toolbar_description" gender="unknown">Værktøjslinje</string>
+    <string name="summary_description" gender="unknown">Oversigt</string>
+    <string name="state_busy_description" gender="unknown">optaget</string>
+    <string name="state_expanded_description" gender="unknown">udvidet</string>
+    <string name="state_collapsed_description" gender="unknown">skjult</string>
+    <string name="state_unselected_description" gender="unknown">fravalgt</string>
+    <string name="state_on_description" gender="unknown">til</string>
+    <string name="state_off_description" gender="unknown">fra</string>
+    <string name="state_mixed_description" gender="unknown">blandet</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-de/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-de/strings.xml
new file mode 100644
index 0000000..d0aaf61
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-de/strings.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: de_DE -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="image_description" gender="unknown">Bild</string>
+    <string name="imagebutton_description" gender="unknown">Button, Bild</string>
+    <string name="header_description" gender="unknown">Überschrift</string>
+    <string name="alert_description" gender="unknown">Warnhinweis</string>
+    <string name="combobox_description" gender="unknown">Kombinationsfeld</string>
+    <string name="menu_description" gender="unknown">Menü</string>
+    <string name="menubar_description" gender="unknown">Menüleiste</string>
+    <string name="menuitem_description" gender="unknown">Menüpunkt</string>
+    <string name="progressbar_description" gender="unknown">Statusanzeige</string>
+    <string name="radiogroup_description" gender="unknown">Gruppe von Buttons</string>
+    <string name="scrollbar_description" gender="unknown">Scroll-Leiste</string>
+    <string name="spinbutton_description" gender="unknown">Auswahl-Button</string>
+    <string name="tablist_description" gender="unknown">Tab-Liste</string>
+    <string name="toolbar_description" gender="unknown">Symbolleiste</string>
+    <string name="summary_description" gender="unknown">Übersicht</string>
+    <string name="state_busy_description" gender="unknown">in Gebrauch</string>
+    <string name="state_expanded_description" gender="unknown">eingeblendet</string>
+    <string name="state_collapsed_description" gender="unknown">ausgeblendet</string>
+    <string name="state_unselected_description" gender="unknown">nicht ausgewählt</string>
+    <string name="state_on_description" gender="unknown">ein</string>
+    <string name="state_off_description" gender="unknown">aus</string>
+    <string name="state_mixed_description" gender="unknown">gemischt</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-el/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-el/strings.xml
new file mode 100644
index 0000000..0fdf564
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-el/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: el_GR -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Σύνδεσμος</string>
+    <string name="image_description" gender="unknown">Εικόνα</string>
+    <string name="imagebutton_description" gender="unknown">Κουμπί, εικόνα</string>
+    <string name="header_description" gender="unknown">Επικεφαλίδα</string>
+    <string name="alert_description" gender="unknown">Ειδοποίηση</string>
+    <string name="combobox_description" gender="unknown">Συνδυαστικό κουτάκι</string>
+    <string name="menu_description" gender="unknown">Μενού</string>
+    <string name="menubar_description" gender="unknown">Γραμμή μενού</string>
+    <string name="menuitem_description" gender="unknown">Στοιχείο μενού</string>
+    <string name="progressbar_description" gender="unknown">Γραμμή προόδου</string>
+    <string name="radiogroup_description" gender="unknown">Ομάδα κουμπιών επιλογής</string>
+    <string name="scrollbar_description" gender="unknown">Γραμμή κύλισης</string>
+    <string name="spinbutton_description" gender="unknown">Κουμπί περιστροφής</string>
+    <string name="rn_tab_description" gender="unknown">Καρτέλα</string>
+    <string name="tablist_description" gender="unknown">Λίστα καρτελών</string>
+    <string name="timer_description" gender="unknown">Χρονόμετρο</string>
+    <string name="toolbar_description" gender="unknown">Γραμμή εργαλείων</string>
+    <string name="summary_description" gender="unknown">Σύνοψη</string>
+    <string name="state_busy_description" gender="unknown">απασχολημένος/η</string>
+    <string name="state_expanded_description" gender="unknown">διευρυμένο</string>
+    <string name="state_collapsed_description" gender="unknown">συμπτυγμένο</string>
+    <string name="state_unselected_description" gender="unknown">μη επιλεγμένα</string>
+    <string name="state_on_description" gender="unknown">ναι</string>
+    <string name="state_off_description" gender="unknown">όχι</string>
+    <string name="state_mixed_description" gender="unknown">συνδυασμός</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-en-rGB/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-en-rGB/strings.xml
new file mode 100644
index 0000000..43f9f73
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-en-rGB/strings.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: en_GB -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="imagebutton_description" gender="unknown">Button, image</string>
+    <string name="combobox_description" gender="unknown">Combo box</string>
+    <string name="menubar_description" gender="unknown">Menu bar</string>
+    <string name="menuitem_description" gender="unknown">Menu item</string>
+    <string name="progressbar_description" gender="unknown">Progress bar</string>
+    <string name="radiogroup_description" gender="unknown">Radio group</string>
+    <string name="scrollbar_description" gender="unknown">Scroll bar</string>
+    <string name="spinbutton_description" gender="unknown">Spin button</string>
+    <string name="tablist_description" gender="unknown">Tab list</string>
+    <string name="toolbar_description" gender="unknown">Tool bar</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-es-rES/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-es-rES/strings.xml
new file mode 100644
index 0000000..d320012
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-es-rES/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: es_ES -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Enlace</string>
+    <string name="image_description" gender="unknown">Imagen</string>
+    <string name="imagebutton_description" gender="unknown">Botón, imagen</string>
+    <string name="header_description" gender="unknown">Encabezado</string>
+    <string name="alert_description" gender="unknown">Alerta</string>
+    <string name="combobox_description" gender="unknown">Cuadro combinado</string>
+    <string name="menu_description" gender="unknown">Menú</string>
+    <string name="menubar_description" gender="unknown">Barra de menú</string>
+    <string name="menuitem_description" gender="unknown">Elemento del menú</string>
+    <string name="progressbar_description" gender="unknown">Barra de progreso</string>
+    <string name="radiogroup_description" gender="unknown">Grupo de botones de radio</string>
+    <string name="scrollbar_description" gender="unknown">Barra de desplazamiento</string>
+    <string name="spinbutton_description" gender="unknown">Botón de selección</string>
+    <string name="rn_tab_description" gender="unknown">Pestaña</string>
+    <string name="tablist_description" gender="unknown">Lista de pestañas</string>
+    <string name="timer_description" gender="unknown">Temporizador</string>
+    <string name="toolbar_description" gender="unknown">Barra de herramientas</string>
+    <string name="summary_description" gender="unknown">Resumen</string>
+    <string name="state_busy_description" gender="unknown">ocupado</string>
+    <string name="state_expanded_description" gender="unknown">ampliado</string>
+    <string name="state_collapsed_description" gender="unknown">contraído</string>
+    <string name="state_unselected_description" gender="unknown">sin seleccionar</string>
+    <string name="state_on_description" gender="unknown">activado</string>
+    <string name="state_off_description" gender="unknown">desactivado</string>
+    <string name="state_mixed_description" gender="unknown">mezclado</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-es/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-es/strings.xml
new file mode 100644
index 0000000..b9781f5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-es/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: es_LA -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Enlace</string>
+    <string name="image_description" gender="unknown">Imagen</string>
+    <string name="imagebutton_description" gender="unknown">Botón, imagen</string>
+    <string name="header_description" gender="unknown">Encabezado</string>
+    <string name="alert_description" gender="unknown">Alerta</string>
+    <string name="combobox_description" gender="unknown">Cuadro combinado</string>
+    <string name="menu_description" gender="unknown">Menú</string>
+    <string name="menubar_description" gender="unknown">Barra de menús</string>
+    <string name="menuitem_description" gender="unknown">Elemento de menú</string>
+    <string name="progressbar_description" gender="unknown">Barra de progreso</string>
+    <string name="radiogroup_description" gender="unknown">Grupo de botones de opción</string>
+    <string name="scrollbar_description" gender="unknown">Barra de desplazamiento</string>
+    <string name="spinbutton_description" gender="unknown">Botón de número</string>
+    <string name="rn_tab_description" gender="unknown">Pestaña</string>
+    <string name="tablist_description" gender="unknown">Lista de pestañas</string>
+    <string name="timer_description" gender="unknown">Temporizador</string>
+    <string name="toolbar_description" gender="unknown">Barra de herramientas</string>
+    <string name="summary_description" gender="unknown">Resumen</string>
+    <string name="state_busy_description" gender="unknown">ocupado</string>
+    <string name="state_expanded_description" gender="unknown">expandido</string>
+    <string name="state_collapsed_description" gender="unknown">contraído</string>
+    <string name="state_unselected_description" gender="unknown">no seleccionado</string>
+    <string name="state_on_description" gender="unknown">activado</string>
+    <string name="state_off_description" gender="unknown">desactivado</string>
+    <string name="state_mixed_description" gender="unknown">mixto</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-et/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-et/strings.xml
new file mode 100644
index 0000000..ba66aff
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-et/strings.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: et_EE -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="image_description" gender="unknown">Pilt</string>
+    <string name="imagebutton_description" gender="unknown">Nupp, pilt</string>
+    <string name="header_description" gender="unknown">Pealkiri</string>
+    <string name="alert_description" gender="unknown">Hoiatus</string>
+    <string name="combobox_description" gender="unknown">Liitboks</string>
+    <string name="menu_description" gender="unknown">Menüü</string>
+    <string name="menubar_description" gender="unknown">Menüüriba</string>
+    <string name="menuitem_description" gender="unknown">Menüü-üksus</string>
+    <string name="progressbar_description" gender="unknown">Edenemisriba</string>
+    <string name="radiogroup_description" gender="unknown">Raadionuppude grupp</string>
+    <string name="scrollbar_description" gender="unknown">Kerimisriba</string>
+    <string name="spinbutton_description" gender="unknown">Pööramisnupp</string>
+    <string name="rn_tab_description" gender="unknown">Vahekaart</string>
+    <string name="tablist_description" gender="unknown">Vahekaartide loend</string>
+    <string name="timer_description" gender="unknown">Taimer</string>
+    <string name="toolbar_description" gender="unknown">Tööriistariba</string>
+    <string name="summary_description" gender="unknown">Kokkuvõte</string>
+    <string name="state_busy_description" gender="unknown">hõivatud</string>
+    <string name="state_expanded_description" gender="unknown">laiendatud</string>
+    <string name="state_collapsed_description" gender="unknown">ahendatud</string>
+    <string name="state_unselected_description" gender="unknown">valimata</string>
+    <string name="state_on_description" gender="unknown">sees</string>
+    <string name="state_off_description" gender="unknown">väljas</string>
+    <string name="state_mixed_description" gender="unknown">miksitud</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fa/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fa/strings.xml
new file mode 100644
index 0000000..e669a7b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fa/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fa_IR -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">پیوند</string>
+    <string name="image_description" gender="unknown">تصویر</string>
+    <string name="imagebutton_description" gender="unknown">دکمه، تصویر</string>
+    <string name="header_description" gender="unknown">سر‌صفحه</string>
+    <string name="alert_description" gender="unknown">هشدار</string>
+    <string name="combobox_description" gender="unknown">جعبه گفتگو</string>
+    <string name="menu_description" gender="unknown">منو</string>
+    <string name="menubar_description" gender="unknown">نوار منو</string>
+    <string name="menuitem_description" gender="unknown">مورد منو</string>
+    <string name="progressbar_description" gender="unknown">نوار پیشرفت</string>
+    <string name="radiogroup_description" gender="unknown">گروه رادیویی</string>
+    <string name="scrollbar_description" gender="unknown">نوار پیمایش</string>
+    <string name="spinbutton_description" gender="unknown">دکمه چرخش</string>
+    <string name="rn_tab_description" gender="unknown">برگه</string>
+    <string name="tablist_description" gender="unknown">فهرست برگه</string>
+    <string name="timer_description" gender="unknown">زمان‌سنج</string>
+    <string name="toolbar_description" gender="unknown">نوار ابزار</string>
+    <string name="summary_description" gender="unknown">خلاصه</string>
+    <string name="state_busy_description" gender="unknown">مشغول</string>
+    <string name="state_expanded_description" gender="unknown">بزرگ‌شده</string>
+    <string name="state_collapsed_description" gender="unknown">کوچک‌شده</string>
+    <string name="state_unselected_description" gender="unknown">لغو انتخاب شد</string>
+    <string name="state_on_description" gender="unknown">روشن</string>
+    <string name="state_off_description" gender="unknown">خاموش</string>
+    <string name="state_mixed_description" gender="unknown">ترکیب‌شده</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fi/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fi/strings.xml
new file mode 100644
index 0000000..ce80c98
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fi/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fi_FI -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Linkki</string>
+    <string name="image_description" gender="unknown">Kuva</string>
+    <string name="imagebutton_description" gender="unknown">Painike, kuva</string>
+    <string name="header_description" gender="unknown">Otsikko</string>
+    <string name="alert_description" gender="unknown">Hälytys</string>
+    <string name="combobox_description" gender="unknown">Yhdistelmäruutu</string>
+    <string name="menu_description" gender="unknown">Valikko</string>
+    <string name="menubar_description" gender="unknown">Valikkopalkki</string>
+    <string name="menuitem_description" gender="unknown">Valikkokohde</string>
+    <string name="progressbar_description" gender="unknown">Edistymispalkki</string>
+    <string name="radiogroup_description" gender="unknown">Valintanappiryhmä</string>
+    <string name="scrollbar_description" gender="unknown">Vierityspalkki</string>
+    <string name="spinbutton_description" gender="unknown">Pyörityspainike</string>
+    <string name="rn_tab_description" gender="unknown">Välilehti</string>
+    <string name="tablist_description" gender="unknown">Välilehtilista</string>
+    <string name="timer_description" gender="unknown">Ajastin</string>
+    <string name="toolbar_description" gender="unknown">Työkalupalkki</string>
+    <string name="summary_description" gender="unknown">Yhteenveto</string>
+    <string name="state_busy_description" gender="unknown">varattu</string>
+    <string name="state_expanded_description" gender="unknown">laajennettu</string>
+    <string name="state_collapsed_description" gender="unknown">pienennetty</string>
+    <string name="state_unselected_description" gender="unknown">ei valittu</string>
+    <string name="state_on_description" gender="unknown">käytössä</string>
+    <string name="state_off_description" gender="unknown">ei käytössä</string>
+    <string name="state_mixed_description" gender="unknown">yhdistetty</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fr-rCA/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fr-rCA/strings.xml
new file mode 100644
index 0000000..116e8fc
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fr-rCA/strings.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fr_CA -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Lien</string>
+    <string name="imagebutton_description" gender="unknown">Bouton, image</string>
+    <string name="header_description" gender="unknown">Titre</string>
+    <string name="alert_description" gender="unknown">Alerte</string>
+    <string name="combobox_description" gender="unknown">Zone combinée</string>
+    <string name="menubar_description" gender="unknown">Barre de menu</string>
+    <string name="menuitem_description" gender="unknown">Option de menu</string>
+    <string name="progressbar_description" gender="unknown">Barre de progression</string>
+    <string name="radiogroup_description" gender="unknown">Groupe de boutons radio</string>
+    <string name="scrollbar_description" gender="unknown">Barre de déroulement</string>
+    <string name="spinbutton_description" gender="unknown">Bouton compteur circulaire</string>
+    <string name="rn_tab_description" gender="unknown">Onglet</string>
+    <string name="tablist_description" gender="unknown">Liste des onglets</string>
+    <string name="timer_description" gender="unknown">Minuterie</string>
+    <string name="toolbar_description" gender="unknown">Barre d’outils</string>
+    <string name="summary_description" gender="unknown">Résumé</string>
+    <string name="state_busy_description" gender="unknown">en cours de traitement</string>
+    <string name="state_expanded_description" gender="unknown">agrandi</string>
+    <string name="state_collapsed_description" gender="unknown">réduit</string>
+    <string name="state_unselected_description" gender="unknown">désélectionné</string>
+    <string name="state_on_description" gender="unknown">activé</string>
+    <string name="state_off_description" gender="unknown">désactivé</string>
+    <string name="state_mixed_description" gender="unknown">à double état</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fr/strings.xml
new file mode 100644
index 0000000..aad6fa4
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-fr/strings.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fr_FR -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Lien</string>
+    <string name="imagebutton_description" gender="unknown">Bouton, image</string>
+    <string name="header_description" gender="unknown">Titre</string>
+    <string name="alert_description" gender="unknown">Alerte</string>
+    <string name="combobox_description" gender="unknown">Liste déroulante</string>
+    <string name="menubar_description" gender="unknown">Barre de menu</string>
+    <string name="menuitem_description" gender="unknown">Élément du menu</string>
+    <string name="progressbar_description" gender="unknown">Barre de progression</string>
+    <string name="radiogroup_description" gender="unknown">Groupe de boutons radio</string>
+    <string name="scrollbar_description" gender="unknown">Barre de défilement</string>
+    <string name="spinbutton_description" gender="unknown">Toupie</string>
+    <string name="rn_tab_description" gender="unknown">Onglet</string>
+    <string name="tablist_description" gender="unknown">Liste d’onglets</string>
+    <string name="timer_description" gender="unknown">Minuteur</string>
+    <string name="toolbar_description" gender="unknown">Barre d’outils</string>
+    <string name="summary_description" gender="unknown">Récapitulatif</string>
+    <string name="state_busy_description" gender="unknown">opération en cours</string>
+    <string name="state_expanded_description" gender="unknown">agrandi</string>
+    <string name="state_collapsed_description" gender="unknown">réduit</string>
+    <string name="state_unselected_description" gender="unknown">désélectionné(s)</string>
+    <string name="state_on_description" gender="unknown">activé</string>
+    <string name="state_off_description" gender="unknown">désactivé</string>
+    <string name="state_mixed_description" gender="unknown">mixte</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-gu/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-gu/strings.xml
new file mode 100644
index 0000000..6dac529
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-gu/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: gu_IN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">લિંક</string>
+    <string name="image_description" gender="unknown">ફોટો</string>
+    <string name="imagebutton_description" gender="unknown">બટન, ફોટો</string>
+    <string name="header_description" gender="unknown">શીર્ષક</string>
+    <string name="alert_description" gender="unknown">એલર્ટ</string>
+    <string name="combobox_description" gender="unknown">કોમ્બો બોક્સ</string>
+    <string name="menu_description" gender="unknown">મેનૂ</string>
+    <string name="menubar_description" gender="unknown">મેનૂ બાર</string>
+    <string name="menuitem_description" gender="unknown">મેનૂ આઇટમ</string>
+    <string name="progressbar_description" gender="unknown">પ્રગતિ બાર</string>
+    <string name="radiogroup_description" gender="unknown">રેડિયો ગ્રૂપ</string>
+    <string name="scrollbar_description" gender="unknown">સ્ક્રોલ બાર</string>
+    <string name="spinbutton_description" gender="unknown">સ્પિન બટન</string>
+    <string name="rn_tab_description" gender="unknown">ટેબ</string>
+    <string name="tablist_description" gender="unknown">ટેબ લિસ્ટ</string>
+    <string name="timer_description" gender="unknown">ટાઇમર</string>
+    <string name="toolbar_description" gender="unknown">ટૂલ બાર</string>
+    <string name="summary_description" gender="unknown">સારાંશ</string>
+    <string name="state_busy_description" gender="unknown">વ્યસ્ત</string>
+    <string name="state_expanded_description" gender="unknown">વિસ્તૃત</string>
+    <string name="state_collapsed_description" gender="unknown">નાનું</string>
+    <string name="state_unselected_description" gender="unknown">પસંદગીમાંથી કાઢી નાખ્યું</string>
+    <string name="state_on_description" gender="unknown">ચાલુ</string>
+    <string name="state_off_description" gender="unknown">બંધ</string>
+    <string name="state_mixed_description" gender="unknown">મિક્સ કરેલ</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hi/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hi/strings.xml
new file mode 100644
index 0000000..17e5277
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hi/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hi_IN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">लिंक</string>
+    <string name="image_description" gender="unknown">फ़ोटो</string>
+    <string name="imagebutton_description" gender="unknown">बटन, फ़ोटो</string>
+    <string name="header_description" gender="unknown">शीर्षक</string>
+    <string name="alert_description" gender="unknown">अलर्ट</string>
+    <string name="combobox_description" gender="unknown">कॉम्बो बॉक्स</string>
+    <string name="menu_description" gender="unknown">मेनू</string>
+    <string name="menubar_description" gender="unknown">मेनू बार</string>
+    <string name="menuitem_description" gender="unknown">मेनू आइटम</string>
+    <string name="progressbar_description" gender="unknown">प्रोग्रेस बार</string>
+    <string name="radiogroup_description" gender="unknown">रेडियो ग्रुप</string>
+    <string name="scrollbar_description" gender="unknown">स्क्रॉल बार</string>
+    <string name="spinbutton_description" gender="unknown">स्पिन बटन</string>
+    <string name="rn_tab_description" gender="unknown">टैब</string>
+    <string name="tablist_description" gender="unknown">टैब लिस्ट</string>
+    <string name="timer_description" gender="unknown">टाइमर</string>
+    <string name="toolbar_description" gender="unknown">टूल बार</string>
+    <string name="summary_description" gender="unknown">सारांश</string>
+    <string name="state_busy_description" gender="unknown">व्यस्त</string>
+    <string name="state_expanded_description" gender="unknown">बड़ा किया गया</string>
+    <string name="state_collapsed_description" gender="unknown">छोटा किया गया</string>
+    <string name="state_unselected_description" gender="unknown">नहीं चुने गए</string>
+    <string name="state_on_description" gender="unknown">चालू है</string>
+    <string name="state_off_description" gender="unknown">बंद है</string>
+    <string name="state_mixed_description" gender="unknown">मिक्स</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hr/strings.xml
new file mode 100644
index 0000000..d2d2419
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hr/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hr_HR -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Veza</string>
+    <string name="image_description" gender="unknown">Slika</string>
+    <string name="imagebutton_description" gender="unknown">Gumb, slika</string>
+    <string name="header_description" gender="unknown">Zaglavlje</string>
+    <string name="alert_description" gender="unknown">Upozorenje</string>
+    <string name="combobox_description" gender="unknown">Kombinirani okvir</string>
+    <string name="menu_description" gender="unknown">Izbornik</string>
+    <string name="menubar_description" gender="unknown">Traka izbornika</string>
+    <string name="menuitem_description" gender="unknown">Stavka izbornika</string>
+    <string name="progressbar_description" gender="unknown">Traka napretka</string>
+    <string name="radiogroup_description" gender="unknown">Grupa izbornih gumba</string>
+    <string name="scrollbar_description" gender="unknown">Traka za pomicanje</string>
+    <string name="spinbutton_description" gender="unknown">Gumb za vrtnju</string>
+    <string name="rn_tab_description" gender="unknown">Kartica</string>
+    <string name="tablist_description" gender="unknown">Popis kartica</string>
+    <string name="timer_description" gender="unknown">Mjerač vremena</string>
+    <string name="toolbar_description" gender="unknown">Traka s alatima</string>
+    <string name="summary_description" gender="unknown">Sažetak</string>
+    <string name="state_busy_description" gender="unknown">zauzeto</string>
+    <string name="state_expanded_description" gender="unknown">prošireno</string>
+    <string name="state_collapsed_description" gender="unknown">sažeto</string>
+    <string name="state_unselected_description" gender="unknown">poništen odabir</string>
+    <string name="state_on_description" gender="unknown">uključeno</string>
+    <string name="state_off_description" gender="unknown">isključeno</string>
+    <string name="state_mixed_description" gender="unknown">mješovito</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hu/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hu/strings.xml
new file mode 100644
index 0000000..ea922b6
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hu/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hu_HU -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Hivatkozás</string>
+    <string name="image_description" gender="unknown">Kép</string>
+    <string name="imagebutton_description" gender="unknown">Gomb, kép</string>
+    <string name="header_description" gender="unknown">Címsor</string>
+    <string name="alert_description" gender="unknown">Figyelmeztetés</string>
+    <string name="combobox_description" gender="unknown">Kombinált lista</string>
+    <string name="menu_description" gender="unknown">Menü</string>
+    <string name="menubar_description" gender="unknown">Menüsor</string>
+    <string name="menuitem_description" gender="unknown">Menüelem</string>
+    <string name="progressbar_description" gender="unknown">Folyamatjelző</string>
+    <string name="radiogroup_description" gender="unknown">Választógomb-csoport</string>
+    <string name="scrollbar_description" gender="unknown">Görgetősáv</string>
+    <string name="spinbutton_description" gender="unknown">Forgó gomb</string>
+    <string name="rn_tab_description" gender="unknown">Lapfül</string>
+    <string name="tablist_description" gender="unknown">Lapfülek listája</string>
+    <string name="timer_description" gender="unknown">Időmérő</string>
+    <string name="toolbar_description" gender="unknown">Eszköztár</string>
+    <string name="summary_description" gender="unknown">Összegzés</string>
+    <string name="state_busy_description" gender="unknown">elfoglalt</string>
+    <string name="state_expanded_description" gender="unknown">kibontva</string>
+    <string name="state_collapsed_description" gender="unknown">összecsukva</string>
+    <string name="state_unselected_description" gender="unknown">nincs kiválasztva</string>
+    <string name="state_on_description" gender="unknown">be</string>
+    <string name="state_off_description" gender="unknown">ki</string>
+    <string name="state_mixed_description" gender="unknown">vegyes</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hy/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hy/strings.xml
new file mode 100644
index 0000000..3853279
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-hy/strings.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hy_AM -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Հղում</string>
+    <string name="image_description" gender="unknown">Նկար</string>
+    <string name="imagebutton_description" gender="unknown">Կոճակ, նկար</string>
+    <string name="combobox_description" gender="unknown">Կոմբո արկղ</string>
+    <string name="menu_description" gender="unknown">Ընտրացանկ</string>
+    <string name="state_on_description" gender="unknown">միացրած</string>
+    <string name="state_off_description" gender="unknown">անջատած</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-is/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-is/strings.xml
new file mode 100644
index 0000000..e4a30ca
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-is/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: is_IS -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-it/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-it/strings.xml
new file mode 100644
index 0000000..0a87368
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-it/strings.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: it_IT -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="image_description" gender="unknown">Immagine</string>
+    <string name="imagebutton_description" gender="unknown">Pulsante, Immagine</string>
+    <string name="header_description" gender="unknown">Titolo</string>
+    <string name="alert_description" gender="unknown">Avviso</string>
+    <string name="combobox_description" gender="unknown">Casella combinata</string>
+    <string name="menubar_description" gender="unknown">Barra dei menu</string>
+    <string name="menuitem_description" gender="unknown">Elemento del menu</string>
+    <string name="progressbar_description" gender="unknown">Barra di avanzamento</string>
+    <string name="radiogroup_description" gender="unknown">Gruppo radio</string>
+    <string name="scrollbar_description" gender="unknown">Barra di scorrimento</string>
+    <string name="spinbutton_description" gender="unknown">Pulsante girevole</string>
+    <string name="tablist_description" gender="unknown">Lista delle tab</string>
+    <string name="toolbar_description" gender="unknown">Barra degli strumenti</string>
+    <string name="summary_description" gender="unknown">Riepilogo</string>
+    <string name="state_busy_description" gender="unknown">occupato</string>
+    <string name="state_expanded_description" gender="unknown">aperto</string>
+    <string name="state_collapsed_description" gender="unknown">chiuso</string>
+    <string name="state_unselected_description" gender="unknown">non selezionato</string>
+    <string name="state_on_description" gender="unknown">sì</string>
+    <string name="state_off_description" gender="unknown">no</string>
+    <string name="state_mixed_description" gender="unknown">misto</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-iw/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-iw/strings.xml
new file mode 100644
index 0000000..d032407
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-iw/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: he_IL -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">קישור</string>
+    <string name="image_description" gender="unknown">תמונה</string>
+    <string name="imagebutton_description" gender="unknown">לחצן, תמונה</string>
+    <string name="header_description" gender="unknown">כותרת</string>
+    <string name="alert_description" gender="unknown">התראה</string>
+    <string name="combobox_description" gender="unknown">תיבה משולבת</string>
+    <string name="menu_description" gender="unknown">תפריט</string>
+    <string name="menubar_description" gender="unknown">סרגל תפריטים</string>
+    <string name="menuitem_description" gender="unknown">פריט בתפריט</string>
+    <string name="progressbar_description" gender="unknown">סרגל התקדמות</string>
+    <string name="radiogroup_description" gender="unknown">קבוצת רדיו</string>
+    <string name="scrollbar_description" gender="unknown">סרגל גלילה</string>
+    <string name="spinbutton_description" gender="unknown">לחצן מסתובב</string>
+    <string name="rn_tab_description" gender="unknown">לשונית</string>
+    <string name="tablist_description" gender="unknown">רשימת לשוניות</string>
+    <string name="timer_description" gender="unknown">טיימר</string>
+    <string name="toolbar_description" gender="unknown">סרגל כלים</string>
+    <string name="summary_description" gender="unknown">סיכום</string>
+    <string name="state_busy_description" gender="unknown">תפוס</string>
+    <string name="state_expanded_description" gender="unknown">מורחב</string>
+    <string name="state_collapsed_description" gender="unknown">מצומצם</string>
+    <string name="state_unselected_description" gender="unknown">הבחירה בוטלה</string>
+    <string name="state_on_description" gender="unknown">מופעל</string>
+    <string name="state_off_description" gender="unknown">כבוי</string>
+    <string name="state_mixed_description" gender="unknown">משולב</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ja/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ja/strings.xml
new file mode 100644
index 0000000..871ca3b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ja/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ja_JP -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">リンク</string>
+    <string name="image_description" gender="unknown">画像</string>
+    <string name="imagebutton_description" gender="unknown">ボタン、画像</string>
+    <string name="header_description" gender="unknown">見出し</string>
+    <string name="alert_description" gender="unknown">アラート</string>
+    <string name="combobox_description" gender="unknown">コンボボックス</string>
+    <string name="menu_description" gender="unknown">メニュー</string>
+    <string name="menubar_description" gender="unknown">メニューバー</string>
+    <string name="menuitem_description" gender="unknown">メニューアイテム</string>
+    <string name="progressbar_description" gender="unknown">進行状況バー</string>
+    <string name="radiogroup_description" gender="unknown">ラジオグループ</string>
+    <string name="scrollbar_description" gender="unknown">スクロールバー</string>
+    <string name="spinbutton_description" gender="unknown">スピンボタン</string>
+    <string name="rn_tab_description" gender="unknown">タブ</string>
+    <string name="tablist_description" gender="unknown">タブリスト</string>
+    <string name="timer_description" gender="unknown">タイマー</string>
+    <string name="toolbar_description" gender="unknown">ツールバー</string>
+    <string name="summary_description" gender="unknown">概要</string>
+    <string name="state_busy_description" gender="unknown">作業中</string>
+    <string name="state_expanded_description" gender="unknown">展開中</string>
+    <string name="state_collapsed_description" gender="unknown">縮小中</string>
+    <string name="state_unselected_description" gender="unknown">未選択</string>
+    <string name="state_on_description" gender="unknown">オン</string>
+    <string name="state_off_description" gender="unknown">オフ</string>
+    <string name="state_mixed_description" gender="unknown">混合</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ka/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ka/strings.xml
new file mode 100644
index 0000000..c41275f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ka/strings.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ka_GE -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">ბმული</string>
+    <string name="image_description" gender="unknown">გამოსახულება</string>
+    <string name="imagebutton_description" gender="unknown">ღილაკი, გამოსახულება</string>
+    <string name="header_description" gender="unknown">სათაური</string>
+    <string name="alert_description" gender="unknown">გაფრთხილება</string>
+    <string name="menu_description" gender="unknown">მენიუ</string>
+    <string name="menubar_description" gender="unknown">მენიუს ზოლი</string>
+    <string name="menuitem_description" gender="unknown">მენიუს ერთეული</string>
+    <string name="progressbar_description" gender="unknown">პროგრესის ზოლი</string>
+    <string name="radiogroup_description" gender="unknown">რადიო ჯგუფი</string>
+    <string name="scrollbar_description" gender="unknown">გადაადგილების პანელი</string>
+    <string name="spinbutton_description" gender="unknown">დატრიალების ღილაკი</string>
+    <string name="rn_tab_description" gender="unknown">ჩანართი</string>
+    <string name="tablist_description" gender="unknown">ჩანართების სია</string>
+    <string name="timer_description" gender="unknown">ტაიმერი</string>
+    <string name="toolbar_description" gender="unknown">ხელსაწყოების ზოლი</string>
+    <string name="summary_description" gender="unknown">შეჯამება</string>
+    <string name="state_busy_description" gender="unknown">დაკავებული</string>
+    <string name="state_expanded_description" gender="unknown">გაშლილი</string>
+    <string name="state_collapsed_description" gender="unknown">აკეცილი</string>
+    <string name="state_unselected_description" gender="unknown">აურჩეველი</string>
+    <string name="state_on_description" gender="unknown">ჩართული</string>
+    <string name="state_off_description" gender="unknown">გამორთულია</string>
+    <string name="state_mixed_description" gender="unknown">შერეული</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-kk/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-kk/strings.xml
new file mode 100644
index 0000000..278368e
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-kk/strings.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: kk_KZ -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Сілтеме</string>
+    <string name="image_description" gender="unknown">Кескін</string>
+    <string name="imagebutton_description" gender="unknown">Түйме, кескін</string>
+    <string name="combobox_description" gender="unknown">Біріктірілген тізім</string>
+    <string name="menu_description" gender="unknown">Мәзір</string>
+    <string name="state_on_description" gender="unknown">қосулы</string>
+    <string name="state_off_description" gender="unknown">өшірулі</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-km/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-km/strings.xml
new file mode 100644
index 0000000..88e3287
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-km/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: km_KH -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">តំណ</string>
+    <string name="image_description" gender="unknown">រូបភាព</string>
+    <string name="imagebutton_description" gender="unknown">ប៊ូតុង, រូបភាព</string>
+    <string name="header_description" gender="unknown">ចំណងជើង</string>
+    <string name="alert_description" gender="unknown">ជូន​ដំណឹង</string>
+    <string name="combobox_description" gender="unknown">ប្រអប់បញ្ចូលគ្នា</string>
+    <string name="menu_description" gender="unknown">ម៉ឺនុយ</string>
+    <string name="menubar_description" gender="unknown">របារម៉ឺនុយ</string>
+    <string name="menuitem_description" gender="unknown">ធាតុម៉ឺនុយ</string>
+    <string name="progressbar_description" gender="unknown">របារ​ដំណើរការ</string>
+    <string name="radiogroup_description" gender="unknown">ក្រុមវិទ្យុ</string>
+    <string name="scrollbar_description" gender="unknown">របាររំកិល</string>
+    <string name="spinbutton_description" gender="unknown">ប៊ូតុង​បង្វិល</string>
+    <string name="rn_tab_description" gender="unknown">ផ្ទាំង</string>
+    <string name="tablist_description" gender="unknown">បញ្ជីថេប</string>
+    <string name="timer_description" gender="unknown">មុខងារកំណត់ម៉ោង</string>
+    <string name="toolbar_description" gender="unknown">របារ​ឧបករណ៍</string>
+    <string name="summary_description" gender="unknown">សេចក្ដីសង្ខេប</string>
+    <string name="state_busy_description" gender="unknown">ជាប់រវល់</string>
+    <string name="state_expanded_description" gender="unknown">បានពង្រីក</string>
+    <string name="state_collapsed_description" gender="unknown">បានបង្រួម</string>
+    <string name="state_unselected_description" gender="unknown">បាបនដោះការជ្រើសរើស</string>
+    <string name="state_on_description" gender="unknown">បើក</string>
+    <string name="state_off_description" gender="unknown">បិទ</string>
+    <string name="state_mixed_description" gender="unknown">បានលាយ</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-kn/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-kn/strings.xml
new file mode 100644
index 0000000..15c52af
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-kn/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: kn_IN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">ಲಿಂಕ್</string>
+    <string name="image_description" gender="unknown">ಚಿತ್ರ</string>
+    <string name="imagebutton_description" gender="unknown">ಬಟನ್, ಚಿತ್ರ</string>
+    <string name="header_description" gender="unknown">ಶಿರೋಲೇಖ</string>
+    <string name="alert_description" gender="unknown">ಎಚ್ಚರಿಕೆ</string>
+    <string name="combobox_description" gender="unknown">ಕೊಂಬೊ ಬಾಕ್ಸ್</string>
+    <string name="menu_description" gender="unknown">ಮೆನು</string>
+    <string name="menubar_description" gender="unknown">ಮೆನು ಬಾರ್</string>
+    <string name="menuitem_description" gender="unknown">ಮೆನು ಐಟಂ</string>
+    <string name="progressbar_description" gender="unknown">ಪ್ರೋಗ್ರೆಸ್ ಬಾರ್</string>
+    <string name="radiogroup_description" gender="unknown">ರೇಡಿಯೋ ಗುಂಪು</string>
+    <string name="scrollbar_description" gender="unknown">ಸ್ಕ್ರಾಲ್ ಬಾರ್</string>
+    <string name="spinbutton_description" gender="unknown">ಸ್ಪಿನ್ ಬಟನ್</string>
+    <string name="rn_tab_description" gender="unknown">ಟ್ಯಾಬ್</string>
+    <string name="tablist_description" gender="unknown">ಟ್ಯಾಬ್ ಪಟ್ಟಿ</string>
+    <string name="timer_description" gender="unknown">ಟೈಮರ್</string>
+    <string name="toolbar_description" gender="unknown">ಟೂಲ್ ಬಾರ್</string>
+    <string name="summary_description" gender="unknown">ಸಾರಾಂಶ</string>
+    <string name="state_busy_description" gender="unknown">ಕಾರ್ಯನಿರತ</string>
+    <string name="state_expanded_description" gender="unknown">ವಿಸ್ತರಿಸಲಾಗಿದೆ</string>
+    <string name="state_collapsed_description" gender="unknown">ಮುಚ್ಚಿದೆ</string>
+    <string name="state_unselected_description" gender="unknown">ಆಯ್ಕೆ ರದ್ದುಮಾಡಲಾಗಿದೆ</string>
+    <string name="state_on_description" gender="unknown">ಆನ್</string>
+    <string name="state_off_description" gender="unknown">ಆಫ್</string>
+    <string name="state_mixed_description" gender="unknown">ಬಗೆಬಗೆಯ</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ko/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ko/strings.xml
new file mode 100644
index 0000000..7370e6d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ko/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ko_KR -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">링크</string>
+    <string name="image_description" gender="unknown">이미지</string>
+    <string name="imagebutton_description" gender="unknown">버튼, 이미지</string>
+    <string name="header_description" gender="unknown">제목</string>
+    <string name="alert_description" gender="unknown">알림</string>
+    <string name="combobox_description" gender="unknown">콤보 상자</string>
+    <string name="menu_description" gender="unknown">메뉴</string>
+    <string name="menubar_description" gender="unknown">메뉴 표시줄</string>
+    <string name="menuitem_description" gender="unknown">메뉴 항목</string>
+    <string name="progressbar_description" gender="unknown">진행률 표시줄</string>
+    <string name="radiogroup_description" gender="unknown">라디오 그룹</string>
+    <string name="scrollbar_description" gender="unknown">스크롤 바</string>
+    <string name="spinbutton_description" gender="unknown">회전 버튼</string>
+    <string name="rn_tab_description" gender="unknown">탭</string>
+    <string name="tablist_description" gender="unknown">탭 리스트</string>
+    <string name="timer_description" gender="unknown">타이머</string>
+    <string name="toolbar_description" gender="unknown">도구 표시줄</string>
+    <string name="summary_description" gender="unknown">요약</string>
+    <string name="state_busy_description" gender="unknown">처리 중</string>
+    <string name="state_expanded_description" gender="unknown">확대됨</string>
+    <string name="state_collapsed_description" gender="unknown">숨겨짐</string>
+    <string name="state_unselected_description" gender="unknown">선택되지 않음</string>
+    <string name="state_on_description" gender="unknown">설정</string>
+    <string name="state_off_description" gender="unknown">해제</string>
+    <string name="state_mixed_description" gender="unknown">혼합</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ky/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ky/strings.xml
new file mode 100644
index 0000000..ca3bf4a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ky/strings.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ky_KG -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Шилтеме</string>
+    <string name="image_description" gender="unknown">Сүрөт</string>
+    <string name="imagebutton_description" gender="unknown">Баскыч, сүрөт</string>
+    <string name="combobox_description" gender="unknown">Айкалыштырылган тизме</string>
+    <string name="menu_description" gender="unknown">Меню</string>
+    <string name="state_on_description" gender="unknown">күйүк</string>
+    <string name="state_off_description" gender="unknown">өчүк</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-lo/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-lo/strings.xml
new file mode 100644
index 0000000..13e8452
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-lo/strings.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: lo_LA -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">ລິ້ງ</string>
+    <string name="image_description" gender="unknown">ຮູບພາບ</string>
+    <string name="imagebutton_description" gender="unknown">ປຸ່ມ, ຮູບພາບ</string>
+    <string name="combobox_description" gender="unknown">ກ່ອງຄອມໂບ</string>
+    <string name="menu_description" gender="unknown">ເມນູ</string>
+    <string name="state_on_description" gender="unknown">ເປີດ</string>
+    <string name="state_off_description" gender="unknown">ປິດ</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-lt/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-lt/strings.xml
new file mode 100644
index 0000000..454a465
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-lt/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: lt_LT -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Nuoroda</string>
+    <string name="image_description" gender="unknown">Vaizdas</string>
+    <string name="imagebutton_description" gender="unknown">Mygtukas, vaizdas</string>
+    <string name="header_description" gender="unknown">Antraštė</string>
+    <string name="alert_description" gender="unknown">Įspėjimas</string>
+    <string name="combobox_description" gender="unknown">Sudėtinis laukelis</string>
+    <string name="menu_description" gender="unknown">Meniu</string>
+    <string name="menubar_description" gender="unknown">Meniu juosta</string>
+    <string name="menuitem_description" gender="unknown">Meniu elementas</string>
+    <string name="progressbar_description" gender="unknown">Eigos juosta</string>
+    <string name="radiogroup_description" gender="unknown">Akučių grupė</string>
+    <string name="scrollbar_description" gender="unknown">Slinkimo juosta</string>
+    <string name="spinbutton_description" gender="unknown">Sukimo mygtukas</string>
+    <string name="rn_tab_description" gender="unknown">Skirtukas</string>
+    <string name="tablist_description" gender="unknown">Skirtukų sąrašas</string>
+    <string name="timer_description" gender="unknown">Laikmatis</string>
+    <string name="toolbar_description" gender="unknown">Įrankių juosta</string>
+    <string name="summary_description" gender="unknown">Suvestinė</string>
+    <string name="state_busy_description" gender="unknown">naudojama</string>
+    <string name="state_expanded_description" gender="unknown">išskleista</string>
+    <string name="state_collapsed_description" gender="unknown">sutraukta</string>
+    <string name="state_unselected_description" gender="unknown">pasirinkimas atšauktas</string>
+    <string name="state_on_description" gender="unknown">įjungta</string>
+    <string name="state_off_description" gender="unknown">išjungta</string>
+    <string name="state_mixed_description" gender="unknown">mišrus</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-lv/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-lv/strings.xml
new file mode 100644
index 0000000..903d064
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-lv/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: lv_LV -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Saite</string>
+    <string name="image_description" gender="unknown">Attēls</string>
+    <string name="imagebutton_description" gender="unknown">Poga, attēls</string>
+    <string name="header_description" gender="unknown">Virsraksts</string>
+    <string name="alert_description" gender="unknown">Paziņojums</string>
+    <string name="combobox_description" gender="unknown">Kombinētais lodziņš</string>
+    <string name="menu_description" gender="unknown">Izvēlne</string>
+    <string name="menubar_description" gender="unknown">Izvēļņu josla</string>
+    <string name="menuitem_description" gender="unknown">Izvēlnes opcija</string>
+    <string name="progressbar_description" gender="unknown">Progresa josla</string>
+    <string name="radiogroup_description" gender="unknown">Radiopogu kopa</string>
+    <string name="scrollbar_description" gender="unknown">Ritināšanas josla</string>
+    <string name="spinbutton_description" gender="unknown">Vērtību poga</string>
+    <string name="rn_tab_description" gender="unknown">Cilne</string>
+    <string name="tablist_description" gender="unknown">Ciļņu saraksts</string>
+    <string name="timer_description" gender="unknown">Taimeris</string>
+    <string name="toolbar_description" gender="unknown">Rīkjosla</string>
+    <string name="summary_description" gender="unknown">Kopsavilkums</string>
+    <string name="state_busy_description" gender="unknown">aizņemts</string>
+    <string name="state_expanded_description" gender="unknown">izvērsts</string>
+    <string name="state_collapsed_description" gender="unknown">sakļauts</string>
+    <string name="state_unselected_description" gender="unknown">nav atlasīts</string>
+    <string name="state_on_description" gender="unknown">ieslēgts</string>
+    <string name="state_off_description" gender="unknown">izslēgts</string>
+    <string name="state_mixed_description" gender="unknown">jaukti</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-mk/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-mk/strings.xml
new file mode 100644
index 0000000..9ed07d6
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-mk/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: mk_MK -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Врска</string>
+    <string name="image_description" gender="unknown">Слика</string>
+    <string name="imagebutton_description" gender="unknown">Копче, слика</string>
+    <string name="header_description" gender="unknown">Заглавие</string>
+    <string name="alert_description" gender="unknown">Предупредување</string>
+    <string name="combobox_description" gender="unknown">Комбинирано поле</string>
+    <string name="menu_description" gender="unknown">Мени</string>
+    <string name="menubar_description" gender="unknown">Мени лента</string>
+    <string name="menuitem_description" gender="unknown">Производ на мени</string>
+    <string name="progressbar_description" gender="unknown">Лента за напредок</string>
+    <string name="radiogroup_description" gender="unknown">Радио група</string>
+    <string name="scrollbar_description" gender="unknown">Лента за лизгање</string>
+    <string name="spinbutton_description" gender="unknown">Копче за вртење</string>
+    <string name="rn_tab_description" gender="unknown">Картичка</string>
+    <string name="tablist_description" gender="unknown">Список со картички</string>
+    <string name="timer_description" gender="unknown">Тајмер</string>
+    <string name="toolbar_description" gender="unknown">Лента со алатки</string>
+    <string name="summary_description" gender="unknown">Резиме</string>
+    <string name="state_busy_description" gender="unknown">зафатено</string>
+    <string name="state_expanded_description" gender="unknown">проширено</string>
+    <string name="state_collapsed_description" gender="unknown">собрано</string>
+    <string name="state_unselected_description" gender="unknown">изборот е поништен</string>
+    <string name="state_on_description" gender="unknown">вклучено</string>
+    <string name="state_off_description" gender="unknown">исклучено</string>
+    <string name="state_mixed_description" gender="unknown">мешано</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ml/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ml/strings.xml
new file mode 100644
index 0000000..a9aa446
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ml/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ml_IN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">ലിങ്ക്</string>
+    <string name="image_description" gender="unknown">ചിത്രം</string>
+    <string name="imagebutton_description" gender="unknown">ബട്ടൺ, ചിത്രം</string>
+    <string name="header_description" gender="unknown">തലക്കെട്ട്</string>
+    <string name="alert_description" gender="unknown">അലേർട്ട്</string>
+    <string name="combobox_description" gender="unknown">കോംബോ ബോക്‌സ്</string>
+    <string name="menu_description" gender="unknown">മെനു</string>
+    <string name="menubar_description" gender="unknown">മെനു ബാർ</string>
+    <string name="menuitem_description" gender="unknown">മെനു ഇനം</string>
+    <string name="progressbar_description" gender="unknown">പുരോഗതി ബാർ</string>
+    <string name="radiogroup_description" gender="unknown">റേഡിയോ ഗ്രൂപ്പ്</string>
+    <string name="scrollbar_description" gender="unknown">സ്‌ക്രോൾ ബാർ</string>
+    <string name="spinbutton_description" gender="unknown">കറക്കുക ബട്ടൺ</string>
+    <string name="rn_tab_description" gender="unknown">ടാബ്</string>
+    <string name="tablist_description" gender="unknown">ടാബ് ലിസ്‌റ്റ്</string>
+    <string name="timer_description" gender="unknown">ടൈമർ</string>
+    <string name="toolbar_description" gender="unknown">ടൂൾ ബാർ</string>
+    <string name="summary_description" gender="unknown">സംഗ്രഹം</string>
+    <string name="state_busy_description" gender="unknown">തിരക്കിലാണ്</string>
+    <string name="state_expanded_description" gender="unknown">വിപുലീകരിച്ചു</string>
+    <string name="state_collapsed_description" gender="unknown">ചുരുക്കി</string>
+    <string name="state_unselected_description" gender="unknown">തിരഞ്ഞെടുത്തത് മാറ്റി</string>
+    <string name="state_on_description" gender="unknown">ഓണാണ്</string>
+    <string name="state_off_description" gender="unknown">ഓഫാണ്</string>
+    <string name="state_mixed_description" gender="unknown">മിശ്രിതം</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-mn/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-mn/strings.xml
new file mode 100644
index 0000000..b2d21f6
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-mn/strings.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: mn_MN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Холбоос</string>
+    <string name="image_description" gender="unknown">Зураг</string>
+    <string name="imagebutton_description" gender="unknown">Товч, зураг</string>
+    <string name="combobox_description" gender="unknown">Комбо хайрцаг</string>
+    <string name="menu_description" gender="unknown">Цэс</string>
+    <string name="state_on_description" gender="unknown">идэвхтэй</string>
+    <string name="state_off_description" gender="unknown">идэвхгүй</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-mr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-mr/strings.xml
new file mode 100644
index 0000000..bf953bf
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-mr/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: mr_IN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">लिंक</string>
+    <string name="image_description" gender="unknown">प्रतिमा</string>
+    <string name="imagebutton_description" gender="unknown">बटण, प्रतिमा</string>
+    <string name="header_description" gender="unknown">मथळा</string>
+    <string name="alert_description" gender="unknown">अलर्ट</string>
+    <string name="combobox_description" gender="unknown">कॉम्बो बॉक्स</string>
+    <string name="menu_description" gender="unknown">मेनू</string>
+    <string name="menubar_description" gender="unknown">मेनू बार</string>
+    <string name="menuitem_description" gender="unknown">मेनू आयटम</string>
+    <string name="progressbar_description" gender="unknown">प्रगती बार</string>
+    <string name="radiogroup_description" gender="unknown">रेडिओ ग्रुप</string>
+    <string name="scrollbar_description" gender="unknown">बार स्क्रोल करा</string>
+    <string name="spinbutton_description" gender="unknown">बटण स्पिन करा</string>
+    <string name="rn_tab_description" gender="unknown">टॅब</string>
+    <string name="tablist_description" gender="unknown">टॅब लिस्ट</string>
+    <string name="timer_description" gender="unknown">टायमर</string>
+    <string name="toolbar_description" gender="unknown">टूल बार</string>
+    <string name="summary_description" gender="unknown">सारांश</string>
+    <string name="state_busy_description" gender="unknown">व्यग्र</string>
+    <string name="state_expanded_description" gender="unknown">विस्तारित केले</string>
+    <string name="state_collapsed_description" gender="unknown">संकुचित केले</string>
+    <string name="state_unselected_description" gender="unknown">निवड रद्द केलेले</string>
+    <string name="state_on_description" gender="unknown">चालू</string>
+    <string name="state_off_description" gender="unknown">बंद</string>
+    <string name="state_mixed_description" gender="unknown">मिश्र</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ms/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ms/strings.xml
new file mode 100644
index 0000000..c1091f8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ms/strings.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ms_MY -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Pautan</string>
+    <string name="image_description" gender="unknown">Imej</string>
+    <string name="imagebutton_description" gender="unknown">Butang, Imej</string>
+    <string name="header_description" gender="unknown">Tajuk</string>
+    <string name="alert_description" gender="unknown">Isyarat</string>
+    <string name="combobox_description" gender="unknown">Kotak Kombo</string>
+    <string name="menubar_description" gender="unknown">Bar Menu</string>
+    <string name="menuitem_description" gender="unknown">Item Menu</string>
+    <string name="progressbar_description" gender="unknown">Bar Kemajuan</string>
+    <string name="radiogroup_description" gender="unknown">Kumpulan Radio</string>
+    <string name="scrollbar_description" gender="unknown">Bar Tatal</string>
+    <string name="spinbutton_description" gender="unknown">Butang Putaran</string>
+    <string name="tablist_description" gender="unknown">Senarai Tab</string>
+    <string name="timer_description" gender="unknown">Pemasa</string>
+    <string name="toolbar_description" gender="unknown">Bar Alat</string>
+    <string name="summary_description" gender="unknown">Ringkasan</string>
+    <string name="state_busy_description" gender="unknown">sibuk</string>
+    <string name="state_expanded_description" gender="unknown">dikembangkan</string>
+    <string name="state_collapsed_description" gender="unknown">diruntuhkan</string>
+    <string name="state_unselected_description" gender="unknown">dinyahpilih</string>
+    <string name="state_on_description" gender="unknown">dihidupkan</string>
+    <string name="state_off_description" gender="unknown">dimatikan</string>
+    <string name="state_mixed_description" gender="unknown">campuran</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-my/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-my/strings.xml
new file mode 100644
index 0000000..8a8424a
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-my/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: my_MM -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">လင့်ခ်</string>
+    <string name="image_description" gender="unknown">ဓာတ်ပုံ</string>
+    <string name="imagebutton_description" gender="unknown">ခလုတ်၊ ဓာတ်ပုံ</string>
+    <string name="header_description" gender="unknown">ခေါင်းစီး</string>
+    <string name="alert_description" gender="unknown">သတိပေးချက်</string>
+    <string name="combobox_description" gender="unknown">ရွေးရန်အကွက်</string>
+    <string name="menu_description" gender="unknown">မီနူး</string>
+    <string name="menubar_description" gender="unknown">မီနူး ဘားတန်း</string>
+    <string name="menuitem_description" gender="unknown">မီနူး အကြောင်းအရာ</string>
+    <string name="progressbar_description" gender="unknown">ပြီးစီးမှုပြ ဘားတန်း</string>
+    <string name="radiogroup_description" gender="unknown">ရေဒီယိုအုပ်စု</string>
+    <string name="scrollbar_description" gender="unknown">ရွှေ့ဆွဲကြည့်ရန် ဘားတန်း</string>
+    <string name="spinbutton_description" gender="unknown">လှည့်ရန် ခလုတ်</string>
+    <string name="rn_tab_description" gender="unknown">တက်ဘ်</string>
+    <string name="tablist_description" gender="unknown">တက်ဘ်စာရင်း</string>
+    <string name="timer_description" gender="unknown">အချိန်တိုင်းစက်</string>
+    <string name="toolbar_description" gender="unknown">ကိရိယာ ဘားတန်း</string>
+    <string name="summary_description" gender="unknown">အနှစ်ချုပ်</string>
+    <string name="state_busy_description" gender="unknown">လုပ်ဆောင်နေဆဲ</string>
+    <string name="state_expanded_description" gender="unknown">ချဲ့ထားပြီး</string>
+    <string name="state_collapsed_description" gender="unknown">ခေါက်သိမ်းထားပါတယ်</string>
+    <string name="state_unselected_description" gender="unknown">ရွေးမထားပါ</string>
+    <string name="state_on_description" gender="unknown">ဖွင့်</string>
+    <string name="state_off_description" gender="unknown">ပိတ်</string>
+    <string name="state_mixed_description" gender="unknown">ရောစပ်ထားပြီး</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ne/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ne/strings.xml
new file mode 100644
index 0000000..ba3d941
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ne/strings.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ne_NP -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">लिङ्क</string>
+    <string name="image_description" gender="unknown">फोटो</string>
+    <string name="imagebutton_description" gender="unknown">बटन, फोटो</string>
+    <string name="combobox_description" gender="unknown">कम्बो बक्स</string>
+    <string name="menu_description" gender="unknown">मेनु</string>
+    <string name="state_on_description" gender="unknown">अन</string>
+    <string name="state_off_description" gender="unknown">अफ</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-nl/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-nl/strings.xml
new file mode 100644
index 0000000..feeed53
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-nl/strings.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: nl_NL -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="image_description" gender="unknown">Afbeelding</string>
+    <string name="imagebutton_description" gender="unknown">Knop, afbeelding</string>
+    <string name="header_description" gender="unknown">Kop</string>
+    <string name="alert_description" gender="unknown">Waarschuwing</string>
+    <string name="combobox_description" gender="unknown">Combivak</string>
+    <string name="menubar_description" gender="unknown">Menubalk</string>
+    <string name="menuitem_description" gender="unknown">Menu-item</string>
+    <string name="progressbar_description" gender="unknown">Voortgangsbalk</string>
+    <string name="radiogroup_description" gender="unknown">Keuzegroep</string>
+    <string name="scrollbar_description" gender="unknown">Scrollbalk</string>
+    <string name="spinbutton_description" gender="unknown">Draaiknop</string>
+    <string name="rn_tab_description" gender="unknown">Tabblad</string>
+    <string name="tablist_description" gender="unknown">Lijst met tabbladen</string>
+    <string name="toolbar_description" gender="unknown">Werkbalk</string>
+    <string name="summary_description" gender="unknown">Samenvatting</string>
+    <string name="state_busy_description" gender="unknown">bezig</string>
+    <string name="state_expanded_description" gender="unknown">uitgevouwen</string>
+    <string name="state_collapsed_description" gender="unknown">samengevouwen</string>
+    <string name="state_unselected_description" gender="unknown">gedeselecteerd</string>
+    <string name="state_on_description" gender="unknown">aan</string>
+    <string name="state_off_description" gender="unknown">uit</string>
+    <string name="state_mixed_description" gender="unknown">gemengd</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pa/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pa/strings.xml
new file mode 100644
index 0000000..7cc4e09
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pa/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pa_IN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">ਲਿੰਕ</string>
+    <string name="image_description" gender="unknown">ਚਿੱਤਰ</string>
+    <string name="imagebutton_description" gender="unknown">ਬਟਨ, ਚਿੱਤਰ</string>
+    <string name="header_description" gender="unknown">ਸਿਰਲੇਖ</string>
+    <string name="alert_description" gender="unknown">ਸੁਚੇਤਨਾ</string>
+    <string name="combobox_description" gender="unknown">ਕੋਂਬੋ ਬਾਕਸ</string>
+    <string name="menu_description" gender="unknown">ਮੀਨੂ</string>
+    <string name="menubar_description" gender="unknown">ਮੀਨੂ ਬਾਰ</string>
+    <string name="menuitem_description" gender="unknown">ਮੀਨੂ ਆਈਟਮ</string>
+    <string name="progressbar_description" gender="unknown">ਪ੍ਰੋਗਰੈੱਸ ਬਾਰ</string>
+    <string name="radiogroup_description" gender="unknown">ਰਡੀਓ ਗਰੁੱਪ</string>
+    <string name="scrollbar_description" gender="unknown">ਸਕ੍ਰੋਲ ਬਾਰ</string>
+    <string name="spinbutton_description" gender="unknown">\'ਘੁੰਮਾਓ\' ਬਟਨ</string>
+    <string name="rn_tab_description" gender="unknown">ਟੈਬ</string>
+    <string name="tablist_description" gender="unknown">ਟੈਬ ਸੂਚੀ</string>
+    <string name="timer_description" gender="unknown">ਟਾਈਮਰ</string>
+    <string name="toolbar_description" gender="unknown">ਟੂਲ ਬਾਰ</string>
+    <string name="summary_description" gender="unknown">ਸਾਰ</string>
+    <string name="state_busy_description" gender="unknown">ਵਿਅਸਤ</string>
+    <string name="state_expanded_description" gender="unknown">ਵਿਸਤਾਰ ਕੀਤਾ ਗਿਆ</string>
+    <string name="state_collapsed_description" gender="unknown">ਸਮੇਟਿਆ ਗਿਆ</string>
+    <string name="state_unselected_description" gender="unknown">ਚੋਣ ਹਟਾਈ ਗਈ</string>
+    <string name="state_on_description" gender="unknown">ਚਾਲੂ</string>
+    <string name="state_off_description" gender="unknown">ਬੰਦ</string>
+    <string name="state_mixed_description" gender="unknown">ਮਿਕਸਡ</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pl/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pl/strings.xml
new file mode 100644
index 0000000..040ce84
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pl/strings.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pl_PL -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="image_description" gender="unknown">Obraz</string>
+    <string name="imagebutton_description" gender="unknown">Przycisk, obraz</string>
+    <string name="header_description" gender="unknown">Nagłówek</string>
+    <string name="combobox_description" gender="unknown">Pole kombi</string>
+    <string name="menubar_description" gender="unknown">Pasek menu</string>
+    <string name="menuitem_description" gender="unknown">Pozycja menu</string>
+    <string name="progressbar_description" gender="unknown">Pasek postępu</string>
+    <string name="radiogroup_description" gender="unknown">Grupa przycisków radiowych</string>
+    <string name="scrollbar_description" gender="unknown">Pasek przewijania</string>
+    <string name="spinbutton_description" gender="unknown">Przycisk kręcenia</string>
+    <string name="rn_tab_description" gender="unknown">Karta</string>
+    <string name="tablist_description" gender="unknown">Lista kart</string>
+    <string name="timer_description" gender="unknown">Czasomierz</string>
+    <string name="toolbar_description" gender="unknown">Pasek narzędzi</string>
+    <string name="summary_description" gender="unknown">Podsumowanie</string>
+    <string name="state_busy_description" gender="unknown">zajęte</string>
+    <string name="state_expanded_description" gender="unknown">rozwinięte</string>
+    <string name="state_collapsed_description" gender="unknown">zwinięte</string>
+    <string name="state_unselected_description" gender="unknown">nie wybrano</string>
+    <string name="state_on_description" gender="unknown">wł.</string>
+    <string name="state_off_description" gender="unknown">wył.</string>
+    <string name="state_mixed_description" gender="unknown">mieszane</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pt-rPT/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pt-rPT/strings.xml
new file mode 100644
index 0000000..f3afd9b
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pt-rPT/strings.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pt_PT -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Ligação</string>
+    <string name="image_description" gender="unknown">Imagem</string>
+    <string name="imagebutton_description" gender="unknown">Botão, Imagem</string>
+    <string name="header_description" gender="unknown">Título</string>
+    <string name="alert_description" gender="unknown">Aviso</string>
+    <string name="combobox_description" gender="unknown">Caixa de combinação</string>
+    <string name="menubar_description" gender="unknown">Barra do menu</string>
+    <string name="menuitem_description" gender="unknown">Item do menu</string>
+    <string name="progressbar_description" gender="unknown">Barra de progresso</string>
+    <string name="radiogroup_description" gender="unknown">Grupo de opções</string>
+    <string name="scrollbar_description" gender="unknown">Barra de deslocamento</string>
+    <string name="spinbutton_description" gender="unknown">Botão giratório</string>
+    <string name="rn_tab_description" gender="unknown">Separador</string>
+    <string name="tablist_description" gender="unknown">Lista de separadores</string>
+    <string name="timer_description" gender="unknown">Temporizador</string>
+    <string name="toolbar_description" gender="unknown">Barra de ferramentas</string>
+    <string name="summary_description" gender="unknown">Resumo</string>
+    <string name="state_busy_description" gender="unknown">ocupado</string>
+    <string name="state_expanded_description" gender="unknown">expandido</string>
+    <string name="state_collapsed_description" gender="unknown">fechado</string>
+    <string name="state_unselected_description" gender="unknown">não selecionado</string>
+    <string name="state_on_description" gender="unknown">ativado</string>
+    <string name="state_off_description" gender="unknown">desativado</string>
+    <string name="state_mixed_description" gender="unknown">misto</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pt/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pt/strings.xml
new file mode 100644
index 0000000..940fdce
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-pt/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pt_BR -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Link</string>
+    <string name="image_description" gender="unknown">Imagem</string>
+    <string name="imagebutton_description" gender="unknown">Botão, imagem</string>
+    <string name="header_description" gender="unknown">Título</string>
+    <string name="alert_description" gender="unknown">Alerta</string>
+    <string name="combobox_description" gender="unknown">Caixa de combinação</string>
+    <string name="menu_description" gender="unknown">Menu</string>
+    <string name="menubar_description" gender="unknown">Barra do menu</string>
+    <string name="menuitem_description" gender="unknown">Item do menu</string>
+    <string name="progressbar_description" gender="unknown">Barra de progresso</string>
+    <string name="radiogroup_description" gender="unknown">Botão de grupo de opções</string>
+    <string name="scrollbar_description" gender="unknown">Barra de rolamento</string>
+    <string name="spinbutton_description" gender="unknown">Botão de rotação</string>
+    <string name="rn_tab_description" gender="unknown">Aba</string>
+    <string name="tablist_description" gender="unknown">Lista de abas</string>
+    <string name="timer_description" gender="unknown">Temporizador</string>
+    <string name="toolbar_description" gender="unknown">Barra de ferramentas</string>
+    <string name="summary_description" gender="unknown">Resumo</string>
+    <string name="state_busy_description" gender="unknown">ocupado</string>
+    <string name="state_expanded_description" gender="unknown">expandido</string>
+    <string name="state_collapsed_description" gender="unknown">recolhido</string>
+    <string name="state_unselected_description" gender="unknown">desmarcados</string>
+    <string name="state_on_description" gender="unknown">ativado</string>
+    <string name="state_off_description" gender="unknown">desativado</string>
+    <string name="state_mixed_description" gender="unknown">misto</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ro/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ro/strings.xml
new file mode 100644
index 0000000..571d7e6
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ro/strings.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ro_RO -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="image_description" gender="unknown">Imagine</string>
+    <string name="imagebutton_description" gender="unknown">Buton, imagine</string>
+    <string name="header_description" gender="unknown">Antet</string>
+    <string name="alert_description" gender="unknown">Alertă</string>
+    <string name="combobox_description" gender="unknown">Casetă combo</string>
+    <string name="menu_description" gender="unknown">Meniu</string>
+    <string name="menubar_description" gender="unknown">Bară meniu</string>
+    <string name="menuitem_description" gender="unknown">Element din meniu</string>
+    <string name="progressbar_description" gender="unknown">Bară de progres</string>
+    <string name="radiogroup_description" gender="unknown">Grup de butoane radio</string>
+    <string name="scrollbar_description" gender="unknown">Bară de derulare</string>
+    <string name="spinbutton_description" gender="unknown">Buton de incrementare</string>
+    <string name="rn_tab_description" gender="unknown">Filă</string>
+    <string name="tablist_description" gender="unknown">Listă file</string>
+    <string name="toolbar_description" gender="unknown">Bară de instrumente</string>
+    <string name="summary_description" gender="unknown">Rezumat</string>
+    <string name="state_busy_description" gender="unknown">ocupat</string>
+    <string name="state_expanded_description" gender="unknown">extins</string>
+    <string name="state_collapsed_description" gender="unknown">restrâns</string>
+    <string name="state_unselected_description" gender="unknown">neselectat</string>
+    <string name="state_on_description" gender="unknown">activat</string>
+    <string name="state_off_description" gender="unknown">dezactivat</string>
+    <string name="state_mixed_description" gender="unknown">combinat</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ru/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ru/strings.xml
new file mode 100644
index 0000000..3d4088f
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ru/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ru_RU -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Ссылка</string>
+    <string name="image_description" gender="unknown">Изображение</string>
+    <string name="imagebutton_description" gender="unknown">Кнопка, изображение</string>
+    <string name="header_description" gender="unknown">Заголовок</string>
+    <string name="alert_description" gender="unknown">Оповещение</string>
+    <string name="combobox_description" gender="unknown">Комбинированный список</string>
+    <string name="menu_description" gender="unknown">Меню</string>
+    <string name="menubar_description" gender="unknown">Панель меню</string>
+    <string name="menuitem_description" gender="unknown">Элемент меню</string>
+    <string name="progressbar_description" gender="unknown">Индикатор прогресса</string>
+    <string name="radiogroup_description" gender="unknown">Группа кнопок-переключателей</string>
+    <string name="scrollbar_description" gender="unknown">Полоса прокрутки</string>
+    <string name="spinbutton_description" gender="unknown">Кнопка кольцевого списка</string>
+    <string name="rn_tab_description" gender="unknown">Вкладка</string>
+    <string name="tablist_description" gender="unknown">Список вкладок</string>
+    <string name="timer_description" gender="unknown">Таймер</string>
+    <string name="toolbar_description" gender="unknown">Панель инструментов</string>
+    <string name="summary_description" gender="unknown">Сводка</string>
+    <string name="state_busy_description" gender="unknown">занято</string>
+    <string name="state_expanded_description" gender="unknown">развернуто</string>
+    <string name="state_collapsed_description" gender="unknown">свернуто</string>
+    <string name="state_unselected_description" gender="unknown">не выбрано</string>
+    <string name="state_on_description" gender="unknown">включено</string>
+    <string name="state_off_description" gender="unknown">выкл</string>
+    <string name="state_mixed_description" gender="unknown">смешано</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-si/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-si/strings.xml
new file mode 100644
index 0000000..5aeb462
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-si/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: si_LK -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">සබැඳිය</string>
+    <string name="image_description" gender="unknown">රූපය</string>
+    <string name="imagebutton_description" gender="unknown">‍බොත්තම, රූපය</string>
+    <string name="header_description" gender="unknown">සිරස්තලය</string>
+    <string name="alert_description" gender="unknown">ඇඟවීම</string>
+    <string name="combobox_description" gender="unknown">සංයුක්ත පෙට්ටිය</string>
+    <string name="menu_description" gender="unknown">මෙනුව</string>
+    <string name="menubar_description" gender="unknown">මෙනු තීරුව</string>
+    <string name="menuitem_description" gender="unknown">‍මෙනු අයිතමය</string>
+    <string name="progressbar_description" gender="unknown">ප්‍රගති තීරුව</string>
+    <string name="radiogroup_description" gender="unknown">ගුවන්විදුලි සමූහය</string>
+    <string name="scrollbar_description" gender="unknown">අනුචලන තීරුව</string>
+    <string name="spinbutton_description" gender="unknown">වේගයෙන් කරකවන බොත්තම</string>
+    <string name="rn_tab_description" gender="unknown">ටැබය</string>
+    <string name="tablist_description" gender="unknown">ටැබ ලැයිස්තුව</string>
+    <string name="timer_description" gender="unknown">කාල ගණකය</string>
+    <string name="toolbar_description" gender="unknown">මෙවලම් තීරුව</string>
+    <string name="summary_description" gender="unknown">සාරාංශය</string>
+    <string name="state_busy_description" gender="unknown">කාර්යබහුලයි</string>
+    <string name="state_expanded_description" gender="unknown">විහිදුවන ලදි</string>
+    <string name="state_collapsed_description" gender="unknown">හකුළන ලදී</string>
+    <string name="state_unselected_description" gender="unknown">තේරීම ඉවත් කරන ලද</string>
+    <string name="state_on_description" gender="unknown">ක්‍රියාත්මකයි</string>
+    <string name="state_off_description" gender="unknown">අක්‍රියයි</string>
+    <string name="state_mixed_description" gender="unknown">මිශ්‍ර කළ</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sk/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sk/strings.xml
new file mode 100644
index 0000000..7d7f4b6
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sk/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sk_SK -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Odkaz</string>
+    <string name="image_description" gender="unknown">Obrázok</string>
+    <string name="imagebutton_description" gender="unknown">Tlačidlo, obrázok</string>
+    <string name="header_description" gender="unknown">Nadpis</string>
+    <string name="alert_description" gender="unknown">Upozornenie</string>
+    <string name="combobox_description" gender="unknown">Kombinované pole</string>
+    <string name="menu_description" gender="unknown">Ponuka</string>
+    <string name="menubar_description" gender="unknown">Lišta s ponukou</string>
+    <string name="menuitem_description" gender="unknown">Položka ponuky</string>
+    <string name="progressbar_description" gender="unknown">Indikátor postupu</string>
+    <string name="radiogroup_description" gender="unknown">Skupina tlačidiel na výber</string>
+    <string name="scrollbar_description" gender="unknown">Lišta na posúvanie</string>
+    <string name="spinbutton_description" gender="unknown">Otočné tlačidlo</string>
+    <string name="rn_tab_description" gender="unknown">Tabulátor</string>
+    <string name="tablist_description" gender="unknown">Zoznam kariet</string>
+    <string name="timer_description" gender="unknown">Časovač</string>
+    <string name="toolbar_description" gender="unknown">Panel s nástrojmi</string>
+    <string name="summary_description" gender="unknown">Súhrn</string>
+    <string name="state_busy_description" gender="unknown">obsadené</string>
+    <string name="state_expanded_description" gender="unknown">rozbalené</string>
+    <string name="state_collapsed_description" gender="unknown">zbalené</string>
+    <string name="state_unselected_description" gender="unknown">nevybrané</string>
+    <string name="state_on_description" gender="unknown">zapnuté</string>
+    <string name="state_off_description" gender="unknown">vypnuté</string>
+    <string name="state_mixed_description" gender="unknown">zmiešané</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sl/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sl/strings.xml
new file mode 100644
index 0000000..a70f4bf
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sl/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sl_SI -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Povezava</string>
+    <string name="image_description" gender="unknown">Slika</string>
+    <string name="imagebutton_description" gender="unknown">Gumb, slika</string>
+    <string name="header_description" gender="unknown">Naslov</string>
+    <string name="alert_description" gender="unknown">Opozorilo</string>
+    <string name="combobox_description" gender="unknown">Kombinirano polje</string>
+    <string name="menu_description" gender="unknown">Meni</string>
+    <string name="menubar_description" gender="unknown">Meni</string>
+    <string name="menuitem_description" gender="unknown">Element v meniju</string>
+    <string name="progressbar_description" gender="unknown">Črta napredka</string>
+    <string name="radiogroup_description" gender="unknown">Radio skupina</string>
+    <string name="scrollbar_description" gender="unknown">Drsnik</string>
+    <string name="spinbutton_description" gender="unknown">Vrtljivi gumb</string>
+    <string name="rn_tab_description" gender="unknown">Zavihek</string>
+    <string name="tablist_description" gender="unknown">Seznam z zavihki</string>
+    <string name="timer_description" gender="unknown">Časovnik</string>
+    <string name="toolbar_description" gender="unknown">Vrstica z orodji</string>
+    <string name="summary_description" gender="unknown">Povzetek</string>
+    <string name="state_busy_description" gender="unknown">zasedeno</string>
+    <string name="state_expanded_description" gender="unknown">razširjen</string>
+    <string name="state_collapsed_description" gender="unknown">strnjeno</string>
+    <string name="state_unselected_description" gender="unknown">neizbrano</string>
+    <string name="state_on_description" gender="unknown">vklopljeno</string>
+    <string name="state_off_description" gender="unknown">izključeno</string>
+    <string name="state_mixed_description" gender="unknown">mešano</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sq/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sq/strings.xml
new file mode 100644
index 0000000..4b681fa
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sq/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sq_AL -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Lidhja</string>
+    <string name="image_description" gender="unknown">Imazh</string>
+    <string name="imagebutton_description" gender="unknown">Buton, imazh</string>
+    <string name="header_description" gender="unknown">Titull</string>
+    <string name="alert_description" gender="unknown">Sinjalizim</string>
+    <string name="combobox_description" gender="unknown">Kuti kombinimi</string>
+    <string name="menu_description" gender="unknown">Meny</string>
+    <string name="menubar_description" gender="unknown">Shiriti i menysë</string>
+    <string name="menuitem_description" gender="unknown">Artikull i menysë</string>
+    <string name="progressbar_description" gender="unknown">Shiriti i Progresit</string>
+    <string name="radiogroup_description" gender="unknown">Grupi i Radios</string>
+    <string name="scrollbar_description" gender="unknown">Shiriti i lëvizjes</string>
+    <string name="spinbutton_description" gender="unknown">Butoni i rrotullimit</string>
+    <string name="rn_tab_description" gender="unknown">Skedë</string>
+    <string name="tablist_description" gender="unknown">Lista e skedave</string>
+    <string name="timer_description" gender="unknown">Kohëmatësi</string>
+    <string name="toolbar_description" gender="unknown">Shiriti i mjeteve</string>
+    <string name="summary_description" gender="unknown">Përmbledhja</string>
+    <string name="state_busy_description" gender="unknown">I zënë</string>
+    <string name="state_expanded_description" gender="unknown">zgjeruar</string>
+    <string name="state_collapsed_description" gender="unknown">palosur</string>
+    <string name="state_unselected_description" gender="unknown">i pazgjedhur</string>
+    <string name="state_on_description" gender="unknown">aktive</string>
+    <string name="state_off_description" gender="unknown">joaktiv</string>
+    <string name="state_mixed_description" gender="unknown">përzier</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sr/strings.xml
new file mode 100644
index 0000000..28d6ea3
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sr/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sr_RS -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Веза</string>
+    <string name="image_description" gender="unknown">Слика</string>
+    <string name="imagebutton_description" gender="unknown">Дугме, слика</string>
+    <string name="header_description" gender="unknown">Заглавље</string>
+    <string name="alert_description" gender="unknown">Обавештење</string>
+    <string name="combobox_description" gender="unknown">Комбиновано поље</string>
+    <string name="menu_description" gender="unknown">Мени</string>
+    <string name="menubar_description" gender="unknown">Трака са менијем</string>
+    <string name="menuitem_description" gender="unknown">Ставка из менија</string>
+    <string name="progressbar_description" gender="unknown">Трака са напретком</string>
+    <string name="radiogroup_description" gender="unknown">Група за радио</string>
+    <string name="scrollbar_description" gender="unknown">Трака за померање</string>
+    <string name="spinbutton_description" gender="unknown">Дугме за окретање</string>
+    <string name="rn_tab_description" gender="unknown">Картица</string>
+    <string name="tablist_description" gender="unknown">Листа картица</string>
+    <string name="timer_description" gender="unknown">Тајмер</string>
+    <string name="toolbar_description" gender="unknown">Трака са алаткама</string>
+    <string name="summary_description" gender="unknown">Резиме</string>
+    <string name="state_busy_description" gender="unknown">заузето</string>
+    <string name="state_expanded_description" gender="unknown">проширено</string>
+    <string name="state_collapsed_description" gender="unknown">скупљено</string>
+    <string name="state_unselected_description" gender="unknown">избор опозван</string>
+    <string name="state_on_description" gender="unknown">укључено</string>
+    <string name="state_off_description" gender="unknown">искључено</string>
+    <string name="state_mixed_description" gender="unknown">мешано</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sv/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sv/strings.xml
new file mode 100644
index 0000000..c40edbe
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sv/strings.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sv_SE -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Länk</string>
+    <string name="image_description" gender="unknown">Bild</string>
+    <string name="imagebutton_description" gender="unknown">Knapp, bild</string>
+    <string name="header_description" gender="unknown">Rubrik</string>
+    <string name="alert_description" gender="unknown">Avisering</string>
+    <string name="combobox_description" gender="unknown">Kombinationsruta</string>
+    <string name="menu_description" gender="unknown">Meny</string>
+    <string name="menubar_description" gender="unknown">Menyfält</string>
+    <string name="menuitem_description" gender="unknown">Menyobjekt</string>
+    <string name="progressbar_description" gender="unknown">Förloppsfält</string>
+    <string name="radiogroup_description" gender="unknown">Radiogrupp</string>
+    <string name="scrollbar_description" gender="unknown">Bläddringslist</string>
+    <string name="spinbutton_description" gender="unknown">Rotationsknapp</string>
+    <string name="rn_tab_description" gender="unknown">Flik</string>
+    <string name="tablist_description" gender="unknown">Fliklista</string>
+    <string name="toolbar_description" gender="unknown">Verktygsfält</string>
+    <string name="summary_description" gender="unknown">Sammanfattning</string>
+    <string name="state_busy_description" gender="unknown">upptagen</string>
+    <string name="state_expanded_description" gender="unknown">utökad</string>
+    <string name="state_collapsed_description" gender="unknown">minimerad</string>
+    <string name="state_unselected_description" gender="unknown">avmarkerad</string>
+    <string name="state_on_description" gender="unknown">på</string>
+    <string name="state_off_description" gender="unknown">av</string>
+    <string name="state_mixed_description" gender="unknown">blandad</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sw/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sw/strings.xml
new file mode 100644
index 0000000..a26adb8
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-sw/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sw_KE -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Kiungo</string>
+    <string name="image_description" gender="unknown">Picha</string>
+    <string name="imagebutton_description" gender="unknown">Kitufe, Picha</string>
+    <string name="header_description" gender="unknown">Kichwa</string>
+    <string name="alert_description" gender="unknown">Arifa</string>
+    <string name="combobox_description" gender="unknown">Kisanduku cha Combo</string>
+    <string name="menu_description" gender="unknown">Menyu</string>
+    <string name="menubar_description" gender="unknown">Upau wa Menyu</string>
+    <string name="menuitem_description" gender="unknown">Kipengee cha Menyu</string>
+    <string name="progressbar_description" gender="unknown">Upau wa Hatua</string>
+    <string name="radiogroup_description" gender="unknown">Kundi la Redio</string>
+    <string name="scrollbar_description" gender="unknown">Mwambaa wa Kubiringiza</string>
+    <string name="spinbutton_description" gender="unknown">Kitufe cha Kuzungusha</string>
+    <string name="rn_tab_description" gender="unknown">Kichupo</string>
+    <string name="tablist_description" gender="unknown">Orodha ya Kichupo</string>
+    <string name="timer_description" gender="unknown">Kipima muda</string>
+    <string name="toolbar_description" gender="unknown">Upau wa Zana</string>
+    <string name="summary_description" gender="unknown">Muhtasari</string>
+    <string name="state_busy_description" gender="unknown">shughulini</string>
+    <string name="state_expanded_description" gender="unknown">imepanuliwa</string>
+    <string name="state_collapsed_description" gender="unknown">imekunjwa</string>
+    <string name="state_unselected_description" gender="unknown">haijateuliwa</string>
+    <string name="state_on_description" gender="unknown">imewashwa</string>
+    <string name="state_off_description" gender="unknown">imezimwa</string>
+    <string name="state_mixed_description" gender="unknown">mchanganyiko</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ta/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ta/strings.xml
new file mode 100644
index 0000000..9823eab
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ta/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ta_IN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">இணைப்பு</string>
+    <string name="image_description" gender="unknown">படம்</string>
+    <string name="imagebutton_description" gender="unknown">பொத்தான், படம்</string>
+    <string name="header_description" gender="unknown">தலைப்பு</string>
+    <string name="alert_description" gender="unknown">நினைவூட்டல்</string>
+    <string name="combobox_description" gender="unknown">காம்போ பெட்டி</string>
+    <string name="menu_description" gender="unknown">மெனு</string>
+    <string name="menubar_description" gender="unknown">மெனு பட்டி</string>
+    <string name="menuitem_description" gender="unknown">மெனு பொருள்</string>
+    <string name="progressbar_description" gender="unknown">போக்கு பட்டி</string>
+    <string name="radiogroup_description" gender="unknown">ரேடியோ குழு</string>
+    <string name="scrollbar_description" gender="unknown">உருட்டுப்பட்டி</string>
+    <string name="spinbutton_description" gender="unknown">ஸ்பின் பட்டன்</string>
+    <string name="rn_tab_description" gender="unknown">பிரிவு</string>
+    <string name="tablist_description" gender="unknown">பிரிவுப் பட்டியல்</string>
+    <string name="timer_description" gender="unknown">டைமர்</string>
+    <string name="toolbar_description" gender="unknown">கருவிப்பட்டி</string>
+    <string name="summary_description" gender="unknown">சுருக்கம்</string>
+    <string name="state_busy_description" gender="unknown">பணிமிகுதி</string>
+    <string name="state_expanded_description" gender="unknown">விரிவாக்கப்பட்டது</string>
+    <string name="state_collapsed_description" gender="unknown">சுருக்கப்பட்டது</string>
+    <string name="state_unselected_description" gender="unknown">தேர்வுநீக்கப்பட்டது</string>
+    <string name="state_on_description" gender="unknown">ஆன்</string>
+    <string name="state_off_description" gender="unknown">ஆஃப்</string>
+    <string name="state_mixed_description" gender="unknown">கலந்துள்ளது</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-te/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-te/strings.xml
new file mode 100644
index 0000000..f08a251
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-te/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: te_IN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">లింక్</string>
+    <string name="image_description" gender="unknown">చిత్రం</string>
+    <string name="imagebutton_description" gender="unknown">బటన్, చిత్రం</string>
+    <string name="header_description" gender="unknown">శీర్షిక</string>
+    <string name="alert_description" gender="unknown">హెచ్చరిక</string>
+    <string name="combobox_description" gender="unknown">కాంబో బాక్స్</string>
+    <string name="menu_description" gender="unknown">మెను</string>
+    <string name="menubar_description" gender="unknown">మెను బార్</string>
+    <string name="menuitem_description" gender="unknown">మెను ఐటమ్</string>
+    <string name="progressbar_description" gender="unknown">ప్రోగ్రెస్ బార్</string>
+    <string name="radiogroup_description" gender="unknown">రేడియో గ్రూప్</string>
+    <string name="scrollbar_description" gender="unknown">స్క్రోల్ బార్</string>
+    <string name="spinbutton_description" gender="unknown">స్పిన్ బటన్</string>
+    <string name="rn_tab_description" gender="unknown">ట్యాబ్</string>
+    <string name="tablist_description" gender="unknown">ట్యాబ్ జాబితా</string>
+    <string name="timer_description" gender="unknown">టైమర్</string>
+    <string name="toolbar_description" gender="unknown">టూల్ బార్</string>
+    <string name="summary_description" gender="unknown">సమ్మరీ</string>
+    <string name="state_busy_description" gender="unknown">బిజీగా ఉన్నారు</string>
+    <string name="state_expanded_description" gender="unknown">విస్తరింపబడింది</string>
+    <string name="state_collapsed_description" gender="unknown">కుదించబడింది</string>
+    <string name="state_unselected_description" gender="unknown">ఎంపిక తీసివేసారు</string>
+    <string name="state_on_description" gender="unknown">ఆన్ చేయి</string>
+    <string name="state_off_description" gender="unknown">ఆఫ్ చేయి</string>
+    <string name="state_mixed_description" gender="unknown">మిక్స్డ్</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-th/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-th/strings.xml
new file mode 100644
index 0000000..f78b401
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-th/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: th_TH -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">ลิงก์</string>
+    <string name="image_description" gender="unknown">รูปภาพ</string>
+    <string name="imagebutton_description" gender="unknown">ปุ่ม, รูปภาพ</string>
+    <string name="header_description" gender="unknown">ส่วนหัว</string>
+    <string name="alert_description" gender="unknown">การแจ้งเตือน</string>
+    <string name="combobox_description" gender="unknown">กล่องคอมโบ</string>
+    <string name="menu_description" gender="unknown">เมนู</string>
+    <string name="menubar_description" gender="unknown">แถบเมนู</string>
+    <string name="menuitem_description" gender="unknown">รายการในเมนู</string>
+    <string name="progressbar_description" gender="unknown">แถบความคืบหน้า</string>
+    <string name="radiogroup_description" gender="unknown">กลุ่มปุ่มตัวเลือก</string>
+    <string name="scrollbar_description" gender="unknown">แถบเลื่อน</string>
+    <string name="spinbutton_description" gender="unknown">ปุ่มเพิ่ม/ลด</string>
+    <string name="rn_tab_description" gender="unknown">แท็บ</string>
+    <string name="tablist_description" gender="unknown">รายการแท็บ</string>
+    <string name="timer_description" gender="unknown">ตัวจับเวลา</string>
+    <string name="toolbar_description" gender="unknown">แถบเครื่องมือ</string>
+    <string name="summary_description" gender="unknown">สรุป</string>
+    <string name="state_busy_description" gender="unknown">ไม่ว่าง</string>
+    <string name="state_expanded_description" gender="unknown">ขยายแล้ว</string>
+    <string name="state_collapsed_description" gender="unknown">ยุบแล้ว</string>
+    <string name="state_unselected_description" gender="unknown">ไม่ได้เลือก</string>
+    <string name="state_on_description" gender="unknown">เปิดอยู่</string>
+    <string name="state_off_description" gender="unknown">ปิดอยู่</string>
+    <string name="state_mixed_description" gender="unknown">ผสมกัน</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-tr/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-tr/strings.xml
new file mode 100644
index 0000000..f8866df
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-tr/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: tr_TR -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Bağlantı</string>
+    <string name="image_description" gender="unknown">Görsel</string>
+    <string name="imagebutton_description" gender="unknown">Düğme, Görsel</string>
+    <string name="header_description" gender="unknown">Başlık</string>
+    <string name="alert_description" gender="unknown">Uyarı</string>
+    <string name="combobox_description" gender="unknown">Karma Kutu</string>
+    <string name="menu_description" gender="unknown">Menü</string>
+    <string name="menubar_description" gender="unknown">Menü Çubuğu</string>
+    <string name="menuitem_description" gender="unknown">Menü Seçeneği</string>
+    <string name="progressbar_description" gender="unknown">İlerleme Çubuğu</string>
+    <string name="radiogroup_description" gender="unknown">Radyo Grubu</string>
+    <string name="scrollbar_description" gender="unknown">Kaydırma Çubuğu</string>
+    <string name="spinbutton_description" gender="unknown">Döndürme Düğmesi</string>
+    <string name="rn_tab_description" gender="unknown">Sekme</string>
+    <string name="tablist_description" gender="unknown">Sekme Listesi</string>
+    <string name="timer_description" gender="unknown">Zamanlayıcı</string>
+    <string name="toolbar_description" gender="unknown">Araç Çubuğu</string>
+    <string name="summary_description" gender="unknown">Özet</string>
+    <string name="state_busy_description" gender="unknown">meşgul</string>
+    <string name="state_expanded_description" gender="unknown">genişletilmiş</string>
+    <string name="state_collapsed_description" gender="unknown">daraltılmış</string>
+    <string name="state_unselected_description" gender="unknown">seçili değil</string>
+    <string name="state_on_description" gender="unknown">açık</string>
+    <string name="state_off_description" gender="unknown">kapalı</string>
+    <string name="state_mixed_description" gender="unknown">karışık</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-uk/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-uk/strings.xml
new file mode 100644
index 0000000..02c3e74
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-uk/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: uk_UA -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Посилання</string>
+    <string name="image_description" gender="unknown">Зображення</string>
+    <string name="imagebutton_description" gender="unknown">Кнопка, зображення</string>
+    <string name="header_description" gender="unknown">Заголовок</string>
+    <string name="alert_description" gender="unknown">Сповіщення</string>
+    <string name="combobox_description" gender="unknown">Комбінований список</string>
+    <string name="menu_description" gender="unknown">Меню</string>
+    <string name="menubar_description" gender="unknown">Рядок меню</string>
+    <string name="menuitem_description" gender="unknown">Об\'єкт меню</string>
+    <string name="progressbar_description" gender="unknown">Індикатор прогресу</string>
+    <string name="radiogroup_description" gender="unknown">Група перемикачів</string>
+    <string name="scrollbar_description" gender="unknown">Прокручування</string>
+    <string name="spinbutton_description" gender="unknown">Кнопка обертання</string>
+    <string name="rn_tab_description" gender="unknown">Вкладка</string>
+    <string name="tablist_description" gender="unknown">Список вкладок</string>
+    <string name="timer_description" gender="unknown">Таймер</string>
+    <string name="toolbar_description" gender="unknown">Панель інструментів</string>
+    <string name="summary_description" gender="unknown">Зведення</string>
+    <string name="state_busy_description" gender="unknown">зайнято</string>
+    <string name="state_expanded_description" gender="unknown">розгорнуто</string>
+    <string name="state_collapsed_description" gender="unknown">згорнуто</string>
+    <string name="state_unselected_description" gender="unknown">не вибрано</string>
+    <string name="state_on_description" gender="unknown">Увімк.</string>
+    <string name="state_off_description" gender="unknown">Вимк.</string>
+    <string name="state_mixed_description" gender="unknown">змішано</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ur/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ur/strings.xml
new file mode 100644
index 0000000..7d1bd49
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-ur/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ur_PK -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">لنک</string>
+    <string name="image_description" gender="unknown">تصویر</string>
+    <string name="imagebutton_description" gender="unknown">بٹن، تصویر</string>
+    <string name="header_description" gender="unknown">سرخی</string>
+    <string name="alert_description" gender="unknown">الرٹ</string>
+    <string name="combobox_description" gender="unknown">کومبو باکس</string>
+    <string name="menu_description" gender="unknown">مینیو</string>
+    <string name="menubar_description" gender="unknown">مینیو بار</string>
+    <string name="menuitem_description" gender="unknown">مینیو آئٹم</string>
+    <string name="progressbar_description" gender="unknown">پیشرفت کی بار</string>
+    <string name="radiogroup_description" gender="unknown">ریڈیو گروپ</string>
+    <string name="scrollbar_description" gender="unknown">سکرول بار</string>
+    <string name="spinbutton_description" gender="unknown">گھمانے کا بٹن</string>
+    <string name="rn_tab_description" gender="unknown">ٹیب</string>
+    <string name="tablist_description" gender="unknown">ٹیب کی لسٹ</string>
+    <string name="timer_description" gender="unknown">ٹائمر</string>
+    <string name="toolbar_description" gender="unknown">ٹول بار</string>
+    <string name="summary_description" gender="unknown">خلاصہ</string>
+    <string name="state_busy_description" gender="unknown">مصروف</string>
+    <string name="state_expanded_description" gender="unknown">توسیع کیا گیا</string>
+    <string name="state_collapsed_description" gender="unknown">سکیڑا گیا</string>
+    <string name="state_unselected_description" gender="unknown">غیر منتخب کردہ</string>
+    <string name="state_on_description" gender="unknown">آن ہے</string>
+    <string name="state_off_description" gender="unknown">آف ہے</string>
+    <string name="state_mixed_description" gender="unknown">امتزاج</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-vi/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-vi/strings.xml
new file mode 100644
index 0000000..5a18588
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-vi/strings.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: vi_VN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">Liên kết</string>
+    <string name="image_description" gender="unknown">Hình ảnh</string>
+    <string name="imagebutton_description" gender="unknown">Nút, Hình ảnh</string>
+    <string name="header_description" gender="unknown">Tiêu đề</string>
+    <string name="alert_description" gender="unknown">Thông báo</string>
+    <string name="combobox_description" gender="unknown">Ô lựa chọn</string>
+    <string name="menubar_description" gender="unknown">Thanh menu</string>
+    <string name="menuitem_description" gender="unknown">Mục trong menu</string>
+    <string name="progressbar_description" gender="unknown">Thanh tiến độ</string>
+    <string name="radiogroup_description" gender="unknown">Nhóm nút radio</string>
+    <string name="scrollbar_description" gender="unknown">Thanh cuộn</string>
+    <string name="spinbutton_description" gender="unknown">Nút quay</string>
+    <string name="tablist_description" gender="unknown">Danh sách tab</string>
+    <string name="timer_description" gender="unknown">Bộ hẹn giờ</string>
+    <string name="toolbar_description" gender="unknown">Thanh công cụ</string>
+    <string name="summary_description" gender="unknown">Tóm tắt</string>
+    <string name="state_busy_description" gender="unknown">bận</string>
+    <string name="state_expanded_description" gender="unknown">đã mở rộng</string>
+    <string name="state_collapsed_description" gender="unknown">đã thu gọn</string>
+    <string name="state_unselected_description" gender="unknown">không được chọn</string>
+    <string name="state_on_description" gender="unknown">đang bật</string>
+    <string name="state_off_description" gender="unknown">đang tắt</string>
+    <string name="state_mixed_description" gender="unknown">kết hợp</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zh-rCN/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zh-rCN/strings.xml
new file mode 100644
index 0000000..3727372
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zh-rCN/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zh_CN -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">链接</string>
+    <string name="image_description" gender="unknown">图片</string>
+    <string name="imagebutton_description" gender="unknown">按钮，图片</string>
+    <string name="header_description" gender="unknown">标题</string>
+    <string name="alert_description" gender="unknown">提醒</string>
+    <string name="combobox_description" gender="unknown">组合框</string>
+    <string name="menu_description" gender="unknown">菜单</string>
+    <string name="menubar_description" gender="unknown">菜单栏</string>
+    <string name="menuitem_description" gender="unknown">菜单项目</string>
+    <string name="progressbar_description" gender="unknown">进度条</string>
+    <string name="radiogroup_description" gender="unknown">单选组</string>
+    <string name="scrollbar_description" gender="unknown">滚动条</string>
+    <string name="spinbutton_description" gender="unknown">旋转按钮</string>
+    <string name="rn_tab_description" gender="unknown">选项卡</string>
+    <string name="tablist_description" gender="unknown">选项卡列表</string>
+    <string name="timer_description" gender="unknown">倒计时</string>
+    <string name="toolbar_description" gender="unknown">工具栏</string>
+    <string name="summary_description" gender="unknown">摘要</string>
+    <string name="state_busy_description" gender="unknown">忙碌中</string>
+    <string name="state_expanded_description" gender="unknown">已展开</string>
+    <string name="state_collapsed_description" gender="unknown">已收起</string>
+    <string name="state_unselected_description" gender="unknown">未选中</string>
+    <string name="state_on_description" gender="unknown">开启</string>
+    <string name="state_off_description" gender="unknown">关闭</string>
+    <string name="state_mixed_description" gender="unknown">混合</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zh-rHK/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zh-rHK/strings.xml
new file mode 100644
index 0000000..c2f4bc5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zh-rHK/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zh_HK -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">連結</string>
+    <string name="image_description" gender="unknown">圖像</string>
+    <string name="imagebutton_description" gender="unknown">圖像，按鈕</string>
+    <string name="header_description" gender="unknown">標題</string>
+    <string name="alert_description" gender="unknown">提醒</string>
+    <string name="combobox_description" gender="unknown">下拉式方塊</string>
+    <string name="menu_description" gender="unknown">選單</string>
+    <string name="menubar_description" gender="unknown">選單列</string>
+    <string name="menuitem_description" gender="unknown">選單項目</string>
+    <string name="progressbar_description" gender="unknown">進度列</string>
+    <string name="radiogroup_description" gender="unknown">選項按鈕群組</string>
+    <string name="scrollbar_description" gender="unknown">捲軸</string>
+    <string name="spinbutton_description" gender="unknown">微調按鈕</string>
+    <string name="rn_tab_description" gender="unknown">分頁</string>
+    <string name="tablist_description" gender="unknown">分頁清單</string>
+    <string name="timer_description" gender="unknown">計時器</string>
+    <string name="toolbar_description" gender="unknown">工具列</string>
+    <string name="summary_description" gender="unknown">摘要</string>
+    <string name="state_busy_description" gender="unknown">忙碌中</string>
+    <string name="state_expanded_description" gender="unknown">已展開</string>
+    <string name="state_collapsed_description" gender="unknown">已收合</string>
+    <string name="state_unselected_description" gender="unknown">已取消選取</string>
+    <string name="state_on_description" gender="unknown">開啟</string>
+    <string name="state_off_description" gender="unknown">關閉</string>
+    <string name="state_mixed_description" gender="unknown">混合</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zh-rTW/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zh-rTW/strings.xml
new file mode 100644
index 0000000..b6d6018
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zh-rTW/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zh_TW -->
+<resources exclude-from-buck-resource-map="true">
+    <string name="link_description" gender="unknown">連結</string>
+    <string name="image_description" gender="unknown">圖像</string>
+    <string name="imagebutton_description" gender="unknown">圖像，按鈕</string>
+    <string name="header_description" gender="unknown">標題</string>
+    <string name="alert_description" gender="unknown">提醒</string>
+    <string name="combobox_description" gender="unknown">下拉式方塊</string>
+    <string name="menu_description" gender="unknown">功能表</string>
+    <string name="menubar_description" gender="unknown">功能表列</string>
+    <string name="menuitem_description" gender="unknown">功能表項目</string>
+    <string name="progressbar_description" gender="unknown">進度列</string>
+    <string name="radiogroup_description" gender="unknown">選項按鈕群組</string>
+    <string name="scrollbar_description" gender="unknown">捲軸</string>
+    <string name="spinbutton_description" gender="unknown">微調按鈕</string>
+    <string name="rn_tab_description" gender="unknown">頁籤</string>
+    <string name="tablist_description" gender="unknown">頁籤清單</string>
+    <string name="timer_description" gender="unknown">計時器</string>
+    <string name="toolbar_description" gender="unknown">工具列</string>
+    <string name="summary_description" gender="unknown">摘要</string>
+    <string name="state_busy_description" gender="unknown">忙碌中</string>
+    <string name="state_expanded_description" gender="unknown">已展開</string>
+    <string name="state_collapsed_description" gender="unknown">已收合</string>
+    <string name="state_unselected_description" gender="unknown">已取消選取</string>
+    <string name="state_on_description" gender="unknown">開啟</string>
+    <string name="state_off_description" gender="unknown">關閉</string>
+    <string name="state_mixed_description" gender="unknown">混合</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zu/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zu/strings.xml
new file mode 100644
index 0000000..44cf81d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values-zu/strings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zu_ZA -->
+<resources exclude-from-buck-resource-map="true">
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values/ids.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values/ids.xml
new file mode 100644
index 0000000..93958b2
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values/ids.xml
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <!-- tag is used to store the testID tag -->
+  <item type="id" name="react_test_id"/>
+
+  <!-- tag is used to store the nativeID tag -->
+  <item type="id" name="view_tag_native_id"/>
+
+  <!-- tag is used to store the nativeID tag -->
+  <item type="id" name="view_tag_instance_handle"/>
+
+  <!-- tag is used to store accessibilityHint tag-->
+  <item type="id" name="accessibility_hint"/>
+
+  <!-- tag is used to store accessibilityRole tag-->
+  <item type="id" name="accessibility_role"/>
+
+  <!-- tag is used to store accessibilityCollection -->
+  <item type="id" name="accessibility_collection"/>
+
+  <!-- tag is used to store accessibilityCollectionItem -->
+  <item type="id" name="accessibility_collection_item"/>
+
+  <!-- tag is used to store accessibilityState -->
+  <item type="id" name="accessibility_state"/>
+
+  <!--tag is used to store accessibilityStateExpanded -->
+  <item type="id" name="accessibility_state_expanded"/>
+
+  <!--tag is used to store accessibilityLabel tag-->
+  <item type="id" name="accessibility_label"/>
+
+  <!-- tag is used to store accessibilityActions tag-->
+  <item type="id" name="accessibility_actions"/>
+
+  <!-- tag is used to store accessibilityValue tag -->
+  <item type="id" name="accessibility_value"/>
+
+  <!-- tag is used to store accessibilityLinks tag -->
+  <item type="id" name="accessibility_links"/>
+
+  <!-- tag is used to store accessibilityLabelledBy tag -->
+  <item type="id" name="labelled_by"/>
+
+  <!-- tag is used store bitset of pointer events observed -->
+  <item type="id" name="pointer_events"/>
+
+  <!-- tag is used store raw transform style on the view -->
+  <item type="id" name="transform"/>
+
+  <!-- tag is used store raw transform origin style on the view -->
+  <item type="id" name="transform_origin"/>
+
+  <!-- tag is used to store role tag-->
+  <item type="id" name="role"/>
+
+  <!-- tag is used to invalidate transform style in view manager -->
+  <item type="id" name="invalidate_transform"/>
+
+  <!-- tag is used to store if we should render the view to a hardware texture -->
+  <item type="id" name="use_hardware_layer"/>
+
+  <!-- tag is used to store graphical filter effects to apply to the view -->
+  <item type="id" name="filter"/>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values/strings.xml b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values/strings.xml
new file mode 100644
index 0000000..a2f6ad5
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/bin/src/main/res/views/uimanager/values/strings.xml
@@ -0,0 +1,103 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <string
+    name="link_description"
+    description="provides an interactive reference to a resource"
+    >Link</string>
+  <string
+    name="image_description"
+    description="images, code snippets, text, emojis, or other content that can be combined to deliver information in a visual manner"
+    >Image</string>
+  <string
+    name="imagebutton_description"
+    description="Displays a button with an image (instead of text) that can be pressed or clicked by the user"
+    >Button, Image</string>
+  <string
+    name="header_description"
+    description="heading to a page or section"
+    >Heading</string>
+  <string
+    name="alert_description"
+    description="important, and usually time-sensitive, information"
+    >Alert</string>
+  <string
+    name="combobox_description"
+    description="input that controls another element that can pop up to help the user set the value of that input"
+    >Combo Box</string>
+  <string
+    name="menu_description"
+    description="offers a list of choices to the user"
+    >Menu</string>
+  <string
+    name="menubar_description"
+    description="presentation of menu that usually remains visible and is usually presented horizontally"
+    >Menu Bar</string>
+  <string
+    name="menuitem_description"
+    description="an option in a set of choices contained by a menu or menubar"
+    >Menu Item</string>
+  <string
+    name="progressbar_description"
+    description="displays the progress status for tasks that take a long time"
+    >Progress Bar</string>
+  <string
+    name="radiogroup_description"
+    description="a group of radio buttons"
+    >Radio Group</string>
+  <string
+    name="scrollbar_description"
+    description="controls the scrolling of content within a viewing area"
+    >Scroll Bar</string>
+  <string
+    name="spinbutton_description"
+    description="defines a type of range that expects the user to select a value from among discrete choices"
+    >Spin Button</string>
+  <string
+    name="rn_tab_description"
+    description="an interactive element inside a tablist"
+    >Tab</string>
+  <string
+    name="tablist_description"
+    description="container for a set of tabs"
+    >Tab List</string>
+  <string
+    name="timer_description"
+    description="a numerical counter listing the amount of elapsed time from a starting point or the remaining time until an end point"
+    >Timer</string>
+  <string
+    name="toolbar_description"
+    description="a collection of commonly used function buttons or controls represented in a compact visual form"
+    >Tool Bar</string>
+  <string
+    name="summary_description"
+    description="provides a summary of current conditions, settings, or state, such as the current temperature in the Weather app"
+    >Summary</string>
+  <string
+    name="state_busy_description"
+    description="an element currently being updated or modified"
+    >busy</string>
+  <string
+    name="state_expanded_description"
+    description="a menu, dialog, accordian panel, or other widget which is expanded"
+    >expanded</string>
+  <string
+    name="state_collapsed_description"
+    description="a menu, dialog, accordian panel, or other widget which is collapsed"
+    >collapsed</string>
+  <string
+    name="state_unselected_description"
+    description="used to indicate which elements within single-selection and multiple-selection composite widgets are not selected"
+    >unselected</string>
+  <string
+    name="state_on_description"
+    description="a switch in its enabled state"
+    >on</string>
+  <string
+    name="state_off_description"
+    description="a switch in its disabled state"
+    >off</string>
+  <string
+    name="state_mixed_description"
+    description="a checkbox, radio button, or other widget which is both checked and unchecked"
+    >mixed</string>
+</resources>
diff --git a/node_modules/react-native/ReactAndroid/flipper-integration/.project b/node_modules/react-native/ReactAndroid/flipper-integration/.project
new file mode 100644
index 0000000..1a9ca6d
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/flipper-integration/.project
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>flipper-integration</name>
+	<comment>Project flipper-integration created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1724676428893</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/react-native/ReactAndroid/hermes-engine/.project b/node_modules/react-native/ReactAndroid/hermes-engine/.project
new file mode 100644
index 0000000..ec4907c
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/hermes-engine/.project
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>hermes-engine</name>
+	<comment>Project hermes-engine created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1724676428895</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/react-native/third-party-podspecs/boost.podspec b/node_modules/react-native/third-party-podspecs/boost.podspec
index d130fb0..9f8397e 100644
--- a/node_modules/react-native/third-party-podspecs/boost.podspec
+++ b/node_modules/react-native/third-party-podspecs/boost.podspec
@@ -16,12 +16,12 @@ Pod::Spec.new do |spec|
   # Pinning to the same version as React.podspec.
   spec.platforms = min_supported_versions
   spec.requires_arc = false
-  spec.source_files = 'boost/**/*.{hpp,cpp}'
+  # spec.source_files = 'boost/**/*.{hpp,cpp}'
 
   spec.module_name = 'boost'
   spec.header_dir = 'boost'
   spec.preserve_path = 'boost'
-  spec.header_mappings_dir = 'boost/boost'
+  # spec.header_mappings_dir = 'boost/boost'
 
   spec.resource_bundles = {'boost_privacy' => 'boost/PrivacyInfo.xcprivacy'}
 end
